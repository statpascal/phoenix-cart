procedure Utility;

label
 1, 2;
 
var
 y, i, ans, offset, storeBase, storePtr, tmpPtr, tmpBase, ioCheck : integer;
 tempGPointer : integer;
 utilFlag : boolean;
 gBuffer: array[0..67] of integer;
 mBuffer : array[0..2048] of integer;
 gname : string;
 tempStore : moverec;
 gamefile : file of integer;

begin
 tempGPointer := gamePointer;
 utilFlag := FALSE;
 switch := 0;
 startPage := BASE2;
 dataSize := 2;
 offset := 4000;
 DataOps(2, startPage, dataSize, offset, storePtr);
 offset := 4002;
 DataOps(2, startPage, dataSize, offset, storeBase);
 tmpPtr := storePtr - 136;
 tmpBase := storeBase;

 repeat
  gotoxy(20, 3);
  write('[1] load game');
  gotoxy(20, 4);
  write('[2] save game      ');
  gotoxy(20, 5);
  write('[3] backup');
  gotoxy(20, 6);
  write('[4] forward');
  gotoxy(20, 7);
  write('[5] first move');
  gotoxy(20, 8);
  write('[6] last move');
  gotoxy(20, 9);
  write('[7] switch sides');
  gotoxy(20, 10);
  write('[8] change ply');
  gotoxy(20, 11);
  write('[9] play');
  gotoxy(20, 12);
  write('[0] end game');
  gotoxy(20, 13);
  write('[P] print game');
  repeat
   ans := GetKey;
  until ans in[48..57, 80];

  ClearFields;

  case ans of
   80: begin {print}
        PrintGame;
       end;
   49: begin {load}
        gotoxy(20, 9);
        write('file name: ');
        ans := GetKey;
        gotoxy(20, 10);
        readln(gname);
        {$I-}
        reset(gamefile, gname);
        ioCheck := IORESULT;
        {$I+}
        if ioCheck = 0 then
         begin
          gotoxy(20, 11);
          write('loading...');
          startPage := BASE2;
          dataSize := 4096;
          offset := 0;
          for i := 0 to 2047 do
           begin
            mBuffer[i] := gamefile^;
            get(gamefile);
           end;
          DataOps(1, startPage, dataSize, offset, mBuffer);
           
          storePtr := gamefile^;
          get(gamefile);
          storeBase := gamefile^;
          get(gamefile);
          gamePly := gamefile^;
          get(gamefile);
          gameSide := gamefile^;
          get(gamefile);
          gamePointer := gamefile^;
          
          tempGPointer := gamePointer;
          tmpPtr := storePtr - 136;
          tmpBase := storeBase;

          startPage := BASE2;
          dataSize := 2;
          offset := 4000;
          DataOps(1, startPage, dataSize, offset, storePtr);
          offset := 4002;
          DataOps(1, startPage, dataSize, offset, storeBase);

          startPage := BASE4;
          dataSize := 136;
          offset := 0;
          repeat
           for i := 0 to 67 do
            begin
             get(gamefile);
             gBuffer[i] := gamefile^;
            end;

           DataOps(1, startPage, dataSize, offset, gBuffer);
           offset := offset + 136;
           if offset > 4079 then
            begin
             offset := 0;
             startPage := succ(startPage);
            end;
          until (offset = storePtr) and (startPage = storeBase);

          wCastleFlag := gBuffer[60];
          bCastleFlag := gBuffer[61];
          wRookLFlag := gBuffer[62];
          wRookRFlag := gBuffer[63];
          bRookLFlag := gBuffer[64];
          bRookRFlag := gBuffer[65];
          cWarning := gBuffer[66];
          gameMove := gBuffer[67];
          if storePtr > 0 then
           UpdateBoard(storeBase, storePtr - 136)
          else
           UpdateBoard(pred(storeBase), 3943);
          close(gamefile);
         end
        else
         begin
          gotoxy(20, 10);
          write(chr(7), chr(7), 'file error #', ioCheck);
          readln;
         end;
        gotoxy(20, 10);
        write('                  ');
        gotoxy(20, 11);
        write('           ');
       end;
   50: begin {save}
        gotoxy(20, 9);
        write('file name: ');
        ans := GetKey;
        gotoxy(20, 10);
        readln(gname);
        {$I-}
        rewrite(gamefile, gname);
        ioCheck := IORESULT;
        {$I+}
        if ioCheck = 0 then
         begin
          gotoxy(20, 11);
          write('saving...');
          startPage := BASE2;
          dataSize := 4096;
          offset := 0;
          DataOps(2, startPage, dataSize, offset, mBuffer);
          for i := 0 to 2047 do
           begin
            gamefile^ := mBuffer[i];
            put(gamefile);
           end;
          startPage := BASE4;
          dataSize := 136;
          offset := 0;

          gamefile^ := storePtr;
          put(gamefile);
          gamefile^ := storeBase;
          put(gamefile);
          gamefile^ := gamePly;
          put(gamefile);
          gamefile^ := gameSide;
          put(gamefile);
          gamefile^ := gamePointer;
          put(gamefile);

          repeat
           DataOps(2, startPage, dataSize, offset, gBuffer);
           for i := 0 to 67 do
            begin
             gamefile^ := gBuffer[i];
             put(gamefile);
            end;
           offset := offset + 136;
           if offset > 4079 then
            begin
             startPage := succ(startPage);
             offset := 0;
            end;
          until (offset = storePtr) and (startPage = storeBase);
          close(gamefile, lock);
         end
        else
         begin
          gotoxy(20, 11);
          write(chr(7), chr(7), 'file error #', ioCheck);
          readln;
         end;
        gotoxy(20, 10);
        write('                  ');
        gotoxy(20, 11);
        write('           ');
      end;
  51: begin {backup}
       tmpPtr := tmpPtr - 136;
       if tmpPtr < 0 then
        begin
         tmpBase := pred(tmpBase);
         tmpPtr := 0;
        end;
       if tmpBase < 24 then
        begin
         tmpBase := 24;
         writeln(chr(7));
        end
       else
        begin
         tempGPointer := tempGPointer - 16;
         if tempGPointer < 0 then
          tempGPointer := 0;
         2:
         dataSize := 16;
         offset := tmpPtr + 120;
         dataOps(2, tmpBase, dataSize, offset, gBuffer);
         wCastleFlag := gBuffer[0];
         bCastleFlag := gBuffer[1];
         wRookLFlag := gBuffer[2];
         wRookRFlag := gBuffer[3];
         bRookLFlag := gBuffer[4];
         bRookRFlag := gBuffer[5];
         cWarning := gBuffer[6];
         gameMove := gBuffer[7];
         UpdateBoard(tmpBase, tmpPtr);
        end;
      end;
  52: begin {forward}
       if (tmpBase <> storeBase) or ((tmpBase = storeBase) and
          (tmpPtr < (storePtr - 136))) then
        begin
         tempGPointer := tempGPointer + 16;
         if tempGPointer > gamePointer then
          tempGPointer := gamePointer;
         tmpPtr := tmpPtr + 136;
         if tmpPtr > 4079 then
          begin
           tmpBase := succ(tmpBase);
           tmpPtr := 0;
          end;
         goto 2;
        end
       else
        writeln(chr(7));
      end;
  54: begin {last move}
       tempGPointer := gamePointer;
       tmpPtr := storePtr - 136;
       tmpBase := storeBase;
       goto 2;
      end;
  53: begin {first move}
       tempGPointer := 0;
       tmpPtr := 0;
       tmpBase := 24;
       goto 2;
      end;
  55: begin {switch sides}
       if humanSide = 0 then
        humanSide := 1
       else
        humanSide := 0;
       switch := 1;
       goto 1;
      end;
  56: begin {change ply}
       ClearFields;
       repeat
        gotoxy(20, 10);
        write(chr(7), 'ply: ');
        ans := GetKey;
        readln(gamePly);
       until gamePly in[2..5];
       ply := gamePly;
       gotoxy(0, 1);
       write('ply : ', gamePly);
       ClearFields;
      end;
  57: begin {play}
       1:
       storeBase := tmpBase;
       storePtr := tmpPtr + 136;
       startPage := BASE2;
       dataSize := 2;
       offset := 4000;
       DataOps(1, startPage, dataSize, offset, storePtr);
       offset := 4002;
       DataOps(1, startPage, dataSize, offset, storeBase);
       utilFlag := TRUE;
       turn := gameSide;
       gamePointer := tempGPointer;
       tempStore.id := 99;
       startPage := BASE2;
       dataSize := 8;
       offset := PLAYLIST + gamePointer;
       DataOps(1, startPage, dataSize, offset, tempStore);
       ClearFields;
      end;
  48: begin {end game}
       ClearFields;
       gotoxy(20, 10);
       write(chr(7), 'end game? [y/n]');
       repeat
        ans := GetKey;
       until ans in[89, 78];
       if ans = 89 then
        begin
         pieceCount := -1;
         utilFlag := TRUE;
        end;
       ClearFields;
     end;
  end;
  startPage := BASE;
  dataSize := 8;
 until utilFlag;
end; (* Utility *)

