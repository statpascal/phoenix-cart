        bank all, >6000
        aorg  >6000                     ; cartride address space

        data  >aa01                     ; standard header
        data  >0100                     ; number of programs
        data  >0000                     ; power up list
        data  __l_0                     ; program list
        data  >0000                     ; DSR list
        data  >0000                     ; subprogram list
        data  >0000                     ; ISR list
__l_0:
        data  >0000                     ; no next program
        data  __main_start              ; program address
        byte >07
        text 'PHOENIX'
        even 

__far_call_1:
        mov   *r11+, r12
        mov   *r11+, r13

__far_call_2:
        clr   *r12                      ; switch bank
        b     *r13

__far_ret:
        mov   *r10+, r12
        clr   *r12                      ; switch bank
        b     *r11

__copy_str_const:
        mov   *r10, r12
        mov   @>0002(r10), r13
        movb  *r13, r14
        sra   r14, 8
__l_1:
        movb  *r13+, *r12+
        dec   r14
        joc   __l_1
        ai    r10, >0004
        b     *r11

__copy_set_const:
        mov   *r10, r12
        mov   @>0002(r10), r13
        li    r14, >0010
__l_2:
        mov   *r13+, *r12+
        dec   r14
        jne   __l_2
        ai    r10, >0004
        b     *r11

__main_start:
        lwpi  >8300
        limi  >0000
        clr   @>6000                    ; activate bank 0

; Bank ids at end of each page
        bank 0, >7ffe
        data  >6000
        bank 1, >7ffe
        data  >6002
        bank 2, >7ffe
        data  >6004
        bank 3, >7ffe
        data  >6006
        bank 4, >7ffe
        data  >6008
        bank 5, >7ffe
        data  >600a
        bank 6, >7ffe
        data  >600c
        bank 7, >7ffe
        data  >600e
        bank 8, >7ffe
        data  >6010
        bank 9, >7ffe
        data  >6012
        bank 10, >7ffe
        data  >6014
        bank 11, >7ffe
        data  >6016
        bank 12, >7ffe
        data  >6018
        bank 13, >7ffe
        data  >601a

        bank 0, >6060

; Program: phoenix, level: 1
;   0000       0  memb: array [subrange (0..65535) of int64] of uint8 (absolute)
;   0000       0  memw: array [subrange (0..32767) of int64] of int16 (absolute)
;   4000   16384  header: record (absolute)
;   8370   33648  vdpfree: int16 (absolute)
;   8800   34816  vdprd: char (absolute)
;   8802   34818  vdpsta: char (absolute)
;   8c00   35840  vdpwd: char (absolute)
;   8c02   35842  vdpwa: char (absolute)
;   9800   38912  gromrd: char (absolute)
;   9c02   39938  gromwa: char (absolute)
;   fd3c   64828  __rettmp_3: string [17]
;   fd3c   64828  __rettmp_4: int16
;   fd3c   64828  __rettmp_5: string [30]
;   fd3c   64828  __rettmp_6: string [20]
;   fd3c   64828  __rettmp_8: string [15]
;   fd3c   64828  __rettmp_9: string [25]
;   fd51   64849  __rettmp_7: string [6]
;   fd5c   64860  n: int16
;   fd5e   64862  startpage: int16
;   fd60   64864  spage: int16
;   fd62   64866  datasize: int16
;   fd64   64868  turn: int16
;   fd66   64870  gameside: int16
;   fd68   64872  gamepointer: int16
;   fd6a   64874  piececount: int16
;   fd6c   64876  wcastleflag: int16
;   fd6e   64878  bcastleflag: int16
;   fd70   64880  ply: int16
;   fd72   64882  cwarning: int16
;   fd74   64884  gameply: int16
;   fd76   64886  wmobility: int16
;   fd78   64888  bmobility: int16
;   fd7a   64890  gamemove: int16
;   fd7c   64892  humanside: int16
;   fd7e   64894  wraflag: int16
;   fd80   64896  wlaflag: int16
;   fd82   64898  braflag: int16
;   fd84   64900  blaflag: int16
;   fd86   64902  wrooklflag: int16
;   fd88   64904  wrookrflag: int16
;   fd8a   64906  brooklflag: int16
;   fd8c   64908  brookrflag: int16
;   fd8e   64910  movenumhi: int16
;   fd90   64912  movenumlo: int16
;   fd92   64914  bit1: array [subrange (0..3) of int64] of int16
;   fd9a   64922  bit2: array [subrange (0..3) of int64] of int16
;   fda2   64930  bit3: array [subrange (0..3) of int64] of int16
;   fdaa   64938  bit4: array [subrange (0..3) of int64] of int16
;   fdb2   64946  bit5: array [subrange (0..3) of int64] of int16
;   fdba   64954  bit6: array [subrange (0..3) of int64] of int16
;   fdc2   64962  bit7: array [subrange (0..3) of int64] of int16
;   fdca   64970  bitres: array [subrange (0..3) of int64] of int16
;   fdd2   64978  buffer: array [subrange (0..59) of int64] of int16
;   fe4a   65098  log: file
;   fe72   65138  imagetable: int16
;   fe74   65140  colortable: int16
;   fe76   65142  patterntable: int16
;   fe78   65144  spriteattributetable: int16
;   fe7a   65146  spritepatterntable: int16
;   fe7c   65148  vdpwriteaddress: int16
;   fe7e   65150  imagetableend: int16
;   fe80   65152  videomode: enum
;   fe81   65153  forecolor: enum
;   fe82   65154  backcolor: enum
;   fe84   65156  iloc: int16
;   fe86   65158  disp: int16
;   fe88   65160  cumdisp: int16
;   fe8a   65162  flag: int16
;   fe8c   65164  oflag: int16
;   fe8e   65166  subrtn: int16
;   fe90   65168  subrtn1: int16
;   fe92   65170  pcount: int16
;   fe94   65172  dbyte: uint8
;   fe96   65174  p: pointer to void
;   fe98   65176  i: int16
;   fe9a   65178  j: int16
;   fe9c   65180  movescore: int16
;   fe9e   65182  offset: int16
;   fea0   65184  found: int16
;   fea2   65186  aval: int16
;   fea4   65188  bval: int16
;   fea6   65190  ans: int16
;   fea8   65192  sideoffset: int16
;   feaa   65194  offset1: int16
;   feac   65196  offset2: int16
;   feae   65198  cflag: int16
;   feb0   65200  temppointer: int16
;   feb2   65202  humanflag: boolean
;   feb3   65203  cmflag: boolean
;   feb4   65204  checkflag: boolean
;   feb5   65205  promflag: boolean
;   feb6   65206  repflag: boolean
;   feb8   65208  movearray: array [subrange (0..64) of int64] of int16
;   ff3a   65338  lastmove: record
;   ff42   65346  playmove: record
;   ff4a   65354  movestore: record
;   ff52   65362  tempmove: record
;   ff5a   65370  bit8: array [subrange (0..3) of int64] of int16
;   ff62   65378  input: file
;   ff8a   65418  output: file
;   ffb2   65458  inoutres: int16
;   ffb4   65460  openfiles: array [subrange (1..3) of int64] of record
;   ffc6   65478  $static_vdpregs: array [enum] of array [subrange (0..7) of int64] of uint8
;   ffde   65502  vflag: int16
;   ffe0   65504  zero: int16
;   ffe2   65506  bittab: array [subrange (0..7) of int64] of uint8
;   ffea   65514  heapptr: int16
;   ffec   65516  heapmax: int16
;   ffee   65518  hex: string [16]

phoenix:
        li    r10, >fd3c                ; init stack ptr
        bl    @$init_static
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >601a
        data  $system_init_92
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6006
        data  $bitops_init_29
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >1000
        mov   r1, @>0002(r10)
        li    r1, >3000
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  initheap_85
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  clrscr_22
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_0
        mov   r1, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_3
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd3c                 ; __rettmp_3
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_4
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  samsinit_10
        mov   @>fd3c, @>fd5c            ; __rettmp_4  n
        mov   @>fd5c, r1                ; n
        jne   __l_97
__l_96:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_1
        mov   r1, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_5
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd3c                 ; __rettmp_5
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        b     @__l_93
__l_97:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd62                 ; datasize
        mov   r1, @>0002(r10)
        mov   @>fd5c, *r10              ; n 
        bl    @__far_call_1
        data  >6004
        data  samssize_11
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_2
        mov   r1, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_6
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd3c                 ; __rettmp_6
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd62, @>0002(r10)       ; datasize 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_3
        mov   r1, @>0002(r10)
        li    r1, >fd51                 ; __rettmp_7
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd51                 ; __rettmp_7
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_4
        mov   r1, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_8
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd3c                 ; __rettmp_8
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  loadboarddata_6
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_5
        mov   r1, @>0002(r10)
        li    r1, >fd3c                 ; __rettmp_9
        mov   r1, *r10
        bl    @__copy_str_const
        li    r1, >fd3c                 ; __rettmp_9
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6008
        data  chainmain_30
__l_93:
        blwp  @>0000

__str_cnst_0 text >1150686f656e697820436865737320312e37    ; Phoenix Chess 1.7
__str_cnst_1 text >1e6e6f2053414d53206361726420666f756e64212045786974696e672e2e2e    ; no SAMS card found! Exiting...
__str_cnst_2 text >1453414d5320636172642064657465637465643a20    ; SAMS card detected: 
__str_cnst_3 text >06207061676573    ;  pages
__str_cnst_4 text >0f6c6f6164696e6720646174612e2e2e    ; loading data...
__str_cnst_5 text >197374617274696e672050686f656e69782043686573732e2e2e    ; starting Phoenix Chess...
        even 

; Init static globals: 58 bytes at address 65478
$init_static:
        li    r12, __l_94
        li    r13, >ffc6
        li    r14, >003a
__l_95:
        movb  *r12+, *r13+
        dec   r14
        jne   __l_95
        b     *r11

; Static variable init data
__l_94:
        text >00f001000000001700e0000e01060007
        text >02e006ff037807000000000080402010
        text >08040201200040001030313233343536
        text >37383941424344454600
        even 

        bank 0, >63f0

; Subroutine: boarddat1_3, level: 2
;   0004       4  var result: reference to array [subrange (0..4095) of int64] of uint8

boarddat1_3:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, data1
        mov   @>0004(r9), r2            ; result
        li    r3, >1000
__l_101:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_101
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

; Subroutine: data1, level: 3

data1:
        text >00ff000000000000810000000000000042000000000000002400000000000000
        text >10000000000000000800000000000000000000000000ff000000000000000081
        text >0000000000000042000000000000002400000000000000100000000000000008
        text >ffff00000000ffffffff000000000000000000000000ffff0000ffffffff0000
        text >8080808080808080404040404040404020202020202020201010101010101010
        text >0808080808080808040404040404040402020202020202020101010101010101
        text >7f7f7f7f7f7f7f7fbfbfbfbfbfbfbfbfdfdfdfdfdfdfdfdfefefefefefefefef
        text >f7f7f7f7f7f7f7f7fbfbfbfbfbfbfbfbfdfdfdfdfdfdfdfdfefefefefefefefe
        text >ff0000000000000000ff0000000000000000ff0000000000000000ff00000000
        text >00000000ff0000000000000000ff0000000000000000ff0000000000000000ff
        text >00ffffffffffffffff00ffffffffffffffff00ffffffffffffffff00ffffffff
        text >ffffffff00ffffffffffffffff00ffffffffffffffff00ffffffffffffffff00
        text >8000000000000000400000000000000020000000000000001000000000000000
        text >0800000000000000040000000000000002000000000000000100000000000000
        text >0080000000000000004000000000000000200000000000000010000000000000
        text >0008000000000000000400000000000000020000000000000001000000000000
        text >0000800000000000000040000000000000002000000000000000100000000000
        text >0000080000000000000004000000000000000200000000000000010000000000
        text >0000008000000000000000400000000000000020000000000000001000000000
        text >0000000800000000000000040000000000000002000000000000000100000000
        text >0000000080000000000000004000000000000000200000000000000010000000
        text >0000000008000000000000000400000000000000020000000000000001000000
        text >0000000000800000000000000040000000000000002000000000000000100000
        text >0000000000080000000000000004000000000000000200000000000000010000
        text >0000000000008000000000000000400000000000000020000000000000001000
        text >0000000000000800000000000000040000000000000002000000000000000100
        text >0000000000000080000000000000004000000000000000200000000000000010
        text >0000000000000008000000000000000400000000000000020000000000000001
        text >0000808000000000000040400000000000002020000000000000101000000000
        text >0000080800000000000004040000000000000202000000000000010100000000
        text >0000008000000000000000400000000000000020000000000000001000000000
        text >0000000800000000000000040000000000000002000000000000000100000000
        text >0000000080000000000000004000000000000000200000000000000010000000
        text >0000000008000000000000000400000000000000020000000000000001000000
        text >0000000000800000000000000040000000000000002000000000000000100000
        text >0000000000080000000000000004000000000000000200000000000000010000
        text >0000000000008000000000000000400000000000000020000000000000001000
        text >0000000000000800000000000000040000000000000002000000000000000100
        text >0000000000000080000000000000004000000000000000200000000000000010
        text >0000000000000008000000000000000400000000000000020000000000000001
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >8000000000000000400000000000000020000000000000001000000000000000
        text >0800000000000000040000000000000002000000000000000100000000000000
        text >0080000000000000004000000000000000200000000000000010000000000000
        text >0008000000000000000400000000000000020000000000000001000000000000
        text >0000800000000000000040000000000000002000000000000000100000000000
        text >0000080000000000000004000000000000000200000000000000010000000000
        text >0000008000000000000000400000000000000020000000000000001000000000
        text >0000000800000000000000040000000000000002000000000000000100000000
        text >0000000080000000000000004000000000000000200000000000000010000000
        text >0000000008000000000000000400000000000000020000000000000001000000
        text >0000000080800000000000004040000000000000202000000000000010100000
        text >0000000008080000000000000404000000000000020200000000000001010000
        text >40c0000000000000a0e000000000000050700000000000002838000000000000
        text >141c0000000000000a0e00000000000005070000000000000203000000000000
        text >c040c00000000000e0a0e0000000000070507000000000003828380000000000
        text >1c141c00000000000e0a0e000000000007050700000000000302030000000000
        text >00c040c00000000000e0a0e00000000000705070000000000038283800000000
        text >001c141c00000000000e0a0e0000000000070507000000000003020300000000
        text >0000c040c00000000000e0a0e000000000007050700000000000382838000000
        text >00001c141c00000000000e0a0e00000000000705070000000000030203000000
        text >000000c040c00000000000e0a0e0000000000070507000000000003828380000
        text >0000001c141c00000000000e0a0e000000000007050700000000000302030000
        text >00000000c040c00000000000e0a0e00000000000705070000000000038283800
        text >000000001c141c00000000000e0a0e0000000000070507000000000003020300
        text >0000000000c040c00000000000e0a0e000000000007050700000000000382838
        text >00000000001c141c00000000000e0a0e00000000000705070000000000030203
        text >000000000000c040000000000000e0a000000000000070500000000000003828
        text >0000000000001c140000000000000e0a00000000000007050000000000000302
        text >00204000000000000010a0000000000000885000000000000044280000000000
        text >002214000000000000110a000000000000080500000000000004020000000000
        text >2000204000000000100010a00000000088008850000000004400442800000000
        text >22002214000000001100110a0000000008000805000000000400040200000000
        text >4020002040000000a0100010a000000050880088500000002844004428000000
        text >14220022140000000a1100110a00000005080008050000000204000402000000
        text >004020002040000000a0100010a0000000508800885000000028440044280000
        text >0014220022140000000a1100110a000000050800080500000002040004020000
        text >00004020002040000000a0100010a00000005088008850000000284400442800
        text >000014220022140000000a1100110a0000000508000805000000020400040200
        text >0000004020002040000000a0100010a000000050880088500000002844004428
        text >00000014220022140000000a1100110a00000005080008050000000204000402
        text >000000004020002000000000a010001000000000508800880000000028440044
        text >0000000014220022000000000a11001100000000050800080000000002040004
        text >00000000004020000000000000a0100000000000005088000000000000284400
        text >000000000014220000000000000a110000000000000508000000000000020400
        text >7fc0a09088848281bfe0504844424140df70a82422212020ef38549211101010
        text >f71c2a4988080808fb0e152444840404fd070a1222428202fe03050911214181
        text >c07fc0a090888482e0bfe0504844424170df70a82422212038ef385492111010
        text >1cf71c2a498808080efb0e152444840407fd070a1222428203fe030509112141
        text >a0c07fc0a090888450e0bfe050484442a870df70a82422215438ef3854921110
        text >2a1cf71c2a498808150efb0e152444840a07fd070a1222420503fe0305091121
        text >90a0c07fc0a090884850e0bfe050484424a870df70a82422925438ef38549211
        text >492a1cf71c2a498824150efb0e152444120a07fd070a1222090503fe03050911
        text >8890a0c07fc0a090444850e0bfe050482224a870df70a82411925438ef385492
        text >88492a1cf71c2a494424150efb0e152422120a07fd070a1211090503fe030509
        text >848890a0c07fc0a042444850e0bfe050212224a870df70a81011925438ef3854
        text >0888492a1cf71c2a844424150efb0e154222120a07fd070a2111090503fe0305
        text >82848890a0c07fc04142444850e0bfe020212224a870df70101011925438ef38
        text >080888492a1cf71c04844424150efb0e824222120a07fd07412111090503fe03
        text >8182848890a0c07f404142444850e0bf2020212224a870df10101011925438ef
        text >08080888492a1cf70404844424150efb02824222120a07fd81412111090503fe
        text >7f80808080808080bf40404040404040df20202020202020ef10101010101010
        text >f708080808080808fb04040404040404fd02020202020202fe01010101010101
        text >807f80808080808040bf40404040404020df20202020202010ef101010101010
        text >08f708080808080804fb04040404040402fd02020202020201fe010101010101
        text >80807f80808080804040bf40404040402020df20202020201010ef1010101010
        text >0808f708080808080404fb04040404040202fd02020202020101fe0101010101
        text >8080807f80808080404040bf40404040202020df20202020101010ef10101010
        text >080808f708080808040404fb04040404020202fd02020202010101fe01010101
        text >808080807f80808040404040bf40404020202020df20202010101010ef101010
        text >08080808f708080804040404fb04040402020202fd02020201010101fe010101
        text >80808080807f80804040404040bf40402020202020df20201010101010ef1010
        text >0808080808f708080404040404fb04040202020202fd02020101010101fe0101
        text >8080808080807f80404040404040bf40202020202020df20101010101010ef10
        text >080808080808f708040404040404fb04020202020202fd02010101010101fe01
        text >808080808080807f40404040404040bf20202020202020df10101010101010ef
        text >08080808080808f704040404040404fb02020202020202fd01010101010101fe
        text >8181818181818181000000ff0000000000000000ff0000000000000000000000
        text >0000000000000000000000000000f0000000000000000f000000000000000000
        text >0000000000f0000000000000000f060000000000000070000000000000000000
        text >000000000006000000000000007000ff00000000000081000000000000004200
        text >0000000000002400000000000000100000000000000008000000000000000000
        text >00000000ff000000000000000081000000000000004200000000000000240000
        text >0000000000100000000000000008ffff00000000ffffffff0000000000000000
        text >00000000ffff0000000000000000000000000000000000000000000000000000
        even 

        bank 1, >6060

; Subroutine: boarddat2_4, level: 2
;   0004       4  var result: reference to array [subrange (0..4095) of int64] of uint8

boarddat2_4:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, data2
        mov   @>0004(r9), r2            ; result
        li    r3, >1000
__l_103:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_103
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

; Subroutine: data2, level: 3

data2:
        text >004020100804020100a010080402010000508804020100000028448201000000
        text >0014224180000000000a11204080000000050810204080000002040810204080
        text >4000402010080402a000a0100804020150005088040201002800284482010000
        text >14001422418000000a000a112040800005000508102040800200020408102040
        text >204000402010080410a000a01008040288500050880402014428002844820100
        text >2214001422418000110a000a1120408008050005081020400402000204081020
        text >10204000402010080810a000a010080404885000508804028244280028448201
        text >412214001422418020110a000a11204010080500050810200804020002040810
        text >0810204000402010040810a000a0100802048850005088040182442800284482
        text >80412214001422414020110a000a112020100805000508101008040200020408
        text >040810204000402002040810a000a01001020488500050880001824428002844
        text >0080412214001422804020110a000a1140201008050005082010080402000204
        text >02040810204000400102040810a000a000010204885000500000018244280028
        text >000080412214001400804020110a000a80402010080500054020100804020002
        text >0102040810204000000102040810a00000000102048850000000000182442800
        text >00000080412214000000804020110a0000804020100805008040201008040200
        text >00004000000000000000a0000000000000005000000000000000280000000000
        text >000014000000000000000a000000000000000500000000000000020000000000
        text >0000004000000000000000a00000000000000050000000000000002800000000
        text >00000014000000000000000a0000000000000005000000000000000200000000
        text >000000004000000000000000a000000000000000500000000000000028000000
        text >0000000014000000000000000a00000000000000050000000000000002000000
        text >00000000004000000000000000a0000000000000005000000000000000280000
        text >000000000014000000000000000a000000000000000500000000000000020000
        text >0000000000004000000000000000a00000000000000050000000000000002800
        text >00000000000014000000000000000a0000000000000005000000000000000200
        text >000000000000004000000000000000a000000000000000500000000000000028
        text >0000000000000014000000000000000a00000000000000050000000000000002
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >4000000000000000a00000000000000050000000000000002800000000000000
        text >14000000000000000a0000000000000005000000000000000200000000000000
        text >004000000000000000a000000000000000500000000000000028000000000000
        text >0014000000000000000a00000000000000050000000000000002000000000000
        text >00004000000000000000a0000000000000005000000000000000280000000000
        text >000014000000000000000a000000000000000500000000000000020000000000
        text >0000004000000000000000a00000000000000050000000000000002800000000
        text >00000014000000000000000a0000000000000005000000000000000200000000
        text >000000004000000000000000a000000000000000500000000000000028000000
        text >0000000014000000000000000a00000000000000050000000000000002000000
        text >00000000004000000000000000a0000000000000005000000000000000280000
        text >000000000014000000000000000a000000000000000500000000000000020000
        text >0000004000000000000000a00000000000000050000000000000002800000000
        text >00000014000000000000000a0000000000000005000000000000000200000000
        text >000000004000000000000000a000000000000000500000000000000028000000
        text >0000000014000000000000000a00000000000000050000000000000002000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >00000000a000000000000000a000000000000000a000000000000000a0000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        even 

        bank 2, >6060

; Subroutine: boarddat3_5, level: 2
;   0004       4  var result: reference to array [subrange (0..4095) of int64] of uint8

boarddat3_5:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, data3
        mov   @>0004(r9), r2            ; result
        li    r3, >1000
__l_105:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_105
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

; Subroutine: data3, level: 3

data3:
        text >000000000000000000000000000000000005000a000affe7ffe7000a000a0005
        text >0005fffbfff600000000fff6fffb000500000000000000190019000000000000
        text >00050005000a001b001b000a00050005000a000a0014001e001e0014000a000a
        text >0032003200320032003200320032003200000000000000000000000000000000
        text >0000000000000000000000000000000000320032003200320032003200320032
        text >000a000a0014001e001e0014000a000a00050005000a001b001b000a00050005
        text >000000000000001900190000000000000005fffbfff600000000fff6fffb0005
        text >0005000a000affe7ffe7000a000a000500000000000000000000000000000000
        text >ffceffd8ffecffe2ffe2ffecffd8ffceffd8ffec0000000500050000ffecffd8
        text >ffe20005000a000f000f000a0005ffe2ffe20000000f00140014000f0000ffe2
        text >ffe20005000f00140014000f0005ffe2ffe20000000a000f000f000a0000ffe2
        text >ffd8ffec0000000000000000ffecffd8ffceffd8ffe2ffe2ffe2ffe2ffd8ffce
        text >ffecfff6ffd8fff6fff6ffd8fff6ffecfff6000500000000000000000005fff6
        text >fff6000a000a000a000a000a000afff6fff60000000a000a000a000a0000fff6
        text >fff600050005000a000a00050005fff6fff600000005000a000a00050000fff6
        text >fff6000000000000000000000000fff6ffecfff6fff6fff6fff6fff6fff6ffec
        text >0014001e000a00000000000a001e001400140014000000000000000000140014
        text >fff6ffecffecffecffecffecffecfff6ffecffe2ffe2ffd8ffd8ffe2ffe2ffec
        text >ffe2ffd8ffd8ffceffceffd8ffd8ffe2ffe2ffd8ffd8ffceffceffd8ffd8ffe2
        text >ffe2ffd8ffd8ffceffceffd8ffd8ffe2ffe2ffd8ffd8ffceffceffd8ffd8ffe2
        text >ffceffe2ffe2ffe2ffe2ffe2ffe2ffceffe2ffe20000000000000000ffe2ffe2
        text >ffe2fff60014001e001e0014fff6ffe2ffe2fff6001e00280028001efff6ffe2
        text >ffe2fff6001e00280028001efff6ffe2ffe2fff60014001e001e0014fff6ffe2
        text >ffe2ffecfff600000000fff6ffecffe2ffceffd8ffe2ffecffecffe2ffd8ffce
        text >ff818181818181ff000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0063006300630000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0088001800000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        text >0000000000000000000000000000000000000000000000000000000000000000
        even 

        bank 2, >7098

; Subroutine: loadboarddata_6, level: 2
;   f000   -4096  buf: array [subrange (0..4095) of int64] of uint8

loadboarddata_6:
        ai    r10, >effa
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >1000
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, *r10
        bl    @__far_call_1
        data  >6000
        data  boarddat1_3
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, @>0008(r10)
        clr   @>0006(r10)
        li    r1, >1000
        mov   r1, @>0004(r10)
        li    r1, >0014
        mov   r1, @>0002(r10)
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, *r10
        bl    @__far_call_1
        data  >6002
        data  boarddat2_4
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, @>0008(r10)
        clr   @>0006(r10)
        li    r1, >1000
        mov   r1, @>0004(r10)
        li    r1, >0015
        mov   r1, @>0002(r10)
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  boarddat3_5
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >f000                 ; buf
        mov   r1, @>0008(r10)
        clr   @>0006(r10)
        li    r1, >1000
        mov   r1, @>0004(r10)
        li    r1, >0016
        mov   r1, @>0002(r10)
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 2, >71a8

; Subroutine: clearbitboard_7, level: 2
;   0004       4  var bit1: reference to array [subrange (0..3) of int64] of int16
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

clearbitboard_7:
        ai    r10, >fff2
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>fffc(r9)                ; i
        li    r1, >0003
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_108
__l_107:
        inc   @>fffc(r9)                ; i
__l_108:
        clr   r1
        mov   @>0004(r9), r2            ; bit1
        mov   @>fffc(r9), r3            ; i
        sla   r3, 1
        a     r3, r2
        mov   r1, *r2
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_107
__l_111:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >71fc

; Subroutine: isclear_8, level: 2
;   0004       4  var result: reference to boolean
;   0006       6  var bit1: reference to array [subrange (0..3) of int64] of int16
;   fffa      -6  i: int16
;   fffc      -4  flag: int16
;   fffe      -2  $i: int16

isclear_8:
        ai    r10, >fff2
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>fffc(r9)                ; flag
        li    r1, >0001
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        clr   @>fffa(r9)                ; i
        li    r1, >0003
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_114
__l_113:
        inc   @>fffa(r9)                ; i
__l_114:
        mov   @>0006(r9), r1            ; bit1
        mov   @>fffa(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   *r1, r1
        jeq   __l_118
__l_117:
        li    r1, >0001
        mov   r1, @>fffc(r9)            ; flag
__l_118:
        c     @>fffa(r9), @>fffe(r9)    ; i $i 
        jne   __l_113
__l_121:
        mov   @>fffc(r9), r1            ; flag
        jeq   __l_124
__l_123:
        clr   r1
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
__l_124:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 2, >7276

; Subroutine: getkeyint_9, level: 2
;   fffe      -2  __rettmp_100: char
;   ffff      -1  __rettmp_101: char
;   0004       4  var result: reference to int16

getkeyint_9:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; __rettmp_100
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  getkey_57
        movb  @>fffe(r9), @>0002(r10)   ; __rettmp_100 
        mov   r9, r1
        dec   r1                        ; __rettmp_101
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  upcase_79
        movb  @>ffff(r9), r1            ; __rettmp_101
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >72dc

; Subroutine: samsinit_10, level: 2
;   0004       4  var result: reference to int16
;   fffc      -4  reg: int16
;   fffe      -2  $reg: int16

samsinit_10:
        ai    r10, >fff2
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  samscardon_13
        clr   @>fffc(r9)                ; reg
        li    r1, >000f
        mov   r1, @>fffe(r9)            ; $reg
        jmp   __l_129
__l_128:
        inc   @>fffc(r9)                ; reg
__l_129:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fffc(r9), @>0002(r10)   ; reg 
        clr   r1                        ; memw
        li    r2, >2000
        a     @>fffc(r9), r2            ; reg 
        sla   r2, 1
        a     r2, r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  swap_12
        c     @>fffc(r9), @>fffe(r9)    ; reg $reg 
        jne   __l_128
__l_132:
        mov   @>401e, r1                ; memw 
        ci    r1, >0f00
        jeq   __l_135
__l_134:
        clr   r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_136
__l_135:
        li    r1, >0102
        mov   r1, @>401e                ;  memw 
        li    r1, >0001
        mov   @>401e, r2                ; memw 
        li    r3, >0102
        c     r2, r3
        clr   r2
        jne   __l_138
        inc   r2
__l_138:
        a     r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        li    r1, >0f00
        mov   r1, @>401e                ;  memw 
__l_136:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        li    r1, >1e00
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >73b4

; Subroutine: samssize_11, level: 2
;   0004       4  sizecode: int16
;   0006       6  var pagenums: reference to int16
;   fffc      -4  savedmem: int16
;   fffe      -2  newpage: boolean

samssize_11:
        ai    r10, >fff4
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  samscardon_13
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0100
        movb  r1, @>0002(r10)
        li    r1, >1e02
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        mov   @>2000, @>fffc(r9)        ; memw  savedmem
        seto  @>2000                    ;  memw 
        li    r1, >0010
        mov   @>0006(r9), r2            ; pagenums
        mov   r1, *r2
__l_139:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0006(r9), r1            ; pagenums
        mov   *r1, r1
        inct  r1
        mov   r1, @>0002(r10)
        li    r1, >4004                 ; memw 
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  swap_12
        mov   @>2000, r1                ; memw 
        seto  r2
        c     r1, r2
        clr   r1
        jeq   __l_141
        inc   r1
__l_141:
        movb  @>8303, @>fffe(r9)        ; newpage
        movb  @>fffe(r9), r1            ; newpage
        jeq   __l_143
__l_142:
        mov   @>0006(r9), r1            ; pagenums
        mov   @>0006(r9), r2            ; pagenums
        a     *r2, *r1                  ;  
__l_143:
        movb  @>fffe(r9), r1            ; newpage
        srl   r1, 8
        li    r12, >0001
        xor   r12, r1
        ci    r1, >0000
        jeq   __l_139
__l_146:
        li    r1, >0200
        mov   r1, @>4004                ;  memw 
        mov   @>fffc(r9), @>2000        ; savedmem  memw 
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        li    r1, >1e02
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        li    r1, >1e00
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 2, >74c2

; Subroutine: dataops, level: 2
;   0000       0  rwcode: int16
;   0002       2  startpage: int16
;   0004       4  datasize: int16
;   0006       6  offset: int16
;   0008       8  var data: reference to void

dataops:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0008(r10), r4
        mov   @>0006(r10), r3
        mov   @>0004(r10), r2
        mov   @>0002(r10), r1
        li    r6, >4004
        li    r12, >1e00
        sbo   >0000
        li    r5, >2000
        a     r3, r5
        mov   r3, r0
        mov   *r10, r3
        sbo   >0001
nxtpage:
        swpb  r1
        mov   r1, *r6
        swpb  r1
rwops:
        ci    r3, >0001
        jne   getops
saveops:
        mov   *r4+, *r5+
        jmp   contops
getops:
        mov   *r5+, *r4+
contops:
        dect  r2
        jle   opsdone
        inct  r0
        ci    r0, >1000
        jlt   rwops
        inc   r1
        clr   r0
        li    r5, >2000
        jmp   nxtpage
opsdone:
        li    r1, >0200
        mov   r1, @>4004
        sbz   >0001
        sbz   >0000
        lwpi  >8300
        ai    r10, >000a
        b     @__far_ret

        bank 2, >7530

; Subroutine: swap_12, level: 2
;   0004       4  var result: reference to int16
;   0006       6  n: int16

swap_12:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0006(r9), r1            ; n
        sra   r1, 8
        mov   @>0006(r9), r2            ; n
        andi  r2, >00ff
        sla   r2, 8
        soc   r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 2, >756c

; Subroutine: samscardon_13, level: 2
;   fffc      -4  cruaddr: int16
;   fffe      -2  $cruaddr: int16

samscardon_13:
        ai    r10, >fff6
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0010
        mov   r1, @>fffc(r9)            ; cruaddr
        li    r1, >001f
        mov   r1, @>fffe(r9)            ; $cruaddr
        jmp   __l_152
__l_151:
        inc   @>fffc(r9)                ; cruaddr
__l_152:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>fffc(r9), r1            ; cruaddr
        sla   r1, 8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        c     @>fffc(r9), @>fffe(r9)    ; cruaddr $cruaddr 
        jne   __l_151
__l_156:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0100
        movb  r1, @>0002(r10)
        li    r1, >1e00
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 2, >75ea

; Subroutine: vmbw, level: 2
;   0000       0  var src: reference to void
;   0002       2  dest: int16
;   0004       4  length: int16

vmbw:
        mov   @>0004(r10), r14
        jeq   vmbw_2
        mov   @>0002(r10), r13
        ori   r13, >4000
        swpb  r13
        movb  r13, @>8c02
        swpb  r13
        movb  r13, @>8c02
        mov   *r10, r12
        li    r15, >8c00
vmbw_1:
        movb  *r12+, *r15
        dec   r14
        jne   vmbw_1
vmbw_2:
        ai    r10, >0006
        b     @__far_ret

        bank 2, >7618

; Subroutine: vmbr, level: 2
;   0000       0  var dest: reference to void
;   0002       2  src: int16
;   0004       4  length: int16

vmbr:
        mov   @>0004(r10), r14
        jeq   vmbr_2
        mov   @>0002(r10), r13
        swpb  r13
        movb  r13, @>8c02
        swpb  r13
        movb  r13, @>8c02
        li    r15, >8800
        mov   *r10, r12
vmbr_1:
        movb  *r15, *r12+
        dec   r14
        jne   vmbr_1
vmbr_2:
        ai    r10, >0006
        b     @__far_ret

        bank 2, >7642

; Subroutine: vrbw, level: 2
;   0000       0  dest: int16
;   0002       2  val: uint8
;   0004       4  length: int16

vrbw:
        mov   @>0004(r10), r12
        jeq   vrbw_2
        mov   *r10, r13
        ori   r13, >4000
        swpb  r13
        movb  r13, @>8c02
        swpb  r13
        movb  r13, @>8c02
        li    r13, >8c00
        movb  @>0002(r10), r14
vrbw_1:
        movb  r14, *r13
        dec   r12
        jne   vrbw_1
vrbw_2:
        ai    r10, >0006
        b     @__far_ret

        bank 2, >7670

; Subroutine: pokev_14, level: 2
;   0004       4  addr: int16
;   0006       6  val: uint8

pokev_14:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0001
        mov   r1, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; addr 
        mov   r9, r1
        ai    r1, >0006                 ; val
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  vmbw
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 2, >76b8

; Subroutine: setvideomode_15, level: 2
;   0004       4  mode: enum
;   fefc    -260  i: int16
;   fefe    -258  screen: array [subrange (0..255) of int64] of uint8
;   fffe      -2  $i: int16

setvideomode_15:
        ai    r10, >fef0
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0104
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>0004(r9), @>fe80        ; mode low R1 videomode
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >8000
        movb  r1, @>0002(r10)
        li    r1, >0100
        movb  r1, *r10
        bl    @__far_call_1
        data  >6006
        data  setvdpreg_28
        li    r1, >0002
        mov   r1, @>fefc(r9)            ; i
        li    r1, >0007
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_160
__l_159:
        inc   @>fefc(r9)                ; i
__l_160:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ffc6                 ; $static_vdpregs
        movb  @>fe80, r2                ; videomode
        srl   r2, 8
        sla   r2, 3
        a     r2, r1
        a     @>fefc(r9), r1            ; i 
        movb  *r1, @>0002(r10)          ;  
        mov   @>fefc(r9), r1            ; i
        swpb  r1
        movb  r1, *r10
        bl    @__far_call_1
        data  >6006
        data  setvdpreg_28
        c     @>fefc(r9), @>fffe(r9)    ; i $i 
        jne   __l_159
__l_175:
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
; no-opt
        ci    r1, >0002
        jle   __l_179
        b     @__l_177
__l_179:
        sla   r1, 1
        ai    r1, __l_180
        mov   *r1, r1
        b     *r1
__c_162:
        mov   @>fe72, r1                ; imagetable
        ai    r1, >03c0
        mov   r1, @>fe7e                ;  imagetableend
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fe76, @>0002(r10)       ; patterntable 
        li    r1, >06b4
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  loadcharset_27
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  clrscr_22
        b     @__l_177
__c_163:
        mov   @>fe72, r1                ; imagetable
        ai    r1, >0300
        mov   r1, @>fe7e                ;  imagetableend
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fe76, @>0002(r10)       ; patterntable 
        li    r1, >06b4
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  loadcharset_27
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >0100
        movb  r1, *r10
        bl    @__far_call_1
        data  >6004
        data  settextcolor_16
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  clrscr_22
        jmp   __l_177
__c_164:
        clr   @>fefc(r9)                ; i
        li    r1, >00ff
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_166
__l_165:
        inc   @>fefc(r9)                ; i
__l_166:
        mov   @>fefc(r9), r1            ; i
        mov   r9, r2
        ai    r2, >fefe                 ; screen
        a     @>fefc(r9), r2            ; i 
        movb  @>8303, *r2               ; low R1
        c     @>fefc(r9), @>fffe(r9)    ; i $i 
        jne   __l_165
__l_181:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >1800
        mov   r1, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>fe76, *r10              ; patterntable 
        bl    @__far_call_1
        data  >6004
        data  vrbw
        clr   @>fefc(r9)                ; i
        li    r1, >0002
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_169
__l_168:
        inc   @>fefc(r9)                ; i
__l_169:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0100
        mov   r1, @>0004(r10)
        mov   @>fe72, r1                ; imagetable
        mov   @>fefc(r9), r2            ; i
        li    r3, >0100
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefe                 ; screen
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  vmbw
        c     @>fefc(r9), @>fffe(r9)    ; i $i 
        jne   __l_168
__l_183:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >1800
        mov   r1, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>fe74, *r10              ; colortable 
        bl    @__far_call_1
        data  >6004
        data  vrbw
__l_177:
        movb  @>fe80, r1                ; videomode
        jeq   __l_186
__l_185:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >d000
        movb  r1, @>0002(r10)
        mov   @>fe78, *r10              ; spriteattributetable 
        bl    @__far_call_1
        data  >6004
        data  pokev_14
__l_186:
        clr   @>fefc(r9)                ; i
        li    r1, >0001
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_172
__l_171:
        inc   @>fefc(r9)                ; i
__l_172:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ffc6                 ; $static_vdpregs
        movb  @>fe80, r2                ; videomode
        srl   r2, 8
        sla   r2, 3
        a     r2, r1
        a     @>fefc(r9), r1            ; i 
        movb  *r1, @>0002(r10)          ;  
        mov   @>fefc(r9), r1            ; i
        swpb  r1
        movb  r1, *r10
        bl    @__far_call_1
        data  >6006
        data  setvdpreg_28
        c     @>fefc(r9), @>fffe(r9)    ; i $i 
        jne   __l_171
__l_189:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret
; jump tables for case statements
__l_180:
        data  __c_162
        data  __c_163
        data  __c_164

        bank 2, >793a

; Subroutine: settextcolor_16, level: 2
;   0004       4  color: enum
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

settextcolor_16:
        ai    r10, >fff4
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        movb  @>0004(r9), r1            ; color
        srl   r1, 8
        sla   r1, 4
        movb  @>fe82, r2                ; backcolor
        srl   r2, 8
        soc   r2, r1
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >0700
        movb  r1, *r10
        bl    @__far_call_1
        data  >6006
        data  setvdpreg_28
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0001
        jne   __l_197
__l_196:
        clr   @>fffc(r9)                ; i
        li    r1, >001f
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_192
__l_191:
        inc   @>fffc(r9)                ; i
__l_192:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        clr   r1
        movb  r1, @>0004(r10)
        movb  @>0004(r9), @>0002(r10)   ; color 
        mov   @>fffc(r9), *r10          ; i 
        bl    @__far_call_1
        data  >6004
        data  setcolor_17
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_191
__l_197:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >79d6

; Subroutine: setcolor_17, level: 2
;   0004       4  group: int16
;   0006       6  fore: enum
;   0008       8  back: enum

setcolor_17:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        movb  @>0006(r9), r1            ; fore
        srl   r1, 8
        sla   r1, 4
        movb  @>0008(r9), r2            ; back
        srl   r2, 8
        soc   r2, r1
        swpb  r1
        movb  r1, @>0002(r10)
        mov   @>fe74, r1                ; colortable
        mov   @>0004(r9), r2            ; group
        andi  r2, >001f
        a     r2, r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  pokev_14
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 2, >7a32

; Subroutine: gotoxy_18, level: 2
;   fffa      -6  __rettmp_98: int16
;   fffc      -4  __rettmp_99: int16
;   0004       4  x: int16
;   0006       6  y: int16
;   fffe      -2  offs: int16

gotoxy_18:
        ai    r10, >fff2
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        jne   __l_206
__l_205:
        mov   @>0006(r9), r1            ; y
        sla   r1, 2
        a     @>0006(r9), r1            ; y 
        sla   r1, 3
        mov   r1, @>fffe(r9)            ; offs
        jmp   __l_207
__l_206:
        mov   @>0006(r9), r1            ; y
        sla   r1, 5
        mov   r1, @>fffe(r9)            ; offs
__l_207:
        mov   @>fe72, r1                ; imagetable
        mov   @>fffe(r9), r2            ; offs
        a     @>0004(r9), r2            ; x 
        abs   r2
        a     r2, r1
        mov   @>fe7e, r2                ; imagetableend
        dec   r2
; no.opt
        c     r1, r2
        jlt   __l_212
        mov   r2, r1
__l_212:
        mov   r1, @>fe7c                ;  vdpwriteaddress
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 2, >7a9c

; Subroutine: wherex_19, level: 2
;   0004       4  var result: reference to int16

wherex_19:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0001
        jne   __l_215
__l_214:
        mov   @>fe7c, r1                ; vdpwriteaddress
        andi  r1, >001f
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_216
__l_215:
        li    r1, >0028
        mov   @>fe7c, r3                ; vdpwriteaddress
        s     @>fe72, r3                ; imagetable 
        clr   r2
        div   r1, r2
        mov   r3, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_216:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >7af6

; Subroutine: wherey_20, level: 2
;   0004       4  var result: reference to int16

wherey_20:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0001
        jne   __l_220
__l_219:
        mov   @>fe7c, r1                ; vdpwriteaddress
        s     @>fe72, r1                ; imagetable 
        sra   r1, 5
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_221
__l_220:
        li    r1, >0028
        mov   @>fe7c, r3                ; vdpwriteaddress
        s     @>fe72, r3                ; imagetable 
        clr   r2
        div   r1, r2
        mov   r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_221:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >7b52

; Subroutine: screenwidth_21, level: 2
;   0004       4  var result: reference to int16

screenwidth_21:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
; no-opt
        ci    r1, >0002
        jle   __l_230
        jmp   __l_228
__l_230:
        sla   r1, 1
        ai    r1, __l_231
        mov   *r1, r1
        b     *r1
__c_224:
        li    r1, >0028
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_228
__c_225:
        li    r1, >0020
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_228
__c_226:
        li    r1, >0100
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_228:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret
; jump tables for case statements
__l_231:
        data  __c_224
        data  __c_225
        data  __c_226

        bank 2, >7bb4

; Subroutine: clrscr_22, level: 2

clrscr_22:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
; no-opt
        ci    r1, >0001
        jle   __l_237
        jmp   __l_235
__l_237:
        sla   r1, 1
        ai    r1, __l_238
        mov   *r1, r1
        b     *r1
__c_232:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0300
        mov   r1, @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        mov   @>fe72, *r10              ; imagetable 
        bl    @__far_call_1
        data  >6004
        data  vrbw
        jmp   __l_235
__c_233:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >03c0
        mov   r1, @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        mov   @>fe72, *r10              ; imagetable 
        bl    @__far_call_1
        data  >6004
        data  vrbw
__l_235:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
; jump tables for case statements
__l_238:
        data  __c_233
        data  __c_232

        bank 2, >7c52

; Subroutine: scroll_23, level: 2

scroll_23:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
; no-opt
        ci    r1, >0001
        jle   __l_244
        jmp   __l_242
__l_244:
        sla   r1, 1
        ai    r1, __l_245
        mov   *r1, r1
        b     *r1
__c_239:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >c040
        mov   r1, @>0008(r10)
        li    r1, >3fe0
        mov   r1, @>0006(r10)
        li    r1, >0020
        mov   r1, @>0004(r10)
        mov   @>fe72, r1                ; imagetable
        ai    r1, >0300
        mov   r1, @>0002(r10)
        mov   @>fe72, r1                ; imagetable
        ai    r1, >0020
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  _rt_scroll_up
        li    r1, >fe7c                 ; vdpwriteaddress
        li    r2, >0020
        s     r2, *r1
        jmp   __l_242
__c_240:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >c048
        mov   r1, @>0008(r10)
        li    r1, >3fd8
        mov   r1, @>0006(r10)
        li    r1, >0028
        mov   r1, @>0004(r10)
        mov   @>fe72, r1                ; imagetable
        ai    r1, >03c0
        mov   r1, @>0002(r10)
        mov   @>fe72, r1                ; imagetable
        ai    r1, >0028
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  _rt_scroll_up
        li    r1, >fe7c                 ; vdpwriteaddress
        li    r2, >0028
        s     r2, *r1
__l_242:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
; jump tables for case statements
__l_245:
        data  __c_240
        data  __c_239

        bank 2, >7d24

; Subroutine: outputstring_24, level: 2
;   0004       4  p: pointer to char (char)
;   0006       6  outlen: int16
;   fffe      -2  len: int16

outputstring_24:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), r1            ; p
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>fffe(r9)            ; len
__l_246:
        mov   @>fe7c, r1                ; vdpwriteaddress
        a     @>0006(r9), r1            ; outlen 
        c     r1, @>fe7e                ; imagetableend 
        jlt   __l_247
        jeq   __l_247
__l_249:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  scroll_23
        jmp   __l_246
__l_247:
        c     @>0006(r9), @>fffe(r9)    ; outlen len 
        jlt   __l_252
        jeq   __l_252
__l_251:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0006(r9), r1            ; outlen
        s     @>fffe(r9), r1            ; len 
        mov   r1, @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        mov   @>fe7c, *r10              ; vdpwriteaddress 
        bl    @__far_call_1
        data  >6004
        data  vrbw
        li    r1, >fe7c                 ; vdpwriteaddress
        mov   @>0006(r9), r2            ; outlen
        s     @>fffe(r9), r2            ; len 
        a     r2, *r1
__l_252:
        ai    r10, >fffc
        mov   @>fffe(r9), @>0002(r10)   ; len 
        mov   @>0004(r9), *r10          ; p 
        bl    @__write_data
        a     @>fffe(r9), @>fe7c        ; len  vdpwriteaddress
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

; Subroutine: __write_data, level: 3
;   0000       0  p: pointer to void
;   0002       2  length: int16

__write_data:
        mov   @>0002(r10), r12
        jeq   __write_data_2
        mov   @>fe7c, r13
        ori   r13, >4000
        swpb  r13
        movb  r13, @>8c02
        swpb  r13
        movb  r13, @>8c02
        mov   *r10, r13
        li    r14, >8c00
        inc   r13
__write_data_1:
        movb  *r13+, *r14
        dec   r12
        jne   __write_data_1
__write_data_2:
        ai    r10, >0004
        b     *r11

        bank 2, >7dfe

; Subroutine: outputline_25, level: 2

outputline_25:
        ai    r10, >ffee
        mov   r10, r12
        mov   r7, *r12+
        mov   r6, *r12+
        mov   r5, *r12+
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
; no-opt
        ci    r1, >0001
        jle   __l_262
        jmp   __l_260
__l_262:
        sla   r1, 1
        ai    r1, __l_263
        mov   *r1, r1
        b     *r1
__c_255:
        mov   @>fe72, r1                ; imagetable
        li    r2, >0028
        li    r3, >0028
        mov   @>fe7c, r5                ; vdpwriteaddress
        mov   @>fe72, r6                ; imagetable
        li    r7, >0028
        s     r7, r6
        s     r6, r5
        clr   r4
        div   r3, r4
        mov   r4, r3
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe7c                ;  vdpwriteaddress
        jmp   __l_260
__c_256:
        mov   @>fe7c, r1                ; vdpwriteaddress
        ai    r1, >0020
        andi  r1, >ffe0
        mov   r1, @>fe7c                ;  vdpwriteaddress
__l_260:
        c     @>fe7c, @>fe7e            ; vdpwriteaddress imagetableend 
        jlt   __l_258
__l_264:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  scroll_23
        jmp   __l_260
__l_258:
        mov   *r10+, r7
        mov   *r10+, r6
        mov   *r10+, r5
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
; jump tables for case statements
__l_263:
        data  __c_255
        data  __c_256

        bank 2, >7ea2

; Subroutine: setcrubit, level: 2
;   0000       0  addr: int16
;   0002       2  val: boolean

setcrubit:
        mov   *r10, r12
        mov   @>0002(r10), r13
        ldcr  r13, 1
        ai    r10, >0004
        b     @__far_ret

        bank 2, >7eb2

; Subroutine: limi0, level: 2

limi0:
        b     @__far_ret

        bank 2, >7eb6

; Subroutine: limi2, level: 2

limi2:
        b     @__far_ret

        bank 2, >7eba

; Subroutine: setvdpaddress_26, level: 2
;   0004       4  n: int16

setvdpaddress_26:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), r1            ; n
        andi  r1, >00ff
        movb  @>8303, @>8c02            ; low R1 vdpwa
        mov   @>0004(r9), r1            ; n
        sra   r1, 8
        movb  @>8303, @>8c02            ; low R1 vdpwa
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 2, >7ef2

; Subroutine: loadcharset_27, level: 2
;   0004       4  gromaddr: int16
;   0006       6  vdpaddr: int16
;   fff8      -8  i: int16
;   fffa      -6  j: int16
;   fffc      -4  $i: int16
;   fffe      -2  $j: int16

loadcharset_27:
        ai    r10, >fff0
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0008
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi0
        mov   @>0004(r9), r1            ; gromaddr
        sra   r1, 8
        movb  @>8303, @>9c02            ; low R1 gromwa
        mov   @>0004(r9), r1            ; gromaddr
        andi  r1, >00ff
        movb  @>8303, @>9c02            ; low R1 gromwa
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   @>0006(r9), r1            ; vdpaddr
        ai    r1, >00f8
        li    r2, >4000
        soc   r2, r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setvdpaddress_26
        li    r1, >0001
        mov   r1, @>fff8(r9)            ; i
        li    r1, >0007
        mov   r1, @>fffc(r9)            ; $i
        jmp   __l_269
__l_268:
        inc   @>fff8(r9)                ; i
__l_269:
        li    r1, >003f
        movb  @>8303, @>8c00            ; low R1 vdpwd
        c     @>fff8(r9), @>fffc(r9)    ; i $i 
        jne   __l_268
__l_279:
        clr   r1
        movb  @>8303, @>8c00            ; low R1 vdpwd
        li    r1, >0020
        mov   r1, @>fff8(r9)            ; i
        li    r1, >007f
        mov   r1, @>fffc(r9)            ; $i
        jmp   __l_275
__l_274:
        inc   @>fff8(r9)                ; i
__l_275:
        li    r1, >0001
        mov   r1, @>fffa(r9)            ; j
        li    r1, >0007
        mov   r1, @>fffe(r9)            ; $j
        jmp   __l_272
__l_271:
        inc   @>fffa(r9)                ; j
__l_272:
        movb  @>9800, @>8c00            ; gromrd low R1 vdpwd
        c     @>fffa(r9), @>fffe(r9)    ; j $j 
        jne   __l_271
__l_281:
        clr   r1
        movb  @>8303, @>8c00            ; low R1 vdpwd
        c     @>fff8(r9), @>fffc(r9)    ; i $i 
        jne   __l_274
__l_283:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 3, >6060

; Subroutine: setvdpreg_28, level: 2
;   0004       4  nr: uint8
;   0006       6  val: uint8
;   fffe      -2  dummy: char

setvdpreg_28:
        ai    r10, >fff4
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi0
        movb  @>8802, @>fffe(r9)        ; vdpsta dummy
        movb  @>0006(r9), @>8c02        ; val low R1 vdpwa
        li    r1, >0080
        movb  @>0004(r9), r2            ; nr
        srl   r2, 8
        a     r2, r1
        movb  @>8303, @>8c02            ; low R1 vdpwa
        movb  @>0004(r9), r1            ; nr
        srl   r1, 8
        dec   r1
; no-opt
        ci    r1, >0006
        jle   __l_295
        b     @__l_293
__l_295:
        sla   r1, 1
        ai    r1, __l_296
        mov   *r1, r1
        b     *r1
__c_285:
        movb  @>0006(r9), @>83d4        ; val low R1 memb 
        b     @__l_293
__c_286:
        li    r1, >0400
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        andi  r2, >000f
        mpy   r1, r2
        mov   r3, @>fe72                ;   imagetable
        b     @__l_293
__c_287:
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0002
        jne   __l_298
__l_297:
        li    r1, >2000
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        sra   r2, 7
        mpy   r1, r2
        mov   r3, @>fe74                ;   colortable
        jmp   __l_293
__l_298:
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0001
        jne   __l_303
__l_302:
        li    r1, >0040
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        mpy   r1, r2
        mov   r3, @>fe74                ;   colortable
        jmp   __l_293
__l_303:
        seto  @>fe74                    ;  colortable
        jmp   __l_293
__c_288:
        movb  @>fe80, r1                ; videomode
        srl   r1, 8
        ci    r1, >0002
        jne   __l_307
__l_306:
        li    r1, >2000
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        andi  r2, >0007
        sra   r2, 2
        mpy   r1, r2
        mov   r3, @>fe76                ;   patterntable
        jmp   __l_293
__l_307:
        li    r1, >0800
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        andi  r2, >0007
        mpy   r1, r2
        mov   r3, @>fe76                ;   patterntable
        jmp   __l_293
__c_289:
        movb  @>fe80, r1                ; videomode
        jne   __l_312
__l_311:
        seto  @>fe78                    ;  spriteattributetable
        jmp   __l_293
__l_312:
        li    r1, >0080
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        andi  r2, >007f
        mpy   r1, r2
        mov   r3, @>fe78                ;   spriteattributetable
        jmp   __l_293
__c_290:
        movb  @>fe80, r1                ; videomode
        jne   __l_316
__l_315:
        seto  @>fe7a                    ;  spritepatterntable
        jmp   __l_293
__l_316:
        li    r1, >0800
        movb  @>0006(r9), r2            ; val
        srl   r2, 8
        andi  r2, >0007
        mpy   r1, r2
        mov   r3, @>fe7a                ;   spritepatterntable
        jmp   __l_293
__c_291:
        movb  @>0006(r9), r1            ; val
        srl   r1, 8
        sra   r1, 4
        movb  @>8303, @>fe81            ; low R1 forecolor
        movb  @>0006(r9), r1            ; val
        srl   r1, 8
        andi  r1, >000f
        movb  @>8303, @>fe82            ; low R1 backcolor
__l_293:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi2
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret
; jump tables for case statements
__l_296:
        data  __c_285
        data  __c_286
        data  __c_287
        data  __c_288
        data  __c_289
        data  __c_290
        data  __c_291

        bank 3, >61f0

; Subroutine: _rt_scroll_up, level: 2
;   0000       0  start: int16
;   0002       2  stop: int16
;   0004       4  len: int16
;   0006       6  inc1: int16
;   0008       8  inc2: int16

_rt_scroll_up:
        mov   *r10, r0
        li    r13, >8c02
        li    r14, >8800
        li    r15, >8c00
_rt_scroll_up_1:
        swpb  r0
        movb  r0, *r13
        swpb  r0
        movb  r0, *r13
        mov   @>0004(r10), r8
        li    r12, >8320
_rt_scroll_up_2:
        movb  *r14, *r12+
        dec   r8
        movb  *r14, *r12+
        dec   r8
        movb  *r14, *r12+
        dec   r8
        movb  *r14, *r12+
        dec   r8
        jne   _rt_scroll_up_2
        a     @>0006(r10), r0
        swpb  r0
        movb  r0, *r13
        swpb  r0
        movb  r0, *r13
        mov   @>0004(r10), r8
        li    r12, >8320
_rt_scroll_up_3:
        movb  *r12+, *r15
        dec   r8
        movb  *r12+, *r15
        dec   r8
        movb  *r12+, *r15
        dec   r8
        movb  *r12+, *r15
        dec   r8
        jne   _rt_scroll_up_3
        a     @>0008(r10), r0
        c     r0, @>0002(r10)
        jl    _rt_scroll_up_1
        mov   @>0004(r10), r8
        li    r12, >2000
_rt_scroll_up_4:
        movb  r12, *r15
        dec   r8
        jne   _rt_scroll_up_4
        ai    r10, >000a
        b     @__far_ret

        bank 3, >6266

; Subroutine: bittrim, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var b2: reference to array [subrange (0..3) of int64] of int16
;   0004       4  var n: reference to int16
;   0006       6  var ptype: reference to int16
;   0008       8  flg: int16

bittrim:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0008(r10), @>fe8c
        mov   @>0006(r10), r0
        mov   @>0004(r10), r1
        mov   @>0002(r10), r2
        mov   *r10, r3
        mov   *r1, r4
        mov   r4, @>fe84
        mov   r4, @>fe88
        mov   *r0, r5
        ci    r5, >0018
        jeq   bishop
        clr   @>fe8a
        inc   @>ffde
        li    r5, >0008
        mov   r5, @>fe86
        bl    @trimray
        clr   @>fe8a
        mov   @>fe84, @>fe88
        li    r5, >fff8
        mov   r5, @>fe86
        bl    @trimray
        clr   @>fe8a
        clr   @>ffde
        bl    @l_edge
        ci    r5, >0000
        jne   rray
        mov   @>fe84, @>fe88
        li    r5, >ffff
        mov   r5, @>fe86
        bl    @trimray
rray:
        clr   @>fe8a
        bl    @r_edge
        ci    r5, >0000
        jne   isrook
        mov   @>fe84, @>fe88
        li    r5, >0001
        mov   r5, @>fe86
        bl    @trimray
isrook:
        mov   *r0, r5
        ci    r5, >0008
        jeq   finish
bishop:
        clr   @>fe8a
        bl    @l_edge
        ci    r5, >0000
        jne   rcheck
        mov   @>fe84, @>fe88
        li    r5, >0007
        mov   r5, @>fe86
        bl    @trimray
        clr   @>fe8a
        mov   @>fe84, @>fe88
        li    r5, >fff7
        mov   r5, @>fe86
        bl    @trimray
rcheck:
        clr   @>fe8a
        bl    @r_edge
        ci    r5, >0000
        jne   finish
        mov   @>fe84, @>fe88
        li    r5, >0009
        mov   r5, @>fe86
        bl    @trimray
        clr   @>fe8a
        mov   @>fe84, @>fe88
        li    r5, >fff9
        mov   r5, @>fe86
        bl    @trimray
finish:
        lwpi  >8300
        ai    r10, >000a
        b     @__far_ret

        bank 3, >6382

; Subroutine: bitpos, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var posarray: reference to array [subrange (0..64) of int64] of int16

bitpos:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0002(r10), r1
        mov   *r10, r3
        clr   r0
        clr   r4
        clr   @>fe92
        mov   r1, r2
        inct  r1
nextpos:
        bl    @bitchk
        ci    r5, >0000
        jeq   nopiece
        mov   r0, *r1+
        inc   @>fe92
nopiece:
        inc   r0
        mov   r0, r4
        ci    r4, >003f
        jgt   donebrd
        jmp   nextpos
donebrd:
        mov   @>fe92, *r2
        lwpi  >8300
        ai    r10, >0004
        b     @__far_ret

        bank 3, >63c8

; Subroutine: bitnot, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var br: reference to array [subrange (0..3) of int64] of int16

bitnot:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0002(r10), r6
        mov   *r10, r5
        mov   *r5+, r4
        inv   r4
        mov   r4, *r6+
        mov   *r5+, r4
        inv   r4
        mov   r4, *r6+
        mov   *r5+, r4
        inv   r4
        mov   r4, *r6+
        mov   *r5, r4
        inv   r4
        mov   r4, *r6
        lwpi  >8300
        ai    r10, >0004
        b     @__far_ret

        bank 3, >63fa

; Subroutine: bitand, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var b2: reference to array [subrange (0..3) of int64] of int16
;   0004       4  var br: reference to array [subrange (0..3) of int64] of int16

bitand:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0004(r10), r7
        mov   @>0002(r10), r6
        mov   *r10, r5
        mov   *r5+, r3
        mov   *r6+, r4
        inv   r3
        szc   r3, r4
        mov   r4, *r7+
        mov   *r5+, r3
        mov   *r6+, r4
        inv   r3
        szc   r3, r4
        mov   r4, *r7+
        mov   *r5+, r3
        mov   *r6+, r4
        inv   r3
        szc   r3, r4
        mov   r4, *r7+
        mov   *r5, r3
        mov   *r6, r4
        inv   r3
        szc   r3, r4
        mov   r4, *r7
        lwpi  >8300
        ai    r10, >0006
        b     @__far_ret

        bank 3, >6440

; Subroutine: bitor, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var b2: reference to array [subrange (0..3) of int64] of int16
;   0004       4  var br: reference to array [subrange (0..3) of int64] of int16

bitor:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0004(r10), r7
        mov   @>0002(r10), r6
        mov   *r10, r5
        mov   *r6+, r3
        soc   *r5+, r3
        mov   r3, *r7+
        mov   *r6+, r3
        soc   *r5+, r3
        mov   r3, *r7+
        mov   *r6+, r3
        soc   *r5+, r3
        mov   r3, *r7+
        mov   *r6, r3
        soc   *r5, r3
        mov   r3, *r7
        lwpi  >8300
        ai    r10, >0006
        b     @__far_ret

        bank 3, >6476

; Subroutine: rshift, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var br: reference to array [subrange (0..3) of int64] of int16
;   0004       4  n: int16

rshift:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0004(r10), r5
        mov   @>0002(r10), r7
        mov   *r10, r6
        mov   *r6+, r4
        mov   *r6+, r3
        mov   *r6+, r2
        mov   *r6, r1
nxtshft:
        srl   r1, 1
        srl   r2, 1
        jnc   notset1
        ori   r1, >8000
notset1:
        srl   r3, 1
        jnc   notset2
        ori   r2, >8000
notset2:
        srl   r4, 1
        jnc   notset3
        ori   r3, >8000
notset3:
        dec   r5
        jne   nxtshft
        mov   r4, *r7+
        mov   r3, *r7+
        mov   r2, *r7+
        mov   r1, *r7
        lwpi  >8300
        ai    r10, >0006
        b     @__far_ret

        bank 3, >64c2

; Subroutine: lshift, level: 2
;   0000       0  var b1: reference to array [subrange (0..3) of int64] of int16
;   0002       2  var br: reference to array [subrange (0..3) of int64] of int16
;   0004       4  n: int16

lshift:
        lwpi  >8320
        mov   @>8314, r10
        mov   @>0004(r10), r5
        mov   @>0002(r10), r7
        mov   *r10, r6
        mov   *r6+, r4
        mov   *r6+, r3
        mov   *r6+, r2
        mov   *r6, r1
newshft:
        sla   r4, 1
        sla   r3, 1
        jnc   nocar1
        ori   r4, >0001
nocar1:
        sla   r2, 1
        jnc   nocar2
        ori   r3, >0001
nocar2:
        sla   r1, 1
        jnc   nocar3
        ori   r2, >0001
nocar3:
        dec   r5
        jne   newshft
        mov   r4, *r7+
        mov   r3, *r7+
        mov   r2, *r7+
        mov   r1, *r7
        lwpi  >8300
        ai    r10, >0006
        b     @__far_ret

        bank 3, >650e

; Subroutine: dummy, level: 2

dummy:
        clr   r0
trimray:
        mov   r11, @>fe90
nxtsqr:
        a     @>fe86, @>fe88
        mov   @>fe88, r4
        ci    r4, >0000
        jlt   done
        ci    r4, >003f
        jgt   done
        bl    @bitchk
        ci    r5, >0000
        jne   next
        c     @>fe8a, @>ffe0
        jne   sidebit
        inc   @>fe8a
        c     @>fe8c, @>ffe0
        jeq   sidebit
        clr   r5
        movb  *r4, r5
        inv   r6
        socb  r6, r5
        movb  r5, *r4
        inv   r6
sidebit:
        c     @>ffde, @>ffe0
        jne   nxtsqr
        clr   r4
        movb  @>fe94, r4
        swpb  r4
        a     r2, r4
        clr   r5
        movb  *r4, r5
        szcb  r6, r5
        ci    r5, >0000
        jeq   nxtsqr
        jmp   done
next:
        c     @>fe8a, @>ffe0
        jeq   sidebit
        inv   r6
        clr   r5
        movb  *r4, r5
        szcb  r6, r5
        movb  r5, *r4
        inv   r6
        jmp   sidebit
done:
        mov   @>fe90, r11
        b     *r11
bitchk:
        clr   r7
        mov   r4, r5
        mov   r5, r6
        srl   r5, 3
        mov   r5, r4
        sla   r5, 3
        jmp   trgchk
nxtbit:
        inc   r5
        inc   r7
trgchk:
        c     r5, r6
        jne   nxtbit
        swpb  r4
        movb  r4, @>fe94
        swpb  r4
        a     r3, r4
        clr   r5
        movb  *r4, r5
        clr   r6
        movb  @>ffe2(r7), r6
        inv   r6
        szcb  r6, r5
        b     *r11
l_edge:
        mov   r11, @>fe90
        clr   r5
        mov   @>fe84, r4
        ci    r4, >0000
        jeq   atedge
        ci    r4, >0008
        jeq   atedge
        ci    r4, >0010
        jeq   atedge
        ci    r4, >0018
        jeq   atedge
        ci    r4, >0020
        jeq   atedge
        ci    r4, >0028
        jeq   atedge
        ci    r4, >0030
        jeq   atedge
        ci    r4, >0038
        jeq   atedge
        jmp   notedge
atedge:
        inc   r5
notedge:
        mov   @>fe90, r11
        b     *r11
r_edge:
        mov   r11, @>fe90
        clr   r5
        mov   @>fe84, r4
        ci    r4, >0007
        jeq   atedge1
        ci    r4, >000f
        jeq   atedge1
        ci    r4, >0017
        jeq   atedge1
        ci    r4, >001f
        jeq   atedge1
        ci    r4, >0027
        jeq   atedge1
        ci    r4, >002f
        jeq   atedge1
        ci    r4, >0037
        jeq   atedge1
        ci    r4, >003f
        jeq   atedge1
        jmp   noedge
atedge1:
        inc   r5
noedge:
        mov   @>fe90, r11
        b     *r11
        b     @__far_ret

        bank 3, >664c

; Subroutine: $bitops_init_29, level: 2

$bitops_init_29:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, __l_321
        mov   r1, @>fe96                ;  p
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

; ; Far call vectors
__l_321:
        data  >6006
        data  dummy

        bank 4, >6060

; Subroutine: chainmain_30, level: 2
;   ffdc     -36  __rettmp_48: string [6]
;   ffdc     -36  __rettmp_49: string [11]
;   ffdc     -36  __rettmp_50: string [11]
;   ffdc     -36  __rettmp_51: string [6]
;   ffdc     -36  __rettmp_52: int16
;   ffdc     -36  __rettmp_53: boolean
;   ffdc     -36  __rettmp_54: boolean
;   ffdc     -36  __rettmp_55: boolean
;   ffdc     -36  __rettmp_56: boolean
;   ffdc     -36  __rettmp_57: set of int64
;   fffc      -4  __rettmp_58: boolean
;   ffdc     -36  __rettmp_59: string [11]
;   ffdc     -36  __rettmp_60: boolean
;   ffdc     -36  __rettmp_61: string [6]
;   ffdc     -36  __rettmp_62: boolean
;   ffdc     -36  __rettmp_63: boolean
;   ffdc     -36  __rettmp_64: boolean
;   ffdc     -36  __rettmp_65: boolean
;   ffdc     -36  __rettmp_66: string [10]
;   ffdc     -36  __rettmp_67: int16
;   ffdc     -36  __rettmp_68: int16
;   ffdc     -36  __rettmp_69: string [7]
;   ffdc     -36  __rettmp_70: int16
;   ffdc     -36  __rettmp_71: string [11]
;   ffdc     -36  __rettmp_72: string [11]
;   ffdc     -36  __rettmp_73: string [11]
;   ffdc     -36  __rettmp_74: string [6]
;   ffdc     -36  __rettmp_75: int16
;   fffe      -2  $i: int16

chainmain_30:
        ai    r10, >ffd0
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0024
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600c
        data  initgame_35
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6010
        data  boarddisplay_46
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >000a
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_48
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_48
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd7a, @>0002(r10)       ; gamemove 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   @>fd66, r1                ; gameside
        jne   __l_343
__l_342:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_7
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_49
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_49
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        jmp   __l_344
__l_343:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_8
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_50
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_50
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_344:
        mov   @>fd72, r1                ; cwarning
        ci    r1, >0001
        jne   __l_347
__l_346:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_9
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_51
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_51
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_347:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_52
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffdc(r9), @>fea6        ; __rettmp_52  ans
__l_325:
        clr   @>fd80                    ;  wlaflag
        clr   @>fd7e                    ;  wraflag
        clr   @>fd84                    ;  blaflag
        clr   @>fd82                    ;  braflag
        clr   @>feae                    ;  cflag
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        clr   @>fe9e                    ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0f6e
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        clr   @>fd90                    ;  movenumlo
        clr   @>fd8e                    ;  movenumhi
        li    r1, >b1e0
        mov   r1, @>fea2                ;  aval
        li    r1, >4e20
        mov   r1, @>fea4                ;  bval
        clr   @>fe9c                    ;  movescore
        clr   r1
        movb  @>8303, @>feb2            ; low R1 humanflag
        clr   @>fe98                    ;  i
        c     @>fd7c, @>fd66            ; humanside gameside 
        jeq   __l_350
        b     @__l_351
__l_350:
        li    r1, >0001
        movb  @>8303, @>feb2            ; low R1 humanflag
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600a
        data  savemove_34
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   @>fd66, @>000a(r10)       ; gameside 
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        inct  r2
        li    r3, >0008
__l_354:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_354
        li    r1, >ff42                 ; playmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >6014
        data  playermove_51
        c     @>fd7c, @>fd66            ; humanside gameside 
        jeq   __l_356
__l_355:
        li    r1, >0001
        mov   r1, @>fe98                ;  i
__l_356:
        mov   @>fd6a, r1                ; piececount
        ci    r1, >ffff
        jne   __l_360
        b     @__l_609
__l_360:
        mov   @>fe98, r1                ; i
        ci    r1, >0001
        jne   __l_364
        b     @__l_428
__l_364:
        mov   @>fd64, r1                ; turn
        jne   __l_370
__l_371:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_367
__l_370:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_374
        b     @__l_428
__l_374:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_367
        b     @__l_428
__l_367:
        li    r1, >0180
        mov   @>ff46, r2                ; playmove .endsq
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jne   __l_378
__l_377:
        li    r1, >0068
        mov   r1, @>fe9e                ;  offset
        jmp   __l_379
__l_378:
        li    r1, >0070
        mov   r1, @>fe9e                ;  offset
__l_379:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_381:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_381
        mov   @>fe9e, @>0004(r10)       ; offset 
        mov   @>ff46, @>0002(r10)       ; playmove .endsq 
        mov   @>ff42, *r10              ; playmove 
        bl    @__far_call_1
        data  >6010
        data  trim_43
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        mov   @>fd64, r1                ; turn
        jeq   __l_382
        b     @__l_383
__l_382:
        li    r1, >0f46
        mov   r1, @>fe9e                ;  offset
        li    r1, >0f3e
        mov   r1, @>feaa                ;  offset1
        mov   @>fd82, r1                ; braflag
        jne   __l_387
__l_389:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_387
__l_386:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_53
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_53
        jne   __l_387
__l_392:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_387:
        mov   @>fd84, r1                ; blaflag
        jne   __l_397
__l_399:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_397
__l_396:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>feaa, @>0006(r10)       ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_54
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_54
        jne   __l_397
__l_402:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_397:
        b     @__l_428
__l_383:
        li    r1, >0f36
        mov   r1, @>fe9e                ;  offset
        li    r1, >0f2e
        mov   r1, @>feaa                ;  offset1
        mov   @>fd7e, r1                ; wraflag
        jne   __l_407
__l_409:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_407
__l_406:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_55
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_55
        jne   __l_407
__l_412:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
__l_407:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_368
__l_419:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_368
__l_416:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>feaa, @>0006(r10)       ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_56
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_56
        jne   __l_368
__l_422:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_368:
        b     @__l_428
__l_351:
        mov   @>fd7a, r1                ; gamemove
        ci    r1, >0001
        jeq   __l_426
        b     @__l_427
__l_426:
        clr   @>fe9c                    ;  movescore
        li    r1, >0002
        mov   r1, @>fe98                ;  i
        mov   @>fd66, r1                ; gameside
        jne   __l_431
__l_430:
        mov   @>fe98, r1                ; i
        dec   r1
; no-opt
        ci    r1, >0002
        jle   __l_436
        b     @__l_428
__l_436:
        sla   r1, 1
        ai    r1, __l_437
        mov   *r1, r1
        b     *r1
__c_326:
        clr   @>ff42                    ;  playmove
        li    r1, >000c
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >001c
        mov   r1, @>ff46                ;  playmove .endsq
        b     @__l_428
__c_327:
        clr   @>ff42                    ;  playmove
        li    r1, >000b
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >001b
        mov   r1, @>ff46                ;  playmove .endsq
        b     @__l_428
__c_328:
        li    r1, >0010
        mov   r1, @>ff42                ;  playmove
        li    r1, >0006
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >0015
        mov   r1, @>ff46                ;  playmove .endsq
        b     @__l_428
__l_431:
        mov   @>ff3e, r1                ; lastmove .endsq
        ai    r1, >fff5
; no-opt
        ci    r1, >000a
        jle   __l_440
        jmp   __l_438
__l_440:
        sla   r1, 1
        ai    r1, __l_441
        mov   *r1, r1
        b     *r1
__c_329:
        clr   @>ff42                    ;  playmove
        mov   @>fe98, r1                ; i
        dec   r1
; no-opt
        ci    r1, >0002
        jle   __l_444
        jmp   __l_438
__l_444:
        sla   r1, 1
        ai    r1, __l_445
        mov   *r1, r1
        b     *r1
__c_330:
        li    r1, >0034
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >002c
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_438
__c_331:
        li    r1, >0033
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >002b
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_438
__c_332:
        li    r1, >0033
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >0023
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_438
__c_333:
        mov   @>fe98, r1                ; i
        dec   r1
; no-opt
        ci    r1, >0002
        jle   __l_448
        jmp   __l_438
__l_448:
        sla   r1, 1
        ai    r1, __l_449
        mov   *r1, r1
        b     *r1
__c_334:
        clr   @>ff42                    ;  playmove
        li    r1, >0033
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >0023
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_438
__c_335:
        li    r1, >0010
        mov   r1, @>ff42                ;  playmove
        li    r1, >003e
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >002d
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_438
__c_336:
        clr   @>ff42                    ;  playmove
        li    r1, >0032
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >0022
        mov   r1, @>ff46                ;  playmove .endsq
__l_438:
        mov   @>ff3e, r1                ; lastmove .endsq
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_454
        sla   r14, 0
__l_454:
        sra   r1, 3
        li    r2, __set_cnst_10
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_455
        inc   r1
__l_455:
        ci    r1, >0000
        jne   __l_428
__l_450:
        clr   @>ff42                    ;  playmove
        li    r1, >0033
        mov   r1, @>ff44                ;  playmove .startsq
        li    r1, >0023
        mov   r1, @>ff46                ;  playmove .endsq
        jmp   __l_428
__l_427:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_11
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_59
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_59
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >ffec
        mov   @>7ffe, @>0012(r10)
        mov   @>feae, @>0010(r10)       ; cflag 
        mov   @>fea4, @>000e(r10)       ; bval 
        mov   @>fea2, @>000c(r10)       ; aval 
        li    r1, >fe9c                 ; movescore
        mov   r1, @>000a(r10)
        li    r1, >ff42                 ; playmove
        mov   r1, @>0008(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        li    r3, >0008
__l_456:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_456
        bl    @__far_call_1
        data  >600c
        data  movegen_37
__l_428:
        li    r1, >0016
        mov   r1, @>fd60                ;  spage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        li    r1, >0380
        a     @>fd68, r1                ; gamepointer 
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff42                 ; playmove
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd68, r1                ; gamepointer
        ai    r1, >0008
        mov   r1, @>fd68                ;  gamepointer
        li    r1, >0063
        mov   r1, @>ff4a                ;  movestore
        mov   @>fe9e, r1                ; offset
        ai    r1, >0008
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff4a                 ; movestore
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fe98, r1                ; i
        ci    r1, >0001
        jne   __l_458
        b     @__l_325
__l_458:
        li    r1, >ff42                 ; playmove
        li    r2, >ff3a                 ; lastmove
        li    r3, >0008
__l_461:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_461
        movb  @>feb2, r1                ; humanflag
        jeq   __l_463
__l_462:
        li    r1, >0001
        mov   r1, @>fd60                ;  spage
        jmp   __l_464
__l_463:
        clr   @>fd60                    ;  spage
__l_464:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff42                 ; playmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >600a
        data  updatemove_31
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_467
__l_469:
        mov   @>fd66, r1                ; gameside
        jne   __l_467
__l_466:
        mov   @>ff42, r1                ; playmove
        ci    r1, >0028
        jne   __l_473
__l_472:
        li    r1, >0001
        mov   r1, @>fd6c                ;  wcastleflag
__l_473:
        mov   @>ff42, r1                ; playmove
        ci    r1, >0008
        jne   __l_467
__l_476:
        mov   @>ff44, r1                ; playmove .startsq
        jne   __l_481
__l_480:
        li    r1, >0001
        mov   r1, @>fd86                ;  wrooklflag
__l_481:
        mov   @>ff44, r1                ; playmove .startsq
        ci    r1, >0007
        jne   __l_467
__l_484:
        li    r1, >0001
        mov   r1, @>fd88                ;  wrookrflag
__l_467:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_489
__l_491:
        mov   @>fd66, r1                ; gameside
        ci    r1, >0001
        jne   __l_489
__l_488:
        mov   @>ff42, r1                ; playmove
        ci    r1, >0028
        jne   __l_495
__l_494:
        li    r1, >0001
        mov   r1, @>fd6e                ;  bcastleflag
__l_495:
        mov   @>ff42, r1                ; playmove
        ci    r1, >0008
        jne   __l_489
__l_498:
        mov   @>ff44, r1                ; playmove .startsq
        ci    r1, >0038
        jne   __l_503
__l_502:
        li    r1, >0001
        mov   r1, @>fd8a                ;  brooklflag
__l_503:
        mov   @>ff44, r1                ; playmove .startsq
        ci    r1, >003f
        jne   __l_489
__l_506:
        li    r1, >0001
        mov   r1, @>fd8c                ;  brookrflag
__l_489:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6010
        data  boarddisplay_46
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_510:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_510
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        clr   r1
        movb  @>8303, @>feb4            ; low R1 checkflag
        clr   @>fd72                    ;  cwarning
        mov   @>fd66, r1                ; gameside
        jne   __l_512
__l_511:
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
        jmp   __l_513
__l_512:
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
__l_513:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_516
__l_515:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_517
__l_516:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_517:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_60
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_60
        jne   __l_520
__l_519:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_9
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_61
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_61
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        li    r1, >0001
        movb  @>8303, @>feb4            ; low R1 checkflag
        li    r1, >0001
        mov   r1, @>fd72                ;  cwarning
__l_520:
        clr   r1
        movb  @>8303, @>feb3            ; low R1 cmflag
        movb  @>feb4, r1                ; checkflag
        jne   __l_523
        b     @__l_524
__l_523:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600a
        data  saveboards_32
        mov   @>fd66, r1                ; gameside
        jne   __l_528
__l_527:
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
        li    r1, >0068
        mov   r1, @>feaa                ;  offset1
        li    r1, >0070
        mov   r1, @>fea8                ;  sideoffset
        jmp   __l_529
__l_528:
        clr   @>fd64                    ;  turn
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
        li    r1, >0070
        mov   r1, @>feaa                ;  offset1
        li    r1, >0068
        mov   r1, @>fea8                ;  sideoffset
__l_529:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >feb8                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_531:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_531
        mov   @>fea8, @>0004(r10)       ; sideoffset 
        mov   @>feba, @>0002(r10)       ; movearray  
        li    r1, >0028
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  trim_43
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_62
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_62
        jeq   __l_532
        b     @__l_533
__l_532:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >feb8                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>fe98                ;  i
        mov   @>feb8, @>fffe(r9)        ; movearray  $i
        c     @>fe98, @>fffe(r9)        ; i $i 
        jlt   __l_339
        jeq   __l_339
        b     @__l_533
__l_338:
        inc   @>fe98                    ; i
__l_339:
        li    r1, >0180
        li    r2, >feb8                 ; movearray
        mov   @>fe98, r3                ; i
        sla   r3, 1
        a     r3, r2
        mov   *r2, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_539
__l_538:
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
        jmp   __l_540
__l_539:
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
__l_540:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>feaa, @>0006(r10)       ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>feaa, @>0006(r10)       ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>fe9a                    ;  j
        mov   @>fd66, r1                ; gameside
        jne   __l_543
__l_542:
        clr   @>fe9e                    ;  offset
        jmp   __l_544
__l_543:
        li    r1, >0030
        mov   r1, @>fe9e                ;  offset
__l_544:
        mov   @>fe9e, r1                ; offset
        a     @>fe9a, r1                ; j 
        mov   r1, @>feac                ;  offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>feac, @>0006(r10)       ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>feac, @>0006(r10)       ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fe9a, r1                ; j
        ai    r1, >0008
        mov   r1, @>fe9a                ;  j
        ci    r1, >0020
        jlt   __l_544
        jeq   __l_544
__l_546:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fea8, @>0006(r10)       ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fea8, @>0006(r10)       ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >fd9a                 ; bit2
        li    r2, >ff5a                 ; bit8
        li    r3, >0008
__l_548:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_548
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_549:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_549
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd66, r1                ; gameside
        jne   __l_551
__l_550:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >ff5a                 ; bit8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_552
__l_551:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >ff5a                 ; bit8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_552:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_63
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_63
        jeq   __l_555
        b     @__l_590
__l_555:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600a
        data  getboards_33
        c     @>fe98, @>fffe(r9)        ; i $i 
        jeq   __l_533
        b     @__l_338
__l_533:
        mov   @>fd66, r1                ; gameside
        jne   __l_561
__l_560:
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
        jmp   __l_562
__l_561:
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
__l_562:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fea8, @>0006(r10)       ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fea8, @>0006(r10)       ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_564:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_564
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd66, r1                ; gameside
        jne   __l_566
__l_565:
        li    r1, >fdb2                 ; bit5
        li    r2, >ff5a                 ; bit8
        li    r3, >0008
__l_569:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_569
        jmp   __l_567
__l_566:
        li    r1, >fda2                 ; bit3
        li    r2, >ff5a                 ; bit8
        li    r3, >0008
__l_570:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_570
__l_567:
        li    r1, >0180
        mov   @>ff46, r2                ; playmove .endsq
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >ff5a                 ; bit8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_64
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_64
        jne   __l_572
__l_571:
        b     @__l_590
__l_572:
        mov   @>fd66, r1                ; gameside
        jne   __l_576
__l_575:
        li    r1, >0068
        mov   r1, @>fea8                ;  sideoffset
        clr   @>fd64                    ;  turn
        jmp   __l_577
__l_576:
        li    r1, >0070
        mov   r1, @>fea8                ;  sideoffset
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
__l_577:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_579:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_579
        mov   @>fea8, @>0004(r10)       ; sideoffset 
        mov   @>ff46, @>0002(r10)       ; playmove .endsq 
        mov   @>ff42, *r10              ; playmove 
        bl    @__far_call_1
        data  >6010
        data  trim_43
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >ff5a                 ; bit8
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_581
__l_580:
        li    r1, >0070
        mov   r1, @>fe9e                ;  offset
        jmp   __l_582
__l_581:
        li    r1, >0068
        mov   r1, @>fe9e                ;  offset
__l_582:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_585
__l_584:
        li    r1, >0068
        mov   r1, @>fea8                ;  sideoffset
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
        jmp   __l_586
__l_585:
        li    r1, >0070
        mov   r1, @>fea8                ;  sideoffset
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
__l_586:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_588:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_588
        mov   @>fea8, @>0004(r10)       ; sideoffset 
        mov   @>ff46, @>0002(r10)       ; playmove .endsq 
        mov   @>ff42, *r10              ; playmove 
        bl    @__far_call_1
        data  >6010
        data  trim_43
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600a
        data  getboards_33
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_65
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffdc(r9), r1            ; __rettmp_65
        jne   __l_590
__l_589:
        li    r1, >0001
        movb  @>8303, @>feb3            ; low R1 cmflag
__l_590:
        movb  @>feb3, r1                ; cmflag
        jne   __l_593
        b     @__l_594
__l_593:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_12
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_66
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_66
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_67
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffdc(r9), @>fea6        ; __rettmp_67  ans
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fe98                 ; i
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  utility_52
        b     @__l_609
__l_594:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600a
        data  getboards_33
        b     @__l_598
__l_524:
        mov   @>fe9c, r1                ; movescore
        abs   r1
        ci    r1, >4e20
        jeq   __l_597
        b     @__l_598
__l_597:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_13
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_69
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_69
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_70
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffdc(r9), @>fea6        ; __rettmp_70  ans
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fe98                 ; i
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  utility_52
        b     @__l_609
__l_598:
        movb  @>feb2, r1                ; humanflag
        jeq   __l_602
__l_601:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_11
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_71
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_71
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_602:
        mov   @>fd66, r1                ; gameside
        jne   __l_606
__l_605:
        li    r1, >0001
        mov   r1, @>fd66                ;  gameside
        mov   r1, @>fd64                ;  turn
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0002
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_8
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_72
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_72
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        jmp   __l_607
__l_606:
        clr   @>fd66                    ;  gameside
        clr   @>fd64                    ;  turn
        mov   @>fd7a, r1                ; gamemove
        inc   r1
        mov   r1, @>fd7a                ;  gamemove
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0002
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_7
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_73
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_73
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_607:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600c
        data  check3rep_36
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >000a
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_74
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_74
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd7a, @>0002(r10)       ; gamemove 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        movb  @>feb2, @>0006(r10)       ; humanflag 
        mov   @>ff46, @>0004(r10)       ; playmove .endsq 
        mov   @>ff44, @>0002(r10)       ; playmove .startsq 
        mov   @>fe9c, *r10              ; movescore 
        bl    @__far_call_1
        data  >6012
        data  movecoord_48
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffdc                 ; __rettmp_75
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffdc(r9), @>fea6        ; __rettmp_75  ans
        mov   @>fd74, @>fd70            ; gameply  ply
l_2_324:
        b     @__l_325
__l_609:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
; jump tables for case statements
__l_437:
        data  __c_326
        data  __c_327
        data  __c_328
__l_441:
        data  __c_333
        data  __c_329
        data  __l_438
        data  __l_438
        data  __l_438
        data  __l_438
        data  __l_438
        data  __l_438
        data  __l_438
        data  __l_438
        data  __c_333
__l_445:
        data  __c_330
        data  __c_331
        data  __c_332
__l_449:
        data  __c_334
        data  __c_335
        data  __c_336

__str_cnst_6 text >066d6f76653a20    ; move: 
__str_cnst_7 text >0b7475726e3a207768697465    ; turn: white
__str_cnst_8 text >0b7475726e3a20626c61636b    ; turn: black
__str_cnst_9 text >06636865636b21    ; check!
__str_cnst_11 text >0b7468696e6b696e672e2e2e    ; thinking...
__str_cnst_12 text >0a636865636b6d61746521    ; checkmate!
__str_cnst_13 text >0772657369676e21    ; resign!
        even 

; ; Set Constants
__set_cnst_10:
        text >1800002000000000000000000000000000000000000000000000000000000000

        bank 5, >6060

; Subroutine: updatemove_31, level: 2
;   ffa8     -88  __rettmp_10: int16
;   ffa8     -88  __rettmp_11: set of int64
;   ffc8     -56  __rettmp_12: boolean
;   ffd0     -48  __rettmp_13: set of int64
;   fff0     -16  __rettmp_14: boolean
;   ffa8     -88  __rettmp_15: boolean
;   ffa8     -88  __rettmp_16: int16
;   ffb0     -80  __rettmp_17: set of int64
;   ffd0     -48  __rettmp_18: boolean
;   ffa8     -88  __rettmp_19: int16
;   ffa8     -88  __rettmp_20: string [15]
;   ffa8     -88  __rettmp_21: string [7]
;   ffa8     -88  __rettmp_22: string [9]
;   ffa8     -88  __rettmp_23: string [9]
;   ffa8     -88  __rettmp_24: string [8]
;   ffa8     -88  __rettmp_25: int16
;   ffa8     -88  __rettmp_26: set of int64
;   ffc8     -56  __rettmp_27: boolean
;   0004       4  var playmove: reference to record
;   fff2     -14  offset1: int16
;   fff4     -12  offset2: int16
;   fff6     -10  offset3: int16
;   fff8      -8  offset4: int16
;   fffa      -6  qcastleflag: int16
;   fffc      -4  kcastleflag: int16
;   fffe      -2  ans: int16

updatemove_31:
        ai    r10, >ff9c
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0058
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>fffa(r9)                ; qcastleflag
        clr   @>fffc(r9)                ; kcastleflag
        mov   @>fd66, r1                ; gameside
        jne   __l_616
__l_617:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_613
__l_616:
        mov   @>fd66, r1                ; gameside
        ci    r1, >0001
        jne   __l_614
__l_620:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_614
__l_613:
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        ci    r1, >0028
        jne   __l_614
__l_626:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; playmove
        s     @>0004(r2), r1            ;  
        abs   r1
        ci    r1, >0002
        jne   __l_614
__l_623:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; playmove
        s     @>0004(r2), r1            ;  
        ci    r1, >0000
        jlt   __l_630
        jeq   __l_630
__l_629:
        li    r1, >0001
        mov   r1, @>fffa(r9)            ; qcastleflag
        jmp   __l_614
__l_630:
        li    r1, >0001
        mov   r1, @>fffc(r9)            ; kcastleflag
__l_614:
        mov   @>fd66, r1                ; gameside
        jne   __l_634
__l_637:
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_634
__l_636:
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        ci    r1, >0008
        jne   __l_634
__l_633:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        jne   __l_642
__l_644:
        mov   @>fffa(r9), r1            ; qcastleflag
        jne   __l_642
__l_641:
        li    r1, >0001
        mov   r1, @>fd86                ;  wrooklflag
        jmp   __l_654
__l_642:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        ci    r1, >0007
        jne   __l_654
__l_650:
        mov   @>fffc(r9), r1            ; kcastleflag
        jne   __l_654
__l_647:
        li    r1, >0001
        mov   r1, @>fd88                ;  wrookrflag
        jmp   __l_654
__l_634:
        mov   @>fd66, r1                ; gameside
        ci    r1, >0001
        jne   __l_654
__l_657:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_654
__l_656:
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        ci    r1, >0008
        jne   __l_654
__l_653:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        ci    r1, >003a
        jne   __l_662
__l_664:
        mov   @>fffa(r9), r1            ; qcastleflag
        jne   __l_662
__l_661:
        li    r1, >0001
        mov   r1, @>fd8a                ;  brooklflag
        jmp   __l_654
__l_662:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        ci    r1, >003f
        jne   __l_654
__l_670:
        mov   @>fffc(r9), r1            ; kcastleflag
        jne   __l_654
__l_667:
        li    r1, >0001
        mov   r1, @>fd8c                ;  brookrflag
__l_654:
        clr   r1
        movb  @>8303, @>feb5            ; low R1 promflag
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        jeq   __l_676
        b     @__l_674
__l_676:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_680
        sla   r14, 0
__l_680:
        sra   r1, 3
        li    r2, __set_cnst_14
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_681
        inc   r1
__l_681:
        ci    r1, >0000
        jne   __l_673
__l_678:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_683
        sla   r14, 0
__l_683:
        sra   r1, 3
        li    r2, __set_cnst_15
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_684
        inc   r1
__l_684:
        ci    r1, >0000
        jne   __l_673
        b     @__l_674
__l_673:
        li    r1, >0001
        movb  @>8303, @>feb5            ; low R1 promflag
        mov   @>fd64, r1                ; turn
        jne   __l_686
__l_685:
        clr   @>fe9e                    ;  offset
        jmp   __l_687
__l_686:
        li    r1, >0030
        mov   r1, @>fe9e                ;  offset
__l_687:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0004(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fff2(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_674:
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0002(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_690
__l_689:
        clr   r1
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>fe9e                ;  offset
        li    r1, >0068
        mov   r1, @>fff2(r9)            ; offset1
        li    r1, >0070
        mov   r1, @>fff8(r9)            ; offset4
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jne   __l_694
__l_693:
        li    r1, >0001
        mov   r1, @>fd6c                ;  wcastleflag
        li    r1, >0180
        mov   r1, @>fff4(r9)            ; offset2
        li    r1, >0008
        mov   r1, @>fff6(r9)            ; offset3
        jmp   __l_706
__l_694:
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jne   __l_706
__l_697:
        li    r1, >0001
        mov   r1, @>fd6c                ;  wcastleflag
        li    r1, >01b8
        mov   r1, @>fff4(r9)            ; offset2
        li    r1, >0008
        mov   r1, @>fff6(r9)            ; offset3
        jmp   __l_706
__l_690:
        li    r1, >0030
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>fe9e                ;  offset
        li    r1, >0070
        mov   r1, @>fff2(r9)            ; offset1
        li    r1, >0068
        mov   r1, @>fff8(r9)            ; offset4
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jne   __l_702
__l_701:
        li    r1, >0001
        mov   r1, @>fd6e                ;  bcastleflag
        li    r1, >0340
        mov   r1, @>fff4(r9)            ; offset2
        li    r1, >0038
        mov   r1, @>fff6(r9)            ; offset3
        jmp   __l_706
__l_702:
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jne   __l_706
__l_705:
        li    r1, >0001
        mov   r1, @>fd6e                ;  bcastleflag
        li    r1, >0378
        mov   r1, @>fff4(r9)            ; offset2
        li    r1, >0038
        mov   r1, @>fff6(r9)            ; offset3
__l_706:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jeq   __l_709
__l_712:
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jeq   __l_709
        b     @__l_710
__l_709:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff6(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff6(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_710:
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0004(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >fd92                 ; bit1
        li    r2, >fda2                 ; bit3
        li    r3, >0008
__l_715:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_715
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        mov   @>fd66, r1                ; gameside
        jne   __l_717
__l_716:
        li    r1, >0030
        mov   r1, @>fe9e                ;  offset
        jmp   __l_718
__l_717:
        clr   @>fe9e                    ;  offset
__l_718:
        clr   @>fe98                    ;  i
        clr   @>fea0                    ;  found
__l_610:
        mov   @>fe9e, r1                ; offset
        a     @>fe98, r1                ; i 
        mov   r1, @>fff2(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_15
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffa8(r9), r1            ; __rettmp_15
        jne   __l_721
__l_720:
        li    r1, >0001
        mov   r1, @>fea0                ;  found
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_725
__l_727:
        mov   @>fff2(r9), r1            ; offset1
        ci    r1, >0008
        jne   __l_725
__l_724:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        jne   __l_731
__l_730:
        li    r1, >0001
        mov   r1, @>fd86                ;  wrooklflag
__l_731:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        ci    r1, >0007
        jne   __l_725
__l_734:
        li    r1, >0001
        mov   r1, @>fd88                ;  wrookrflag
__l_725:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_721
__l_741:
        mov   @>fff2(r9), r1            ; offset1
        ci    r1, >0038
        jne   __l_721
__l_738:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        ci    r1, >0038
        jne   __l_745
__l_744:
        li    r1, >0001
        mov   r1, @>fd8a                ;  brooklflag
__l_745:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0004(r1), r1
        ci    r1, >003f
        jne   __l_721
__l_748:
        li    r1, >0001
        mov   r1, @>fd8c                ;  brookrflag
__l_721:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fe98, r1                ; i
        ai    r1, >0008
        mov   r1, @>fe98                ;  i
        ci    r1, >0028
        jgt   __l_752
        b     @__l_610
__l_752:
        mov   @>fea0, r1                ; found
        jeq   __l_757
        b     @__l_755
__l_757:
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        jeq   __l_754
        b     @__l_755
__l_754:
        mov   @>0004(r9), r1            ; playmove
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; playmove
        s     @>0004(r2), r1            ;  
        abs   r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_764
        sla   r14, 0
__l_764:
        sra   r1, 3
        li    r2, __set_cnst_16
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_765
        inc   r1
__l_765:
        ci    r1, >0000
        jne   __l_760
        b     @__l_755
__l_760:
        mov   @>fd66, r1                ; gameside
        jne   __l_767
__l_766:
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0004(r2), r2
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fff2(r9)            ; offset1
        jmp   __l_768
__l_767:
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0004(r2), r2
        ai    r2, >0008
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fff2(r9)            ; offset1
__l_768:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fff2(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_771
__l_770:
        li    r1, >0070
        mov   r1, @>fff2(r9)            ; offset1
        jmp   __l_772
__l_771:
        li    r1, >0068
        mov   r1, @>fff2(r9)            ; offset1
__l_772:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_755:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        movb  @>feb5, r1                ; promflag
        jne   __l_777
        b     @__l_775
__l_777:
        mov   @>fd60, r1                ; spage
        ci    r1, >0001
        jeq   __l_774
        b     @__l_775
__l_774:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_19
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffa8(r9), @>fffe(r9)    ; __rettmp_19 ans
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0008
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_17
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_20
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_20
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0009
        mov   r1, @>0002(r10)
        li    r1, >0016
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_18
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_21
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_21
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0016
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_19
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_22
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_22
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0016
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_20
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_23
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_23
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000c
        mov   r1, @>0002(r10)
        li    r1, >0016
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_21
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_24
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_24
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_611:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffa8                 ; __rettmp_25
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffa8(r9), @>fffe(r9)    ; __rettmp_25 ans
        mov   @>fffe(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_782
        sla   r14, 0
__l_782:
        sra   r1, 3
        li    r2, __set_cnst_22
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_783
        inc   r1
__l_783:
        ci    r1, >0000
        jeq   __l_611
__l_780:
        mov   @>fffe(r9), r1            ; ans
        li    r2, >0030
        s     r2, r1
        li    r2, >0008
        mpy   r1, r2
        mov   r3, r1
        mov   @>0004(r9), r2            ; playmove
        mov   r1, *r2
        jmp   __l_785
__l_775:
        movb  @>feb5, r1                ; promflag
        jeq   __l_785
__l_787:
        mov   @>fd60, r1                ; spage
        jne   __l_785
__l_784:
        li    r1, >0020
        mov   @>0004(r9), r2            ; playmove
        mov   r1, *r2
__l_785:
        li    r1, >0180
        mov   @>0004(r9), r2            ; playmove
        mov   @>0004(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_791
__l_790:
        clr   r1
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>fe9e                ;  offset
        li    r1, >0068
        mov   r1, @>fff2(r9)            ; offset1
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jne   __l_795
__l_794:
        li    r1, >0198
        mov   r1, @>fff4(r9)            ; offset2
__l_795:
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jne   __l_807
__l_798:
        li    r1, >01a8
        mov   r1, @>fff4(r9)            ; offset2
        jmp   __l_807
__l_791:
        li    r1, >0030
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>fe9e                ;  offset
        li    r1, >0070
        mov   r1, @>fff2(r9)            ; offset1
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jne   __l_803
__l_802:
        li    r1, >0358
        mov   r1, @>fff4(r9)            ; offset2
__l_803:
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jne   __l_807
__l_806:
        li    r1, >0368
        mov   r1, @>fff4(r9)            ; offset2
__l_807:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fffa(r9), r1            ; qcastleflag
        ci    r1, >0001
        jeq   __l_810
__l_813:
        mov   @>fffc(r9), r1            ; kcastleflag
        ci    r1, >0001
        jeq   __l_810
        b     @__l_811
__l_810:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff6(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff6(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff2(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_811:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

__str_cnst_17 text >0f70726f6d6f7465207061776e20746f    ; promote pawn to
__str_cnst_18 text >07312d20726f6f6b    ; 1- rook
__str_cnst_19 text >09322d206b6e69676874    ; 2- knight
__str_cnst_20 text >09332d20626973686f70    ; 3- bishop
__str_cnst_21 text >08342d20717565656e    ; 4- queen
        even 

; ; Set Constants
__set_cnst_14:
        text >000000000000ff00000000000000000000000000000000000000000000000000
__set_cnst_15:
        text >00ff000000000000000000000000000000000000000000000000000000000000
__set_cnst_16:
        text >0280000000000000000000000000000000000000000000000000000000000000
__set_cnst_22:
        text >000000000000001e000000000000000000000000000000000000000000000000

        bank 5, >7570

; Subroutine: saveboards_32, level: 2
;   fffc      -4  offset: int16
;   fffe      -2  i: int16

saveboards_32:
        ai    r10, >fff6
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        clr   @>fffc(r9)                ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0f6e
        mov   r1, @>fffc(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 5, >7618

; Subroutine: getboards_33, level: 2
;   fffe      -2  offset: int16

getboards_33:
        ai    r10, >fff8
        mov   r10, r12
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        li    r1, >0f6e
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>fffe(r9)                ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 5, >76be

; Subroutine: savemove_34, level: 2
;   fff8      -8  offset: int16
;   fffa      -6  offset1: int16
;   fffc      -4  storebase: int16
;   fffe      -2  storeptr: int16

savemove_34:
        ai    r10, >fff2
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0008
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        li    r1, >0fa0
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        dect  r1                        ; storeptr
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fa2
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; storebase
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>fffa(r9)                ; offset1
        mov   @>fffe(r9), @>fff8(r9)    ; storeptr offset
        mov   @>fff8(r9), r1            ; offset
        ci    r1, >0fef
        jlt   __l_820
        jeq   __l_820
__l_819:
        mov   @>fffc(r9), r1            ; storebase
        inc   r1
        mov   r1, @>fffc(r9)            ; storebase
        clr   @>fffe(r9)                ; storeptr
        clr   @>fff8(r9)                ; offset
__l_820:
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fffa(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdd2                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        ai    r1, >0078
        mov   r1, @>fff8(r9)            ; offset
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd6c                 ; wcastleflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd6e                 ; bcastleflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd86                 ; wrooklflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd88                 ; wrookrflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd8a                 ; brooklflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd8c                 ; brookrflag
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd72                 ; cwarning
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd7a                 ; gamemove
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffc(r9), @>0002(r10)   ; storebase 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fff8(r9), r1            ; offset
        inct  r1
        mov   r1, @>fff8(r9)            ; offset
        mov   r1, @>fffe(r9)            ; storeptr
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0fa0
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        dect  r1                        ; storeptr
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fa2
        mov   r1, @>fff8(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; storebase
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 6, >6060

; Subroutine: initgame_35, level: 2
;   ffda     -38  __rettmp_28: string [8]
;   ffda     -38  __rettmp_29: string [17]
;   ffda     -38  __rettmp_30: int16
;   ffda     -38  __rettmp_31: set of int64
;   fffa      -6  __rettmp_32: boolean
;   ffda     -38  __rettmp_33: string [36]
;   ffda     -38  __rettmp_34: int16
;   ffda     -38  __rettmp_35: set of int64
;   fffa      -6  __rettmp_36: boolean
;   ffda     -38  __rettmp_37: string [22]
;   ffda     -38  __rettmp_38: string [22]
;   ffda     -38  __rettmp_39: string [21]
;   ffda     -38  __rettmp_40: int16
;   ffda     -38  __rettmp_41: set of int64
;   fffa      -6  __rettmp_42: boolean
;   ffda     -38  __rettmp_43: boolean

initgame_35:
        ai    r10, >ffd0
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0026
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  clrscr_22
        clr   @>fd64                    ;  turn
        mov   @>fd64, @>fd66            ; turn  gameside
        li    r1, >0001
        mov   r1, @>fd7a                ;  gamemove
        clr   @>fd6c                    ;  wcastleflag
        clr   @>fd6e                    ;  bcastleflag
        clr   @>fd88                    ;  wrookrflag
        clr   @>fd86                    ;  wrooklflag
        clr   @>fd8c                    ;  brookrflag
        clr   @>fd8a                    ;  brooklflag
        li    r1, >0063
        mov   r1, @>ff3a                ;  lastmove
        clr   @>ff3c                    ;  lastmove .startsq
        clr   @>ff3e                    ;  lastmove .endsq
        clr   @>ff40                    ;  lastmove .link
        li    r1, >0063
        mov   r1, @>ff4a                ;  movestore
        mov   r1, @>ff4c                ;  movestore .startsq
        li    r1, >0063
        mov   r1, @>ff4e                ;  movestore .endsq
        clr   @>fd76                    ;  wmobility
        clr   @>fd78                    ;  bmobility
        clr   @>fd68                    ;  gamepointer
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        li    r1, >0fa0
        mov   r1, @>fe9e                ;  offset
        clr   @>feaa                    ;  offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >feaa                 ; offset1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_23
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_28
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_28
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        li    r1, >0fa2
        mov   r1, @>fe9e                ;  offset
        li    r1, >0018
        mov   r1, @>feaa                ;  offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >feaa                 ; offset1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0016
        mov   r1, @>fd60                ;  spage
        li    r1, >0006
        mov   r1, @>fd62                ;  datasize
        li    r1, >0380
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff4a                 ; movestore
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_24
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_29
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_29
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_823:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_30
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffda(r9), @>fea6        ; __rettmp_30  ans
        mov   @>fea6, r1                ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_829
        sla   r14, 0
__l_829:
        sra   r1, 3
        li    r2, __set_cnst_25
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_830
        inc   r1
__l_830:
        ci    r1, >0000
        jeq   __l_823
__l_827:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fea6, r1                ; ans
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   @>fea6, r1                ; ans
        li    r2, >0030
        s     r2, r1
        mov   r1, @>fd70                ;  ply
        mov   r1, @>fd74                ;  gameply
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_26
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_33
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_33
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_824:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_34
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffda(r9), @>fea6        ; __rettmp_34  ans
        mov   @>fea6, r1                ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_833
        sla   r14, 0
__l_833:
        sra   r1, 3
        li    r2, __set_cnst_27
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_834
        inc   r1
__l_834:
        ci    r1, >0000
        jeq   __l_824
__l_831:
        mov   @>fea6, r1                ; ans
        ci    r1, >0042
        jne   __l_836
__l_835:
        li    r1, >0001
        mov   r1, @>fd7c                ;  humanside
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_28
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_37
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_37
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        jmp   __l_837
__l_836:
        clr   @>fd7c                    ;  humanside
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_29
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_38
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_38
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_837:
        clr   @>fd72                    ;  cwarning
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_30
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_39
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_39
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_825:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_40
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffda(r9), @>fea6        ; __rettmp_40  ans
        mov   @>fea6, r1                ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_841
        sla   r14, 0
__l_841:
        sra   r1, 3
        li    r2, __set_cnst_31
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_842
        inc   r1
__l_842:
        ci    r1, >0000
        jeq   __l_825
__l_839:
        mov   @>fea6, r1                ; ans
        ci    r1, >0059
        jeq   __l_843
        b     @__l_844
__l_843:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6012
        data  enterpos_47
        mov   @>fd64, @>fd66            ; turn  gameside
        clr   @>ff3a                    ;  lastmove
        clr   @>ff3c                    ;  lastmove .startsq
        clr   @>ff3e                    ;  lastmove .endsq
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        li    r1, >ff3a                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_847:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_847
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd66, r1                ; gameside
        jne   __l_849
__l_848:
        li    r1, >0028
        mov   r1, @>fe9e                ;  offset
        jmp   __l_850
__l_849:
        li    r1, >0058
        mov   r1, @>fe9e                ;  offset
__l_850:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd66, r1                ; gameside
        jne   __l_853
__l_852:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_854
__l_853:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_854:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffda                 ; __rettmp_43
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffda(r9), r1            ; __rettmp_43
        jne   __l_845
__l_856:
        li    r1, >0001
        mov   r1, @>fd72                ;  cwarning
        jmp   __l_845
__l_844:
        clr   @>fd64                    ;  turn
        mov   @>fd64, @>fd66            ; turn  gameside
__l_845:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_23 text >085354415254494e47    ; STARTING
__str_cnst_24 text >11656e74657220706c793a205b322d355d20    ; enter ply: [2-5] 
__str_cnst_26 text >2473656c656374207369646520746f20706c61793a205b775d686974652f5b625d6c61636b    ; select side to play: [w]hite/[b]lack
__str_cnst_28 text >162a2a2a706c6179696e6720617320626c61636b2a2a2a    ; ***playing as black***
__str_cnst_29 text >162a2a2a706c6179696e672061732077686974652a2a2a    ; ***playing as white***
__str_cnst_30 text >15656e74657220706f736974696f6e3f2028792f6e29    ; enter position? (y/n)
        even 

; ; Set Constants
__set_cnst_25:
        text >000000000000003c000000000000000000000000000000000000000000000000
__set_cnst_27:
        text >0000000000000000000400800000000000000000000000000000000000000000
__set_cnst_31:
        text >0000000000000000400002000000000000000000000000000000000000000000

        bank 6, >67b4

; Subroutine: check3rep_36, level: 2
;   ffe2     -30  __rettmp_44: boolean
;   ffe2     -30  __rettmp_45: boolean
;   ffe2     -30  __rettmp_46: string [26]
;   ffe2     -30  __rettmp_47: int16
;   fffe      -2  $i: int16

check3rep_36:
        ai    r10, >ffda
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >001e
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd7a, r1                ; gamemove
        ci    r1, >0006
        jgt   __l_864
        b     @__l_865
__l_864:
        li    r1, >0001
        movb  @>8303, @>feb6            ; low R1 repflag
        li    r1, >0016
        mov   r1, @>fd60                ;  spage
        mov   @>fd68, @>feb0            ; gamepointer  temppointer
        li    r1, >0001
        mov   r1, @>fe98                ;  i
        li    r1, >0004
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_861
__l_860:
        inc   @>fe98                    ; i
__l_861:
        mov   @>feb0, r1                ; temppointer
        li    r2, >0008
        s     r2, r1
        mov   r1, @>feb0                ;  temppointer
        li    r1, >0380
        a     @>feb0, r1                ; temppointer 
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff4a                 ; movestore
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0380
        a     @>feb0, r1                ; temppointer 
        li    r2, >0020
        s     r2, r1
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff52                 ; tempmove
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        li    r1, >0004
        mov   r1, @>0006(r10)
        li    r1, >ff52                 ; tempmove
        mov   r1, @>0004(r10)
        li    r1, >ff4a                 ; movestore
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe2                 ; __rettmp_44
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  compareword
        movb  @>ffe2(r9), r1            ; __rettmp_44
        jne   __l_869
__l_868:
        clr   r1
        movb  @>8303, @>feb6            ; low R1 repflag
__l_869:
        li    r1, >0380
        a     @>feb0, r1                ; temppointer 
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fe9e                ;  offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >ff52                 ; tempmove
        mov   r1, @>0008(r10)
        mov   @>fe9e, @>0006(r10)       ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        li    r1, >0004
        mov   r1, @>0006(r10)
        li    r1, >ff52                 ; tempmove
        mov   r1, @>0004(r10)
        li    r1, >ff4a                 ; movestore
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe2                 ; __rettmp_45
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  compareword
        movb  @>ffe2(r9), r1            ; __rettmp_45
        jne   __l_873
__l_872:
        clr   r1
        movb  @>8303, @>feb6            ; low R1 repflag
__l_873:
        c     @>fe98, @>fffe(r9)        ; i $i 
        jeq   __l_876
        b     @__l_860
__l_876:
        movb  @>feb6, r1                ; repflag
        jne   __l_878
        b     @__l_865
__l_878:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_32
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe2                 ; __rettmp_46
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe2                 ; __rettmp_46
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe2                 ; __rettmp_47
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffe2(r9), @>fea6        ; __rettmp_47  ans
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fe98                 ; i
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  utility_52
__l_865:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_32 text >1a6472617720627920332d666f6c642072657065746974696f6e21    ; draw by 3-fold repetition!
        even 

        bank 6, >6a98

; Subroutine: movegen_37, level: 2
;   fefc    -260  __rettmp_338: string [10]
;   fefc    -260  __rettmp_339: int16
;   fefc    -260  __rettmp_340: boolean
;   fefc    -260  __rettmp_341: int16
;   ff04    -252  __rettmp_342: set of int64
;   ff24    -220  __rettmp_343: boolean
;   fefc    -260  __rettmp_344: set of int64
;   ff1c    -228  __rettmp_345: boolean
;   fefc    -260  __rettmp_346: int16
;   fefc    -260  __rettmp_347: boolean
;   fefc    -260  __rettmp_348: boolean
;   0004       4  lastmove: record
;   000c      12  var finalmove: reference to record
;   000e      14  var score: reference to int16
;   0010      16  aval: int16
;   0012      18  bval: int16
;   0014      20  cmoveflag: int16
;   ff26    -218  i: int16
;   ff28    -216  j: int16
;   ff2a    -214  k: int16
;   ff2c    -212  l: int16
;   ff2e    -210  n: int16
;   ff30    -208  offset: int16
;   ff32    -206  initoffset: int16
;   ff34    -204  bestscore: int16
;   ff36    -202  sideoffset: int16
;   ff38    -200  offset1: int16
;   ff3a    -198  offset2: int16
;   ff3c    -196  offset3: int16
;   ff3e    -194  offset4: int16
;   ff40    -192  wcheckflag: int16
;   ff42    -190  bcheckflag: int16
;   ff44    -188  offset7: int16
;   ff46    -186  switchflag: int16
;   ff48    -184  offset5: int16
;   ff4a    -182  offset6: int16
;   ff4c    -180  attackflag: int16
;   ff4e    -178  evalscore: int16
;   ff50    -176  pruneflag: int16
;   ff52    -174  spage2: int16
;   ff54    -172  mateflag: int16
;   ff56    -170  alpha: int16
;   ff58    -168  beta: int16
;   ff5a    -166  foundflag: boolean
;   ff5c    -164  bestmove: record
;   ff64    -156  tempmove: record
;   ff6c    -148  movelist: pointer to record (moverec)
;   ff6e    -146  attacklist: pointer to record (moverec)
;   ff70    -144  tailindex: pointer to record (moverec)
;   ff72    -142  attackindex: pointer to record (moverec)
;   ff74    -140  currentmove: pointer to record (moverec)
;   ff76    -138  bit8: array [subrange (0..3) of int64] of int16
;   ff7e    -130  bit9: array [subrange (0..3) of int64] of int16
;   ff86    -122  buffer: array [subrange (0..59) of int64] of int16
;   fffe      -2  heap: pointer to void

movegen_37:
        ai    r10, >fef0
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0104
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; heap
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  mark_83
        mov   @>0010(r9), @>ff56(r9)    ; aval alpha
        mov   @>0012(r9), @>ff58(r9)    ; bval beta
        mov   @>fd70, r1                ; ply
        ci    r1, >0002
        jgt   __l_889
__l_888:
        mov   @>fd64, r1                ; turn
        jne   __l_893
__l_892:
        clr   @>fd76                    ;  wmobility
        jmp   __l_889
__l_893:
        clr   @>fd78                    ;  bmobility
__l_889:
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0015
        mov   r1, @>fd60                ;  spage
        mov   @>fd64, r1                ; turn
        jne   __l_897
__l_896:
        li    r1, >0f6e
        mov   r1, @>ff32(r9)            ; initoffset
        li    r1, >0fd6
        mov   r1, @>ff36(r9)            ; sideoffset
        jmp   __l_898
__l_897:
        li    r1, >0f9e
        mov   r1, @>ff32(r9)            ; initoffset
        li    r1, >0fde
        mov   r1, @>ff36(r9)            ; sideoffset
__l_898:
        li    r1, >0f00
        mov   r1, @>ff38(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff6c                 ; movelist
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff6e                 ; attacklist
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        clr   r1
        mov   @>ff6c(r9), r2            ; movelist
        mov   r1, @>0006(r2)
        clr   r1
        mov   @>ff6e(r9), r2            ; attacklist
        mov   r1, @>0006(r2)
        mov   @>ff6c(r9), @>ff70(r9)    ; movelist tailindex
        mov   @>ff6e(r9), @>ff72(r9)    ; attacklist attackindex
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   @>ff70(r9), @>0008(r10)   ; tailindex 
        mov   @>ff72(r9), @>0006(r10)   ; attackindex 
        mov   r9, r1
        ai    r1, >0004                 ; lastmove
        mov   r1, @>0004(r10)
        mov   @>ff36(r9), @>0002(r10)   ; sideoffset 
        mov   @>ff32(r9), *r10          ; initoffset 
        bl    @__far_call_1
        data  >600e
        data  loopallpieces_42
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600e
        data  checkbackrowinterposing_38
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >0004                 ; lastmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >600e
        data  checkownbackrowattack_41
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >600e
        data  checkrookmissing_39
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff6c                 ; movelist
        mov   r1, *r10
        bl    @__far_call_1
        data  >600e
        data  checkcastling_40
        mov   @>fd64, r1                ; turn
        jne   __l_901
__l_900:
        li    r1, >b1e0
        mov   r1, @>ff34(r9)            ; bestscore
        jmp   __l_902
__l_901:
        li    r1, >4e20
        mov   r1, @>ff34(r9)            ; bestscore
__l_902:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7e                 ; bit9
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        mov   @>ff6e(r9), @>ff74(r9)    ; attacklist currentmove
        li    r1, >0001
        mov   r1, @>ff4c(r9)            ; attackflag
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), r1
        jne   __l_905
__l_904:
        clr   @>ff4c(r9)                ; attackflag
        mov   @>ff6c(r9), @>ff74(r9)    ; movelist currentmove
__l_905:
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), r1
        jeq   __l_912
        b     @__l_909
__l_912:
        mov   @>ff4c(r9), r1            ; attackflag
        jeq   __l_911
        b     @__l_909
__l_911:
        c     @>fd70, @>fd74            ; ply gameply 
        jeq   __l_908
        b     @__l_909
__l_908:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_33
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_338
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_338
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_339
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fefc(r9), @>ff26(r9)    ; __rettmp_339 i
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff46                 ; switchflag
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  utility_52
        b     @__l_887
__l_909:
        li    r1, >0f6e
        mov   r1, @>ff30(r9)            ; offset
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0740
        mov   @>fd70, r2                ; ply
        dec   r2
        li    r3, >0078
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff30(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
__l_885:
        li    r1, >0063
        mov   r1, @>ff64(r9)            ; tempmove
l_1_882:
        mov   @>fd64, r1                ; turn
        jne   __l_917
__l_916:
        li    r1, >0fd6
        mov   r1, @>ff38(r9)            ; offset1
        li    r1, >0f9e
        mov   r1, @>ff48(r9)            ; offset5
        li    r1, >0fde
        mov   r1, @>ff4a(r9)            ; offset6
        li    r1, >0f6e
        mov   @>ff74(r9), r2            ; currentmove
        a     *r2, r1                   ;  
        mov   r1, @>ff30(r9)            ; offset
        jmp   __l_918
__l_917:
        li    r1, >0fde
        mov   r1, @>ff38(r9)            ; offset1
        li    r1, >0f6e
        mov   r1, @>ff48(r9)            ; offset5
        li    r1, >0fd6
        mov   r1, @>ff4a(r9)            ; offset6
        li    r1, >0f9e
        mov   @>ff74(r9), r2            ; currentmove
        a     *r2, r1                   ;  
        mov   r1, @>ff30(r9)            ; offset
__l_918:
        li    r1, >0fce
        mov   r1, @>ff3e(r9)            ; offset4
        li    r1, >0180
        mov   @>ff74(r9), r2            ; currentmove
        mov   @>0002(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff3a(r9)            ; offset2
        li    r1, >0180
        mov   @>ff74(r9), r2            ; currentmove
        mov   @>0004(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff3c(r9)            ; offset3
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff3a(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff4c(r9), r1            ; attackflag
        ci    r1, >0001
        jeq   __l_920
        b     @__l_921
__l_920:
        clr   r1
        movb  @>8303, @>ff5a(r9)        ; foundflag
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff3c(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >fd9a                 ; bit2
        li    r2, >fda2                 ; bit3
        li    r3, >0008
__l_924:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_924
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        clr   @>ff28(r9)                ; j
__l_886:
        mov   @>ff48(r9), r1            ; offset5
        a     @>ff28(r9), r1            ; j 
        mov   r1, @>ff3a(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3a(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_340
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fefc(r9), r1            ; __rettmp_340
        jne   __l_926
__l_925:
        li    r1, >0001
        movb  @>8303, @>ff5a(r9)        ; foundflag
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, @>ff2c(r9)           ;  l
        mov   @>ff28(r9), @>ff2e(r9)    ; j n
__l_926:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3a(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff28(r9), r1            ; j
        ai    r1, >0008
        mov   r1, @>ff28(r9)            ; j
        movb  @>ff5a(r9), r1            ; foundflag
        jne   __l_929
__l_930:
        mov   @>ff28(r9), r1            ; j
        ci    r1, >0028
        jgt   __l_929
        b     @__l_886
__l_929:
        movb  @>ff5a(r9), r1            ; foundflag
        jeq   __l_936
        b     @__l_934
__l_936:
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, r1
        jeq   __l_933
        b     @__l_934
__l_933:
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0002(r1), r1
        mov   @>ff74(r9), r2            ; currentmove
        s     @>0004(r2), r1            ;  
        abs   r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_943
        sla   r14, 0
__l_943:
        sra   r1, 3
        li    r2, __set_cnst_34
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_944
        inc   r1
__l_944:
        ci    r1, >0000
        jne   __l_939
        b     @__l_934
__l_939:
        mov   @>fd64, r1                ; turn
        jne   __l_946
__l_945:
        li    r1, >0180
        mov   @>ff74(r9), r2            ; currentmove
        mov   @>0004(r2), r2
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff44(r9)            ; offset7
        jmp   __l_947
__l_946:
        li    r1, >0180
        mov   @>ff74(r9), r2            ; currentmove
        mov   @>0004(r2), r2
        ai    r2, >0008
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff44(r9)            ; offset7
__l_947:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ff44(r9), @>0006(r10)   ; offset7 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fce
        mov   r1, @>ff48(r9)            ; offset5
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jne   __l_950
__l_949:
        li    r1, >0fde
        mov   r1, @>ff48(r9)            ; offset5
        jmp   __l_951
__l_950:
        li    r1, >0fd6
        mov   r1, @>ff48(r9)            ; offset5
__l_951:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff48(r9), @>0006(r10)   ; offset5 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_934:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff4a(r9), @>0006(r10)   ; offset6 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff4a(r9), @>0006(r10)   ; offset6 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_921:
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, r1
        jne   __l_954
__l_956:
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0004(r1), r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_959
        sla   r14, 0
__l_959:
        sra   r1, 3
        li    r2, __set_cnst_35
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_960
        inc   r1
__l_960:
        ci    r1, >0000
        jeq   __l_954
__l_953:
        mov   @>fd64, r1                ; turn
        jne   __l_962
__l_961:
        li    r1, >0f8e
        mov   r1, @>ff30(r9)            ; offset
        jmp   __l_954
__l_962:
        li    r1, >0fbe
        mov   r1, @>ff30(r9)            ; offset
__l_954:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff3c(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff3e(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff4c(r9), r1            ; attackflag
        jne   __l_966
__l_968:
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, r1
        ci    r1, >0028
        jne   __l_966
__l_965:
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0002(r1), r1
        mov   @>ff74(r9), r2            ; currentmove
        s     @>0004(r2), r1            ;  
        abs   r1
        ci    r1, >0002
        jne   __l_966
__l_971:
        c     @>fd70, @>fd74            ; ply gameply 
        jne   __l_976
__l_975:
        li    r1, >0001
        mov   r1, @>0014(r9)            ; cmoveflag
__l_976:
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, @>ff64(r9)           ;  tempmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0002(r1), @>ff66(r9)    ;  tempmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0004(r1), @>ff68(r9)    ;  tempmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), @>ff74(r9)    ;  currentmove
        b     @l_1_882
__l_966:
        mov   @>ff64(r9), r1            ; tempmove
        ci    r1, >0063
        jne   __l_980
__l_979:
        mov   @>ff74(r9), r1            ; currentmove
        mov   *r1, @>ff64(r9)           ;  tempmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0002(r1), @>ff66(r9)    ;  tempmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0004(r1), @>ff68(r9)    ;  tempmove
__l_980:
        mov   @>fd72, r1                ; cwarning
        ci    r1, >0001
        jeq   __l_986
        b     @__l_984
__l_986:
        c     @>fd70, @>fd74            ; ply gameply 
        jeq   __l_983
        b     @__l_984
__l_983:
        clr   @>ff50(r9)                ; pruneflag
        clr   @>ff30(r9)                ; offset
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0308
        mov   r1, @>ff30(r9)            ; offset
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>ff30(r9)                ; offset
        li    r1, >0f6e
        mov   r1, @>ff38(r9)            ; offset1
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff38(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   r9, r1
        ai    r1, >0004                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_989:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_989
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        li    r1, >0308
        mov   r1, @>ff30(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        clr   @>ff30(r9)                ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>fd64, r1                ; turn
        jne   __l_991
__l_990:
        li    r1, >0f96
        mov   r1, @>ff30(r9)            ; offset
        jmp   __l_992
__l_991:
        li    r1, >0fc6
        mov   r1, @>ff30(r9)            ; offset
__l_992:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_347
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fefc(r9), r1            ; __rettmp_347
        jne   __l_984
__l_994:
        mov   @>fd64, r1                ; turn
        jne   __l_999
__l_998:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_1000
__l_999:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1000:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fefc                 ; __rettmp_348
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fefc(r9), r1            ; __rettmp_348
        jne   __l_984
__l_1002:
        b     @__l_1078
__l_984:
        mov   @>fd70, r1                ; ply
        ci    r1, >0001
        jeq   __l_1006
        b     @__l_1007
__l_1006:
        inc   @>fd90                    ; movenumlo
        mov   @>fd90, r1                ; movenumlo
        ci    r1, >03e8
        jne   __l_1011
__l_1010:
        clr   @>fd90                    ;  movenumlo
        inc   @>fd8e                    ; movenumhi
__l_1011:
        ai    r10, >ffe4
        mov   @>7ffe, @>001a(r10)
        mov   r9, r1
        ai    r1, >ff64                 ; tempmove
        mov   r10, r2
        ai    r2, >0012
        li    r3, >0008
__l_1014:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1014
        mov   r9, r1
        ai    r1, >0004                 ; lastmove
        mov   r10, r2
        ai    r2, >000a
        li    r3, >0008
__l_1015:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1015
        mov   @>ff2e(r9), @>0008(r10)   ; n 
        mov   @>ff2c(r9), @>0006(r10)   ; l 
        mov   @>ff4c(r9), @>0004(r10)   ; attackflag 
        mov   @>0014(r9), @>0002(r10)   ; cmoveflag 
        mov   r9, r1
        ai    r1, >ff4e                 ; evalscore
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  evaluate_56
        clr   @>ff50(r9)                ; pruneflag
        mov   @>fd64, r1                ; turn
        jne   __l_1017
__l_1016:
        c     @>ff4e(r9), @>ff34(r9)    ; evalscore bestscore 
        jlt   __l_1021
__l_1020:
        mov   @>ff4e(r9), @>ff34(r9)    ; evalscore bestscore
        mov   @>ff64(r9), @>ff5c(r9)    ; tempmove bestmove
        mov   @>ff66(r9), @>ff5e(r9)    ; tempmove bestmove
        mov   @>ff68(r9), @>ff60(r9)    ; tempmove bestmove
__l_1021:
        c     @>ff34(r9), @>ff58(r9)    ; bestscore beta 
        jlt   __l_1025
        jeq   __l_1025
__l_1024:
        li    r1, >0001
        mov   r1, @>ff50(r9)            ; pruneflag
        jmp   __l_1041
__l_1025:
        c     @>ff34(r9), @>ff56(r9)    ; bestscore alpha 
        jlt   __l_1041
        jeq   __l_1041
__l_1028:
        mov   @>ff34(r9), @>ff56(r9)    ; bestscore alpha
        jmp   __l_1041
__l_1017:
        c     @>ff4e(r9), @>ff34(r9)    ; evalscore bestscore 
        jgt   __l_1033
__l_1032:
        mov   @>ff4e(r9), @>ff34(r9)    ; evalscore bestscore
        mov   @>ff64(r9), @>ff5c(r9)    ; tempmove bestmove
        mov   @>ff66(r9), @>ff5e(r9)    ; tempmove bestmove
        mov   @>ff68(r9), @>ff60(r9)    ; tempmove bestmove
__l_1033:
        c     @>ff34(r9), @>ff56(r9)    ; bestscore alpha 
        jgt   __l_1037
        jeq   __l_1037
__l_1036:
        li    r1, >0001
        mov   r1, @>ff50(r9)            ; pruneflag
        b     @__l_1078
__l_1037:
        c     @>ff34(r9), @>ff58(r9)    ; bestscore beta 
        jgt   __l_1041
        jeq   __l_1041
__l_1040:
        mov   @>ff34(r9), @>ff58(r9)    ; bestscore beta
        b     @__l_1078
__l_1041:
        b     @__l_1078
__l_1007:
        mov   @>fd70, r1                ; ply
        dec   r1
        mov   r1, @>fd70                ;  ply
        mov   @>fd64, r1                ; turn
        jne   __l_1045
__l_1044:
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
        jmp   __l_1046
__l_1045:
        clr   @>fd64                    ;  turn
__l_1046:
        ai    r10, >ffec
        mov   @>7ffe, @>0012(r10)
        mov   @>0014(r9), @>0010(r10)   ; cmoveflag 
        mov   @>ff58(r9), @>000e(r10)   ; beta 
        mov   @>ff56(r9), @>000c(r10)   ; alpha 
        mov   @>000e(r9), @>000a(r10)   ; score 
        mov   @>000c(r9), @>0008(r10)   ; finalmove 
        mov   r9, r1
        ai    r1, >ff64                 ; tempmove
        mov   r10, r2
        li    r3, >0008
__l_1048:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1048
        bl    @__far_call_1
        data  >600c
        data  movegen_37
        c     @>fd70, @>fd74            ; ply gameply 
        jne   __l_1050
__l_1049:
        clr   @>0014(r9)                ; cmoveflag
__l_1050:
        clr   @>ff50(r9)                ; pruneflag
        mov   @>fd64, r1                ; turn
        jne   __l_1054
__l_1053:
        mov   @>000e(r9), r1            ; score
        c     *r1, @>ff34(r9)           ;  bestscore 
        jlt   __l_1058
__l_1057:
        mov   @>000e(r9), r1            ; score
        mov   *r1, @>ff34(r9)           ;  bestscore
        mov   @>ff64(r9), @>ff5c(r9)    ; tempmove bestmove
        mov   @>ff66(r9), @>ff5e(r9)    ; tempmove bestmove
        mov   @>ff68(r9), @>ff60(r9)    ; tempmove bestmove
__l_1058:
        c     @>ff34(r9), @>ff58(r9)    ; bestscore beta 
        jlt   __l_1062
        jeq   __l_1062
__l_1061:
        li    r1, >0001
        mov   r1, @>ff50(r9)            ; pruneflag
        jmp   __l_1078
__l_1062:
        c     @>ff34(r9), @>ff56(r9)    ; bestscore alpha 
        jlt   __l_1078
        jeq   __l_1078
__l_1065:
        mov   @>ff34(r9), @>ff56(r9)    ; bestscore alpha
        jmp   __l_1078
__l_1054:
        mov   @>000e(r9), r1            ; score
        c     *r1, @>ff34(r9)           ;  bestscore 
        jgt   __l_1070
__l_1069:
        mov   @>000e(r9), r1            ; score
        mov   *r1, @>ff34(r9)           ;  bestscore
        mov   @>ff64(r9), @>ff5c(r9)    ; tempmove bestmove
        mov   @>ff66(r9), @>ff5e(r9)    ; tempmove bestmove
        mov   @>ff68(r9), @>ff60(r9)    ; tempmove bestmove
__l_1070:
        c     @>ff34(r9), @>ff56(r9)    ; bestscore alpha 
        jgt   __l_1074
        jeq   __l_1074
__l_1073:
        li    r1, >0001
        mov   r1, @>ff50(r9)            ; pruneflag
        jmp   __l_1078
__l_1074:
        c     @>ff34(r9), @>ff58(r9)    ; bestscore beta 
        jgt   __l_1078
        jeq   __l_1078
__l_1077:
        mov   @>ff34(r9), @>ff58(r9)    ; bestscore beta
__l_1078:
        li    r1, >0740
        mov   @>fd70, r2                ; ply
        dec   r2
        li    r3, >0078
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff30(r9)            ; offset
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0f6e
        mov   r1, @>ff30(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff86                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff30(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), @>ff74(r9)    ;  currentmove
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), r1
        jne   __l_1082
__l_1084:
        mov   @>ff4c(r9), r1            ; attackflag
        ci    r1, >0001
        jne   __l_1082
__l_1081:
        clr   @>ff4c(r9)                ; attackflag
        mov   @>ff6c(r9), @>ff74(r9)    ; movelist currentmove
__l_1082:
        mov   @>ff74(r9), r1            ; currentmove
        mov   @>0006(r1), r1
        jeq   __l_1087
__l_1088:
        mov   @>ff50(r9), r1            ; pruneflag
        ci    r1, >0001
        jeq   __l_1087
        b     @__l_885
__l_1087:
        mov   r9, r1
        ai    r1, >ff5c                 ; bestmove
        mov   @>000c(r9), r2            ; finalmove
        li    r3, >0008
__l_1091:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1091
        mov   @>ff34(r9), r1            ; bestscore
        mov   @>000e(r9), r2            ; score
        mov   r1, *r2
        mov   @>fd70, r1                ; ply
        inc   r1
        mov   r1, @>fd70                ;  ply
        mov   @>fd64, r1                ; turn
        jne   __l_1093
__l_1092:
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
        jmp   __l_1094
__l_1093:
        clr   @>fd64                    ;  turn
__l_1094:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   @>fffe(r9), *r10          ; heap 
        bl    @__far_call_1
        data  >601a
        data  release_84
__l_887:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0012
        b     @__far_ret

__str_cnst_33 text >0a7374616c656d61746521    ; stalemate!
        even 

; ; Set Constants
__set_cnst_34:
        text >0280000000000000000000000000000000000000000000000000000000000000
__set_cnst_35:
        text >00ff00000000ff00000000000000000000000000000000000000000000000000

        bank 7, >6060

; Subroutine: checkbackrowinterposing_38, level: 2
;   fff8      -8  __rettmp_313: boolean
;   fff8      -8  __rettmp_314: boolean
;   fff8      -8  __rettmp_315: boolean
;   fff8      -8  __rettmp_316: boolean
;   fffa      -6  offset: int16
;   fffc      -4  offset1: int16
;   fffe      -2  offset2: int16

checkbackrowinterposing_38:
        ai    r10, >fff2
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0008
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd64, r1                ; turn
        jne   __l_1100
__l_1101:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_1097
__l_1100:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1104
        b     @__l_1098
__l_1104:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_1097
        b     @__l_1098
__l_1097:
        li    r1, >0060
        mov   r1, @>fffa(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fffa(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jeq   __l_1107
        b     @__l_1108
__l_1107:
        li    r1, >0f4e
        mov   r1, @>fffc(r9)            ; offset1
        li    r1, >0f56
        mov   r1, @>fffe(r9)            ; offset2
        mov   @>fd7e, r1                ; wraflag
        jne   __l_1112
__l_1114:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_1112
__l_1111:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff8                 ; __rettmp_313
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fff8(r9), r1            ; __rettmp_313
        jne   __l_1112
__l_1117:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
__l_1112:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_1122
__l_1124:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_1122
__l_1121:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff8                 ; __rettmp_314
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fff8(r9), r1            ; __rettmp_314
        jne   __l_1122
__l_1127:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_1122:
        b     @__l_1098
__l_1108:
        li    r1, >0f5e
        mov   r1, @>fffc(r9)            ; offset1
        li    r1, >0f66
        mov   r1, @>fffe(r9)            ; offset2
        mov   @>fd82, r1                ; braflag
        jne   __l_1132
__l_1134:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_1132
__l_1131:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff8                 ; __rettmp_315
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fff8(r9), r1            ; __rettmp_315
        jne   __l_1132
__l_1137:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_1132:
        mov   @>fd84, r1                ; blaflag
        jne   __l_1098
__l_1144:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_1098
__l_1141:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff8                 ; __rettmp_316
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fff8(r9), r1            ; __rettmp_316
        jne   __l_1098
__l_1147:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_1098:
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 7, >6354

; Subroutine: checkrookmissing_39, level: 2
;   fffc      -4  __rettmp_317: boolean
;   fffc      -4  __rettmp_318: boolean
;   fffc      -4  __rettmp_319: boolean
;   fffc      -4  __rettmp_320: boolean
;   fffe      -2  offset: int16

checkrookmissing_39:
        ai    r10, >fff6
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd64, r1                ; turn
        jeq   __l_1152
        b     @__l_1153
__l_1152:
        li    r1, >0f76
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0180
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_317
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffc(r9), r1            ; __rettmp_317
        jeq   __l_1157
__l_1156:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_1157:
        li    r1, >01b8
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_318
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffc(r9), r1            ; __rettmp_318
        jeq   __l_1161
__l_1160:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
        b     @__l_1169
__l_1161:
        b     @__l_1169
__l_1153:
        li    r1, >0fa6
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0340
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_319
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffc(r9), r1            ; __rettmp_319
        jeq   __l_1165
__l_1164:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_1165:
        li    r1, >0378
        mov   r1, @>fffe(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_320
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffc(r9), r1            ; __rettmp_320
        jeq   __l_1169
__l_1168:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_1169:
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 7, >6642

; Subroutine: checkcastling_40, level: 2
;   0004       4  var movelist: reference to pointer to record (moverec)
;   fffe      -2  currentmove: pointer to record (moverec)

checkcastling_40:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_1176
        b     @__l_1174
__l_1176:
        mov   @>fd64, r1                ; turn
        jeq   __l_1173
        b     @__l_1174
__l_1173:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_1180
__l_1182:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_1180
__l_1179:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0008
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        clr   r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >0003
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0028
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >0004
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >0002
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
__l_1180:
        mov   @>fd7e, r1                ; wraflag
        jeq   __l_1188
        b     @__l_1192
__l_1188:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_1186
__l_1185:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0008
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >0007
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >0005
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0028
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >0004
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >0006
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
        b     @__l_1192
__l_1186:
        b     @__l_1192
__l_1174:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_1194
        b     @__l_1192
__l_1194:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1191
        b     @__l_1192
__l_1191:
        mov   @>fd84, r1                ; blaflag
        jne   __l_1198
__l_1200:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_1198
__l_1197:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0008
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >0038
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >003b
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0028
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >003c
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >003a
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
__l_1198:
        mov   @>fd82, r1                ; braflag
        jne   __l_1192
__l_1206:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_1192
__l_1203:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0008
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >003f
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >003d
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        li    r1, >0028
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, *r2
        li    r1, >003c
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0002(r2)
        li    r1, >003e
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0004(r2)
        mov   @>0004(r9), r1            ; movelist
        mov   *r1, r1
        mov   @>fffe(r9), r2            ; currentmove
        mov   r1, @>0006(r2)
        mov   @>fffe(r9), r1            ; currentmove
        mov   @>0004(r9), r2            ; movelist
        mov   r1, *r2
__l_1192:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 7, >69dc

; Subroutine: checkownbackrowattack_41, level: 2
;   fffa      -6  __rettmp_321: boolean
;   fffa      -6  __rettmp_322: boolean
;   fffa      -6  __rettmp_323: boolean
;   fffa      -6  __rettmp_324: boolean
;   0004       4  var lastmove: reference to record
;   fffc      -4  offset1: int16
;   fffe      -2  offset2: int16

checkownbackrowattack_41:
        ai    r10, >fff0
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd64, r1                ; turn
        jne   __l_1213
__l_1214:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_1210
__l_1213:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1217
        b     @__l_1211
__l_1217:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_1210
        b     @__l_1211
__l_1210:
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   @>0004(r9), r1            ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_1220:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1220
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd64, r1                ; turn
        jeq   __l_1221
        b     @__l_1222
__l_1221:
        li    r1, >0f36
        mov   r1, @>fffc(r9)            ; offset1
        li    r1, >0f2e
        mov   r1, @>fffe(r9)            ; offset2
        mov   @>fd7e, r1                ; wraflag
        jne   __l_1226
__l_1228:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_1226
__l_1225:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_321
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffa(r9), r1            ; __rettmp_321
        jne   __l_1226
__l_1231:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
__l_1226:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_1236
__l_1238:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_1236
__l_1235:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_322
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffa(r9), r1            ; __rettmp_322
        jne   __l_1236
__l_1241:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_1236:
        b     @__l_1211
__l_1222:
        li    r1, >0f46
        mov   r1, @>fffc(r9)            ; offset1
        li    r1, >0f3e
        mov   r1, @>fffe(r9)            ; offset2
        mov   @>fd82, r1                ; braflag
        jne   __l_1246
__l_1248:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_1246
__l_1245:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_323
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffa(r9), r1            ; __rettmp_323
        jne   __l_1246
__l_1251:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_1246:
        mov   @>fd84, r1                ; blaflag
        jne   __l_1211
__l_1258:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_1211
__l_1255:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffe(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_324
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fffa(r9), r1            ; __rettmp_324
        jne   __l_1211
__l_1261:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_1211:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 7, >6cd4

; Subroutine: loopallpieces_42, level: 2
;   fe8a    -374  __rettmp_325: boolean
;   fe8a    -374  __rettmp_326: set of int64
;   feaa    -342  __rettmp_327: boolean
;   feb2    -334  __rettmp_328: set of int64
;   fed2    -302  __rettmp_329: boolean
;   fe8a    -374  __rettmp_330: int16
;   fe8a    -374  __rettmp_331: boolean
;   fe8a    -374  __rettmp_332: set of int64
;   feaa    -342  __rettmp_333: boolean
;   fe8a    -374  __rettmp_334: set of int64
;   feaa    -342  __rettmp_335: boolean
;   fe8a    -374  __rettmp_336: boolean
;   fe8a    -374  __rettmp_337: boolean
;   0004       4  initoffset: int16
;   0006       6  sideoffset: int16
;   0008       8  var lastmove: reference to record
;   000a      10  attackindex: pointer to record (moverec)
;   000c      12  tailindex: pointer to record (moverec)
;   fed4    -300  j: int16
;   fed6    -298  k: int16
;   fed8    -296  l: int16
;   feda    -294  n: int16
;   fedc    -292  offset: int16
;   fede    -290  offset1: int16
;   fee0    -288  offset2: int16
;   fee2    -286  offset4: int16
;   fee4    -284  ploc: int16
;   fee6    -282  epcapflag: int16
;   fee8    -280  posarray: array [subrange (0..64) of int64] of int16
;   ff6a    -150  movearray: array [subrange (0..64) of int64] of int16
;   ffec     -20  bit8: array [subrange (0..3) of int64] of int16
;   fff4     -12  bit9: array [subrange (0..3) of int64] of int16
;   fffc      -4  currentmove: pointer to record (moverec)
;   fffe      -2  $k: int16

loopallpieces_42:
        ai    r10, >fe7e
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0176
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>fed4(r9)                ; j
__l_1266:
        mov   @>0004(r9), r1            ; initoffset
        a     @>fed4(r9), r1            ; j 
        mov   r1, @>fedc(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fedc(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fe8a                 ; __rettmp_325
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fe8a(r9), r1            ; __rettmp_325
        jeq   __l_1283
        b     @__l_1284
__l_1283:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >fee8                 ; posarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>fed8(r9)            ; l
__l_1267:
        mov   r9, r1
        ai    r1, >fee8                 ; posarray
        mov   @>fed8(r9), r2            ; l
        sla   r2, 1
        a     r2, r1
        mov   *r1, @>fee4(r9)           ;  ploc
        mov   r9, r1
        ai    r1, >fee8                 ; posarray
        mov   @>fed8(r9), r2            ; l
        sla   r2, 1
        a     r2, r1
        mov   *r1, r1
        li    r2, >0008
        mpy   r1, r2
        mov   r3, @>fedc(r9)            ;  offset
        mov   @>fed4(r9), r1            ; j
; no-opt
        jeq   __c_1268
        ai    r1, >fff8
        jeq   __c_1269
        ai    r1, >fff8
        jeq   __c_1270
        ai    r1, >fff8
        jeq   __c_1271
        ai    r1, >fff8
        jeq   __c_1272
        ai    r1, >fff8
        jne   __l_1287
        jmp   __c_1273
__c_1268:
        mov   @>fd64, r1                ; turn
        jne   __l_1295
__l_1294:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0380
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1287
__l_1295:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0540
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1287
__c_1269:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0d00
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1287
__c_1270:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0900
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1287
__c_1271:
        mov   @>fedc(r9), @>fede(r9)    ; offset offset1
        jmp   __l_1287
__c_1272:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0b00
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1287
__c_1273:
        mov   @>fedc(r9), r1            ; offset
        ai    r1, >0700
        mov   r1, @>fede(r9)            ; offset1
__l_1287:
        mov   @>fed4(r9), r1            ; j
        ci    r1, >0018
        jne   __l_1299
__l_1298:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        jmp   __l_1300
__l_1299:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_1300:
        mov   @>fed4(r9), r1            ; j
        jeq   __l_1302
        b     @__l_1303
__l_1302:
        clr   @>fee6(r9)                ; epcapflag
        li    r1, >0fce
        mov   r1, @>fede(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>fd64, r1                ; turn
        jne   __l_1307
__l_1306:
        li    r1, >0fde
        mov   r1, @>fede(r9)            ; offset1
        li    r1, >0200
        a     @>fedc(r9), r1            ; offset 
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fee0(r9)            ; offset2
        jmp   __l_1308
__l_1307:
        li    r1, >0fd6
        mov   r1, @>fede(r9)            ; offset1
        li    r1, >03c0
        a     @>fedc(r9), r1            ; offset 
        mov   r1, @>fee0(r9)            ; offset2
__l_1308:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fee0(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        li    r1, >0008
        mov   r1, @>fed6(r9)            ; k
        mov   @>fd64, r1                ; turn
; no-opt
        ci    r1, >0001
        jle   __l_1312
        jmp   __l_1310
__l_1312:
        sla   r1, 1
        ai    r1, __l_1313
        mov   *r1, r1
        b     *r1
__c_1274:
        mov   @>fee4(r9), r1            ; ploc
        ci    r1, >0007
        jlt   __l_1310
        jeq   __l_1310
__l_1317:
        mov   @>fee4(r9), r1            ; ploc
        ci    r1, >0010
        jgt   __l_1310
        jeq   __l_1310
__l_1314:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >fed6                 ; k
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >fee4                 ; ploc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bittrim
        jmp   __l_1310
__c_1275:
        mov   @>fee4(r9), r1            ; ploc
        ci    r1, >002f
        jlt   __l_1310
        jeq   __l_1310
__l_1323:
        mov   @>fee4(r9), r1            ; ploc
        ci    r1, >0038
        jgt   __l_1310
        jeq   __l_1310
__l_1320:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >fed6                 ; k
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >fee4                 ; ploc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bittrim
__l_1310:
        mov   @>fd64, r1                ; turn
        jne   __l_1329
__l_1330:
        mov   @>fedc(r9), r1            ; offset
        li    r2, >00c8
        s     r2, r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1333
        sla   r14, 0
__l_1333:
        sra   r1, 3
        li    r2, __set_cnst_36
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1334
        inc   r1
__l_1334:
        ci    r1, >0000
        jne   __l_1326
__l_1329:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1335
        b     @__l_1357
__l_1335:
        mov   @>fedc(r9), r1            ; offset
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1338
        sla   r14, 0
__l_1338:
        sra   r1, 3
        li    r2, __set_cnst_37
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1339
        inc   r1
__l_1339:
        ci    r1, >0000
        jne   __l_1326
        b     @__l_1357
__l_1326:
        mov   @>0008(r9), r1            ; lastmove
        mov   *r1, r1
        jeq   __l_1340
        b     @__l_1357
__l_1340:
        mov   @>0008(r9), r1            ; lastmove
        mov   @>0004(r1), r1
        mov   @>0008(r9), r2            ; lastmove
        s     @>0002(r2), r1            ;  
        abs   r1
        ci    r1, >0010
        jeq   __l_1344
        b     @__l_1357
__l_1344:
        mov   @>fd64, r1                ; turn
        jne   __l_1349
__l_1348:
        li    r1, >05c0
        mov   @>0008(r9), r2            ; lastmove
        mov   @>0002(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        li    r2, >0180
        s     r2, r1
        mov   r1, @>fede(r9)            ; offset1
        li    r1, >0180
        mov   @>0008(r9), r2            ; lastmove
        mov   @>0002(r2), r2
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fee0(r9)            ; offset2
        jmp   __l_1350
__l_1349:
        li    r1, >0580
        mov   @>0008(r9), r2            ; lastmove
        mov   @>0002(r2), r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fede(r9)            ; offset1
        li    r1, >0180
        mov   @>0008(r9), r2            ; lastmove
        mov   @>0002(r2), r2
        ai    r2, >0008
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fee0(r9)            ; offset2
__l_1350:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fe8a                 ; __rettmp_331
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fe8a(r9), r1            ; __rettmp_331
        jne   __l_1327
__l_1352:
        li    r1, >0001
        mov   r1, @>fee6(r9)            ; epcapflag
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fee0(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        jmp   __l_1357
__l_1327:
        jmp   __l_1357
__l_1303:
        mov   @>fed4(r9), r1            ; j
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1360
        sla   r14, 0
__l_1360:
        sra   r1, 3
        li    r2, __set_cnst_38
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1361
        inc   r1
__l_1361:
        ci    r1, >0000
        jeq   __l_1357
__l_1356:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>0006(r9), @>0006(r10)   ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1357:
        li    r1, >fd92                 ; bit1
        mov   r9, r2
        ai    r2, >fff4                 ; bit9
        li    r3, >0008
__l_1362:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1362
        mov   @>fed4(r9), r1            ; j
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1367
        sla   r14, 0
__l_1367:
        sra   r1, 3
        li    r2, __set_cnst_39
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1368
        inc   r1
__l_1368:
        ci    r1, >0000
        jne   __l_1363
        b     @__l_1364
__l_1363:
        mov   @>fd64, r1                ; turn
        jne   __l_1370
__l_1369:
        li    r1, >0fde
        mov   r1, @>fee2(r9)            ; offset4
        jmp   __l_1371
__l_1370:
        li    r1, >0fd6
        mov   r1, @>fee2(r9)            ; offset4
__l_1371:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fee2(r9), @>0006(r10)   ; offset4 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >0001
        mov   r1, @>0008(r10)
        mov   r9, r1
        ai    r1, >fed4                 ; j
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >fee4                 ; ploc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bittrim
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>0006(r9), @>0006(r10)   ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >fed4                 ; j
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >fee4                 ; ploc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bittrim
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1364:
        mov   @>fed4(r9), r1            ; j
        ci    r1, >0028
        jeq   __l_1373
        b     @__l_1374
__l_1373:
        li    r1, >fd9a                 ; bit2
        mov   r9, r2
        ai    r2, >ffec                 ; bit8
        li    r3, >0008
__l_1377:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1377
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   @>0008(r9), r1            ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_1378:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1378
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   r9, r1
        ai    r1, >fff4                 ; bit9
        li    r2, >fd92                 ; bit1
        li    r3, >0008
__l_1379:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1379
        mov   r9, r1
        ai    r1, >ffec                 ; bit8
        li    r2, >fd9a                 ; bit2
        li    r3, >0008
__l_1380:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1380
        mov   @>fd64, r1                ; turn
        jne   __l_1382
__l_1381:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   r9, r1
        ai    r1, >ffec                 ; bit8
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_1383
__l_1382:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   r9, r1
        ai    r1, >ffec                 ; bit8
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1383:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffec                 ; bit8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        mov   @>ff6a(r9), @>feda(r9)    ; movearray n
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        c     @>feda(r9), @>ff6a(r9)    ; n movearray 
        jne   __l_1374
        b     @__l_1284
__l_1374:
        mov   @>fd70, r1                ; ply
        ci    r1, >0002
        jgt   __l_1390
__l_1389:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        mov   @>fd64, r1                ; turn
        jne   __l_1394
__l_1393:
        mov   @>fd76, r1                ; wmobility
        a     @>ff6a(r9), r1            ; movearray 
        mov   r1, @>fd76                ;  wmobility
        jmp   __l_1390
__l_1394:
        mov   @>fd78, r1                ; bmobility
        a     @>ff6a(r9), r1            ; movearray 
        mov   r1, @>fd78                ;  bmobility
__l_1390:
        mov   @>fd64, r1                ; turn
        jne   __l_1398
__l_1397:
        li    r1, >0fde
        mov   r1, @>fede(r9)            ; offset1
        jmp   __l_1399
__l_1398:
        li    r1, >0fd6
        mov   r1, @>fede(r9)            ; offset1
__l_1399:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fede(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        mov   @>fee6(r9), r1            ; epcapflag
        ci    r1, >0001
        jne   __l_1402
__l_1401:
        mov   @>fd64, r1                ; turn
        jne   __l_1406
__l_1405:
        li    r1, >0200
        mov   @>fee4(r9), r2            ; ploc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fee0(r9)            ; offset2
        jmp   __l_1407
__l_1406:
        li    r1, >03c0
        mov   @>fee4(r9), r2            ; ploc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fee0(r9)            ; offset2
__l_1407:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0008(r10)
        mov   @>fee0(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd60, @>0002(r10)       ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
__l_1402:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fe8a                 ; __rettmp_336
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fe8a(r9), r1            ; __rettmp_336
        jne   __l_1410
__l_1409:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>fed6(r9)            ; k
        mov   @>ff6a(r9), @>fffe(r9)    ; movearray $k
        c     @>fed6(r9), @>fffe(r9)    ; k $k 
        jlt   __l_1277
        jeq   __l_1277
        jmp   __l_1410
__l_1276:
        inc   @>fed6(r9)                ; k
__l_1277:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        mov   @>fed4(r9), r1            ; j
        mov   @>000a(r9), r2            ; attackindex
        mov   r1, *r2
        mov   @>fee4(r9), r1            ; ploc
        mov   @>000a(r9), r2            ; attackindex
        mov   r1, @>0002(r2)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   @>fed6(r9), r2            ; k
        sla   r2, 1
        a     r2, r1
        mov   *r1, r1
        mov   @>000a(r9), r2            ; attackindex
        mov   r1, @>0004(r2)
        mov   @>fffc(r9), r1            ; currentmove
        mov   @>000a(r9), r2            ; attackindex
        mov   r1, @>0006(r2)
        mov   @>fffc(r9), @>000a(r9)    ; currentmove attackindex
        clr   r1
        mov   @>000a(r9), r2            ; attackindex
        mov   r1, @>0006(r2)
        c     @>fed6(r9), @>fffe(r9)    ; k $k 
        jne   __l_1276
__l_1410:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fe8a                 ; __rettmp_337
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fe8a(r9), r1            ; __rettmp_337
        jeq   __l_1417
        b     @__l_1418
__l_1417:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>fed6(r9)            ; k
        mov   @>ff6a(r9), @>fffe(r9)    ; movearray $k
        c     @>fed6(r9), @>fffe(r9)    ; k $k 
        jlt   __l_1280
        jeq   __l_1280
        jmp   __l_1418
__l_1279:
        inc   @>fed6(r9)                ; k
__l_1280:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0008
        mov   r1, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; currentmove
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __new_82
        mov   @>fed4(r9), r1            ; j
        mov   @>000c(r9), r2            ; tailindex
        mov   r1, *r2
        mov   @>fee4(r9), r1            ; ploc
        mov   @>000c(r9), r2            ; tailindex
        mov   r1, @>0002(r2)
        mov   r9, r1
        ai    r1, >ff6a                 ; movearray
        mov   @>fed6(r9), r2            ; k
        sla   r2, 1
        a     r2, r1
        mov   *r1, r1
        mov   @>000c(r9), r2            ; tailindex
        mov   r1, @>0004(r2)
        mov   @>fffc(r9), r1            ; currentmove
        mov   @>000c(r9), r2            ; tailindex
        mov   r1, @>0006(r2)
        mov   @>fffc(r9), @>000c(r9)    ; currentmove tailindex
        clr   r1
        mov   @>000c(r9), r2            ; tailindex
        mov   r1, @>0006(r2)
        c     @>fed6(r9), @>fffe(r9)    ; k $k 
        jne   __l_1279
__l_1418:
        mov   @>fed8(r9), r1            ; l
        inc   r1
        mov   r1, @>fed8(r9)            ; l
        c     r1, @>fee8(r9)            ; posarray 
        jgt   __l_1284
        b     @__l_1267
__l_1284:
        mov   @>fed4(r9), r1            ; j
        ai    r1, >0008
        mov   r1, @>fed4(r9)            ; j
        ci    r1, >0028
        jgt   __l_1427
        b     @__l_1266
__l_1427:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >000a
        b     @__far_ret
; jump tables for case statements
__l_1313:
        data  __c_1274
        data  __c_1275

; ; Set Constants
__set_cnst_36:
        text >000000000000ff00ffffffffffff000100000000000000000000000000000000
__set_cnst_37:
        text >000000000000000000000000000000000000000000000000ffffffffffff01ff
__set_cnst_38:
        text >0000000101000000000000000000000000000000000000000000000000000000
__set_cnst_39:
        text >0100010000010000000000000000000000000000000000000000000000000000

        bank 8, >6060

; Subroutine: trim_43, level: 2
;   ffd2     -46  __rettmp_76: int16
;   ffd2     -46  __rettmp_77: boolean
;   ffd2     -46  __rettmp_78: set of int64
;   fff2     -14  __rettmp_79: boolean
;   ffd2     -46  __rettmp_80: set of int64
;   fff2     -14  __rettmp_81: boolean
;   0004       4  j: int16
;   0006       6  iloc: int16
;   0008       8  sideoffset: int16
;   000a      10  lastmove: record
;   0012      18  var bit2: reference to array [subrange (0..3) of int64] of int16
;   fff4     -12  k: int16
;   fff6     -10  offset: int16
;   fff8      -8  offset1: int16
;   fffa      -6  offset2: int16
;   fffc      -4  offset3: int16
;   fffe      -2  spage: int16

trim_43:
        ai    r10, >ffc6
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >002e
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0015
        mov   r1, @>fffe(r9)            ; spage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>0006(r9), r1            ; iloc
        li    r2, >0008
        mpy   r1, r2
        mov   r3, @>fff6(r9)            ;  offset
        li    r1, >0f00
        mov   r1, @>fff8(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>0004(r9), r1            ; j
; no-opt
        jeq   __c_1429
        ai    r1, >fff8
        jeq   __c_1430
        ai    r1, >fff8
        jeq   __c_1431
        ai    r1, >fff8
        jeq   __c_1432
        ai    r1, >fff8
        jeq   __c_1433
        ai    r1, >fff8
        jne   __l_1438
        jmp   __c_1434
__c_1429:
        mov   @>fd64, r1                ; turn
        jne   __l_1446
__l_1445:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0380
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fff8(r9)            ; offset1
        jmp   __l_1438
__l_1446:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0540
        mov   r1, @>fff8(r9)            ; offset1
        jmp   __l_1438
__c_1430:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0d00
        mov   r1, @>fff8(r9)            ; offset1
        jmp   __l_1438
__c_1431:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0900
        mov   r1, @>fff8(r9)            ; offset1
        jmp   __l_1438
__c_1432:
        mov   @>fff6(r9), @>fff8(r9)    ; offset offset1
        jmp   __l_1438
__c_1433:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0b00
        mov   r1, @>fff8(r9)            ; offset1
        jmp   __l_1438
__c_1434:
        mov   @>fff6(r9), r1            ; offset
        ai    r1, >0700
        mov   r1, @>fff8(r9)            ; offset1
__l_1438:
        mov   @>0004(r9), r1            ; j
        ci    r1, >0018
        jne   __l_1450
__l_1449:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   @>0012(r9), @>0008(r10)   ; bit2 
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffe(r9), @>0002(r10)   ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        jmp   __l_1451
__l_1450:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   @>0012(r9), @>0008(r10)   ; bit2 
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_1451:
        mov   @>0004(r9), r1            ; j
        jeq   __l_1453
        b     @__l_1454
__l_1453:
        li    r1, >0060
        mov   r1, @>fff8(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitand
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>fd64, r1                ; turn
        jne   __l_1458
__l_1457:
        li    r1, >0070
        mov   r1, @>fff8(r9)            ; offset1
        li    r1, >0200
        a     @>fff6(r9), r1            ; offset 
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fffa(r9)            ; offset2
        jmp   __l_1459
__l_1458:
        li    r1, >0068
        mov   r1, @>fff8(r9)            ; offset1
        li    r1, >03c0
        a     @>fff6(r9), r1            ; offset 
        mov   r1, @>fffa(r9)            ; offset2
__l_1459:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffe(r9), @>0002(r10)   ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitor
        li    r1, >0008
        mov   r1, @>fff4(r9)            ; k
        mov   @>fd64, r1                ; turn
; no-opt
        ci    r1, >0001
        jle   __l_1463
        jmp   __l_1461
__l_1463:
        sla   r1, 1
        ai    r1, __l_1464
        mov   *r1, r1
        b     *r1
__c_1435:
        mov   @>0006(r9), r1            ; iloc
        ci    r1, >0007
        jlt   __l_1461
        jeq   __l_1461
__l_1468:
        mov   @>0006(r9), r1            ; iloc
        ci    r1, >0010
        jgt   __l_1461
        jeq   __l_1461
__l_1465:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; k
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >0006                 ; iloc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bittrim
        jmp   __l_1461
__c_1436:
        mov   @>0006(r9), r1            ; iloc
        ci    r1, >002f
        jlt   __l_1461
        jeq   __l_1461
__l_1474:
        mov   @>0006(r9), r1            ; iloc
        ci    r1, >0038
        jgt   __l_1461
        jeq   __l_1461
__l_1471:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; k
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >0006                 ; iloc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bittrim
__l_1461:
        mov   @>fd64, r1                ; turn
        jne   __l_1480
__l_1482:
        mov   @>fff6(r9), r1            ; offset
        ci    r1, >0100
        jlt   __l_1480
__l_1481:
        mov   @>fff6(r9), r1            ; offset
        ci    r1, >0138
        jgt   __l_1480
        jmp   __l_1477
__l_1480:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1487
        b     @__l_1508
__l_1487:
        mov   @>fff6(r9), r1            ; offset
        ci    r1, >00c0
        jlt   __l_1489
        jmp   __l_1486
__l_1489:
        b     @__l_1508
__l_1486:
        mov   @>fff6(r9), r1            ; offset
        ci    r1, >00f8
        jgt   __l_1490
        jmp   __l_1477
__l_1490:
        b     @__l_1508
__l_1477:
        mov   @>000a(r9), r1            ; lastmove
        jeq   __l_1491
        b     @__l_1508
__l_1491:
        mov   @>000e(r9), r1            ; lastmove
        s     @>000c(r9), r1            ; lastmove 
        abs   r1
        ci    r1, >0010
        jeq   __l_1495
        b     @__l_1508
__l_1495:
        mov   @>fd64, r1                ; turn
        jne   __l_1500
__l_1499:
        li    r1, >05c0
        mov   @>000c(r9), r2            ; lastmove
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        li    r2, >0180
        s     r2, r1
        mov   r1, @>fff8(r9)            ; offset1
        li    r1, >0180
        mov   @>000c(r9), r2            ; lastmove
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fffa(r9)            ; offset2
        clr   @>fffc(r9)                ; offset3
        jmp   __l_1501
__l_1500:
        li    r1, >0580
        mov   @>000c(r9), r2            ; lastmove
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        li    r2, >0040
        s     r2, r1
        mov   r1, @>fff8(r9)            ; offset1
        li    r1, >0180
        mov   @>000c(r9), r2            ; lastmove
        ai    r2, >0008
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fffa(r9)            ; offset2
        li    r1, >0030
        mov   r1, @>fffc(r9)            ; offset3
__l_1501:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fff8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fffe(r9), @>0002(r10)   ; spage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd2                 ; __rettmp_77
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffd2(r9), r1            ; __rettmp_77
        jne   __l_1478
__l_1503:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fffa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitor
        jmp   __l_1508
__l_1478:
        jmp   __l_1508
__l_1454:
        mov   @>0004(r9), r1            ; j
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1511
        sla   r14, 0
__l_1511:
        sra   r1, 3
        li    r2, __set_cnst_40
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1512
        inc   r1
__l_1512:
        ci    r1, >0000
        jeq   __l_1508
__l_1507:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>0008(r9), @>0006(r10)   ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1508:
        mov   @>0004(r9), r1            ; j
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1517
        sla   r14, 0
__l_1517:
        sra   r1, 3
        li    r2, __set_cnst_41
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1518
        inc   r1
__l_1518:
        ci    r1, >0000
        jne   __l_1513
        b     @__l_1514
__l_1513:
        mov   @>fd64, r1                ; turn
        jne   __l_1520
__l_1519:
        li    r1, >0070
        mov   r1, @>fffc(r9)            ; offset3
        jmp   __l_1521
__l_1520:
        li    r1, >0068
        mov   r1, @>fffc(r9)            ; offset3
__l_1521:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>fffc(r9), @>0006(r10)   ; offset3 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >0001
        mov   r1, @>0008(r10)
        mov   r9, r1
        ai    r1, >0004                 ; j
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >0006                 ; iloc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bittrim
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>0008(r9), @>0006(r10)   ; sideoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   @>0008(r10)
        mov   r9, r1
        ai    r1, >0004                 ; j
        mov   r1, @>0006(r10)
        mov   r9, r1
        ai    r1, >0006                 ; iloc
        mov   r1, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bittrim
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0012(r9), @>0004(r10)   ; bit2 
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        mov   @>0012(r9), *r10          ; bit2 
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_1514:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0010
        b     @__far_ret
; jump tables for case statements
__l_1464:
        data  __c_1435
        data  __c_1436

; ; Set Constants
__set_cnst_40:
        text >0000000101000000000000000000000000000000000000000000000000000000
__set_cnst_41:
        text >0100010000010000000000000000000000000000000000000000000000000000

        bank 8, >68a4

; Subroutine: combinetrim_44, level: 2
;   ff6e    -146  __rettmp_82: boolean
;   ff6e    -146  __rettmp_83: boolean
;   0004       4  var bit3: reference to array [subrange (0..3) of int64] of int16
;   0006       6  var bit5: reference to array [subrange (0..3) of int64] of int16
;   0008       8  lastmove: record
;   ff70    -144  i: int16
;   ff72    -142  j: int16
;   ff74    -140  offset: int16
;   ff76    -138  sideoffset: int16
;   ff78    -136  iturn: int16
;   ff7a    -134  posarray: array [subrange (0..64) of int64] of int16
;   fffc      -4  $j: int16
;   fffe      -2  $i: int16

combinetrim_44:
        ai    r10, >ff62
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0092
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>fd64, @>ff78(r9)        ; turn iturn
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        li    r1, >0068
        mov   r1, @>ff76(r9)            ; sideoffset
        clr   @>fd64                    ;  turn
        clr   @>ff70(r9)                ; i
        li    r1, >0005
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_1527
__l_1526:
        inc   @>ff70(r9)                ; i
__l_1527:
        clr   r1
        mov   @>ff70(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff74(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff74(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff6e                 ; __rettmp_82
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff6e(r9), r1            ; __rettmp_82
        jne   __l_1537
__l_1536:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>ff72(r9)            ; j
        mov   @>ff7a(r9), @>fffc(r9)    ; posarray $j
        c     @>ff72(r9), @>fffc(r9)    ; j $j 
        jlt   __l_1524
        jeq   __l_1524
        jmp   __l_1537
__l_1523:
        inc   @>ff72(r9)                ; j
__l_1524:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        mov   r9, r1
        ai    r1, >0008                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_1542:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1542
        mov   @>ff76(r9), @>0004(r10)   ; sideoffset 
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   @>ff72(r9), r2            ; j
        sla   r2, 1
        a     r2, r1
        mov   *r1, @>0002(r10)          ;  
        mov   @>ff70(r9), r1            ; i
        li    r2, >0008
        mpy   r1, r2
        mov   r3, *r10                  ;  
        bl    @__far_call_1
        data  >6010
        data  trim_43
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        c     @>ff72(r9), @>fffc(r9)    ; j $j 
        jne   __l_1523
__l_1537:
        c     @>ff70(r9), @>fffe(r9)    ; i $i 
        jeq   __l_1545
        b     @__l_1526
__l_1545:
        li    r1, >fdca                 ; bitres
        li    r2, >fdc2                 ; bit7
        li    r3, >0008
__l_1547:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1547
        li    r1, >0070
        mov   r1, @>ff76(r9)            ; sideoffset
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
        clr   @>ff70(r9)                ; i
        li    r1, >0005
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_1533
__l_1532:
        inc   @>ff70(r9)                ; i
__l_1533:
        li    r1, >0030
        mov   @>ff70(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff74(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff74(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff6e                 ; __rettmp_83
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff6e(r9), r1            ; __rettmp_83
        jne   __l_1549
__l_1548:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>ff72(r9)            ; j
        mov   @>ff7a(r9), @>fffc(r9)    ; posarray $j
        c     @>ff72(r9), @>fffc(r9)    ; j $j 
        jlt   __l_1530
        jeq   __l_1530
        jmp   __l_1549
__l_1529:
        inc   @>ff72(r9)                ; j
__l_1530:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        mov   r9, r1
        ai    r1, >0008                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_1554:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1554
        mov   @>ff76(r9), @>0004(r10)   ; sideoffset 
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   @>ff72(r9), r2            ; j
        sla   r2, 1
        a     r2, r1
        mov   *r1, @>0002(r10)          ;  
        mov   @>ff70(r9), r1            ; i
        li    r2, >0008
        mpy   r1, r2
        mov   r3, *r10                  ;  
        bl    @__far_call_1
        data  >6010
        data  trim_43
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdca                 ; bitres
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        c     @>ff72(r9), @>fffc(r9)    ; j $j 
        jne   __l_1529
__l_1549:
        c     @>ff70(r9), @>fffe(r9)    ; i $i 
        jeq   __l_1557
        b     @__l_1532
__l_1557:
        li    r1, >fdca                 ; bitres
        mov   @>0006(r9), r2            ; bit5
        li    r3, >0008
__l_1559:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1559
        li    r1, >fdc2                 ; bit7
        mov   @>0004(r9), r2            ; bit3
        li    r3, >0008
__l_1560:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1560
        mov   @>ff78(r9), @>fd64        ; iturn  turn
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >000c
        b     @__far_ret

        bank 8, >6c08

; Subroutine: printgame_45, level: 2
;   f9ca   -1590  __rettmp_232: string [14]
;   f9ca   -1590  __rettmp_233: string [255]
;   f9ca   -1590  __rettmp_234: string [23]
;   f9ca   -1590  __rettmp_235: string [20]
;   f9ca   -1590  __rettmp_236: string [255]
;   f9ca   -1590  __rettmp_237: string [11]
;   f9ca   -1590  __rettmp_238: string [14]
;   f9ca   -1590  __rettmp_239: string [14]
;   f9ca   -1590  __rettmp_240: string [13]
;   f9ca   -1590  __rettmp_241: string [13]
;   f9ca   -1590  __rettmp_242: string [10]
;   f9ca   -1590  __rettmp_243: string [6]
;   f9ca   -1590  __rettmp_244: string [5]
;   f9ca   -1590  __rettmp_245: string [2]
;   f9cd   -1587  __rettmp_246: string [2]
;   f9ca   -1590  __rettmp_247: string [15]
;   faca   -1334  pturn: int16
;   facc   -1332  offset: int16
;   face   -1330  pcname: array [subrange (0..40) of int64] of char
;   faf7   -1289  status: boolean
;   faf8   -1288  movestore: record
;   fb00   -1280  rdir: string [255]
;   fc00   -1024  ilocstring: string [255]
;   fd00    -768  elocstring: string [255]
;   fe00    -512  gdate: string [255]
;   ff00    -256  pname: string [255]

printgame_45:
        ai    r10, >f9be
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0636
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, __str_cnst_42
        mov   r9, r2
        ai    r2, >fb00                 ; rdir
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1564
        mov   r0, r3
__l_1564:
        movb  r3, *r2+
        jeq   __l_1565
        srl   r3, 8
__l_1566:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1566
__l_1565:
        li    r1, >0050
        movb  @>8303, @>face(r9)        ; pcname
        li    r1, >0052
        movb  @>8303, @>fad6(r9)        ; pcname
        li    r1, >004e
        movb  @>8303, @>fade(r9)        ; pcname
        li    r1, >0042
        movb  @>8303, @>fae6(r9)        ; pcname
        li    r1, >0051
        movb  @>8303, @>faee(r9)        ; pcname
        li    r1, >004b
        movb  @>8303, @>faf6(r9)        ; pcname
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_43
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_232
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_232
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_233
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_string_73
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_233
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1567
        mov   r0, r3
__l_1567:
        movb  r3, *r2+
        jeq   __l_1568
        srl   r3, 8
__l_1569:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1569
__l_1568:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_44
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_234
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_234
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_45
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_235
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_235
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_236
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_string_73
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_236
        mov   r9, r2
        ai    r2, >fe00                 ; gdate
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1570
        mov   r0, r3
__l_1570:
        movb  r3, *r2+
        jeq   __l_1571
        srl   r3, 8
__l_1572:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1572
__l_1571:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000c
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_46
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_237
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_237
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        li    r1, >0380
        mov   r1, @>facc(r9)            ; offset
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        li    r1, >0001
        mov   r1, @>faca(r9)            ; pturn
        movb  @>faf7(r9), r1            ; status
        jne   __l_1574
__l_1573:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000c
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_47
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_238
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_238
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        b     @__l_1595
__l_1574:
        li    r1, __str_cnst_48
        mov   r9, r2
        ai    r2, >fc00                 ; ilocstring
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1577
        mov   r0, r3
__l_1577:
        movb  r3, *r2+
        jeq   __l_1578
        srl   r3, 8
__l_1579:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1579
__l_1578:
        li    r1, __str_cnst_48
        mov   r9, r2
        ai    r2, >fd00                 ; elocstring
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1580
        mov   r0, r3
__l_1580:
        movb  r3, *r2+
        jeq   __l_1581
        srl   r3, 8
__l_1582:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1582
__l_1581:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_49
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_239
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_239
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        mov   @>fd7c, r1                ; humanside
        jne   __l_1584
__l_1583:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_50
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_240
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_240
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        jmp   __l_1585
__l_1584:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_51
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_241
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_241
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1585:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_52
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_242
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_242
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >ff00                 ; pname
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_53
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_243
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_243
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fe00                 ; gdate
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_54
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_244
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_244
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd74, @>0002(r10)       ; gameply 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1562:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >faf8                 ; movestore
        mov   r1, @>0008(r10)
        mov   @>facc(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>faf8(r9), r1            ; movestore
        ci    r1, >0063
        jne   __l_1588
        b     @l_1_1561
__l_1588:
        li    r1, >0041
        li    r2, >0008
        mov   @>fafa(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>fc01(r9)        ; ilocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>fafa(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>fc02(r9)        ; ilocstring
        li    r1, >0041
        li    r2, >0008
        mov   @>fafc(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>fd01(r9)        ; elocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>fafc(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>fd02(r9)        ; elocstring
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>faca(r9), @>0002(r10)   ; pturn 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_55
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_245
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_245
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >face                 ; pcname
        a     @>faf8(r9), r1            ; movestore 
        movb  *r1, @>0002(r10)          ;  
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >5d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fc00                 ; ilocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fd00                 ; elocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_48
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9cd                 ; __rettmp_246
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9cd                 ; __rettmp_246
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        mov   @>facc(r9), r1            ; offset
        ai    r1, >0008
        mov   r1, @>facc(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >faf8                 ; movestore
        mov   r1, @>0008(r10)
        mov   @>facc(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>faf8(r9), r1            ; movestore
        ci    r1, >0063
        jne   __l_1592
        b     @l_1_1561
__l_1592:
        li    r1, >0041
        li    r2, >0008
        mov   @>fafa(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>fc01(r9)        ; ilocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>fafa(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>fc02(r9)        ; ilocstring
        li    r1, >0041
        li    r2, >0008
        mov   @>fafc(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>fd01(r9)        ; elocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>fafc(r9), r4            ; movestore
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>fd02(r9)        ; elocstring
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >face                 ; pcname
        a     @>faf8(r9), r1            ; movestore 
        movb  *r1, @>0002(r10)          ;  
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >5d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fc00                 ; ilocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fd00                 ; elocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   @>facc(r9), r1            ; offset
        ai    r1, >0008
        mov   r1, @>facc(r9)            ; offset
        mov   @>faca(r9), r1            ; pturn
        inc   r1
        mov   r1, @>faca(r9)            ; pturn
l_1_1561:
        mov   @>faf8(r9), r1            ; movestore
        ci    r1, >0063
        jeq   __l_1595
        b     @__l_1562
__l_1595:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000c
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_56
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_247
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >f9ca                 ; __rettmp_247
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_42 text >0b504f3d5052494e5445523a    ; PO=PRINTER:
__str_cnst_43 text >0e6f70706f6e656e74206e616d653a    ; opponent name:
__str_cnst_44 text >17646174653a202020202020202020202020202020202020    ; date:                  
__str_cnst_45 text >142020202020202020202020202020202020202020    ;                     
__str_cnst_46 text >0b7072696e74696e672e2e2e    ; printing...
__str_cnst_47 text >0e7072696e746572206572726f7221    ; printer error!
__str_cnst_48 text >022020    ;   
__str_cnst_49 text >0e50686f656e697820436865737320    ; Phoenix Chess 
__str_cnst_50 text >0d706c6179696e6720626c61636b    ; playing black
__str_cnst_51 text >0d706c6179696e67207768697465    ; playing white
__str_cnst_52 text >0a4f70706f6e656e743a20    ; Opponent: 
__str_cnst_53 text >06446174653a20    ; Date: 
__str_cnst_54 text >05506c793a20    ; Ply: 
__str_cnst_55 text >023a20    ; : 
__str_cnst_56 text >0f202020202020202020202020202020    ;                
        even 

        bank 8, >77f4

; Subroutine: boarddisplay_46, level: 2
;   ff68    -152  __rettmp_255: boolean
;   ff6a    -150  i: int16
;   ff6c    -148  j: int16
;   ff6e    -146  x: int16
;   ff70    -144  y: int16
;   ff72    -142  side: int16
;   ff74    -140  offset: int16
;   ff76    -138  offset1: int16
;   ff78    -136  ploc: int16
;   ff7a    -134  posarray: array [subrange (0..64) of int64] of int16
;   fffc      -4  $i: int16
;   fffe      -2  $side: int16

boarddisplay_46:
        ai    r10, >ff5c
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0098
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6014
        data  newboard_49
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        clr   @>ff72(r9)                ; side
        li    r1, >0001
        mov   r1, @>fffe(r9)            ; $side
        jmp   __l_1608
__l_1607:
        inc   @>ff72(r9)                ; side
__l_1608:
        mov   @>ff72(r9), r1            ; side
        jne   __l_1612
__l_1611:
        clr   @>ff74(r9)                ; offset
        jmp   __l_1613
__l_1612:
        li    r1, >0030
        mov   r1, @>ff74(r9)            ; offset
__l_1613:
        clr   @>ff6c(r9)                ; j
__l_1597:
        mov   @>ff74(r9), r1            ; offset
        li    r2, >0008
        mov   @>ff6c(r9), r4            ; j
        clr   r3
        div   r2, r3
        mov   r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff76(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff76(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff68                 ; __rettmp_255
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff68(r9), r1            ; __rettmp_255
        jeq   __l_1615
        b     @__l_1616
__l_1615:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>ff6a(r9)            ; i
        mov   @>ff7a(r9), @>fffc(r9)    ; posarray $i
        c     @>ff6a(r9), @>fffc(r9)    ; i $i 
        jlt   __l_1605
        jeq   __l_1605
        b     @__l_1616
__l_1604:
        inc   @>ff6a(r9)                ; i
__l_1605:
        mov   r9, r1
        ai    r1, >ff7a                 ; posarray
        mov   @>ff6a(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   *r1, @>ff78(r9)           ;  ploc
        li    r1, >000b
        li    r2, >0008
        mov   @>ff78(r9), r4            ; ploc
        clr   r3
        div   r2, r3
        s     r3, r1                    ;  
        mov   r1, @>ff70(r9)            ; y
        li    r1, >0008
        mov   @>ff78(r9), r3            ; ploc
        clr   r2
        div   r1, r2
        mov   r3, r1
        li    r2, >0002
        mpy   r1, r2
        mov   r3, r1
        inct  r1
        mov   r1, @>ff6e(r9)            ; x
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>ff70(r9), @>0002(r10)   ; y 
        mov   @>ff6e(r9), *r10          ; x 
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   @>ff6c(r9), r1            ; j
; no-opt
        jeq   __c_1598
        ai    r1, >fff8
        jeq   __c_1599
        ai    r1, >fff8
        jeq   __c_1600
        ai    r1, >fff8
        jeq   __c_1601
        ai    r1, >fff8
        jne   __l_1626
        b     @__c_1602
__l_1626:
        ai    r1, >fff8
        jne   __l_1627
        b     @__c_1603
__l_1627:
        b     @__l_1621
__c_1598:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0050
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        b     @__l_1621
__c_1599:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0052
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        b     @__l_1621
__c_1600:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >004e
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1621
__c_1601:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0042
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1621
__c_1602:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0051
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1621
__c_1603:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >004b
        mov   @>ff72(r9), r2            ; side
        li    r3, >0020
        mpy   r2, r3
        a     r4, r1                    ;  
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1621:
        c     @>ff6a(r9), @>fffc(r9)    ; i $i 
        jeq   __l_1616
        b     @__l_1604
__l_1616:
        mov   @>ff6c(r9), r1            ; j
        ai    r1, >0008
        mov   r1, @>ff6c(r9)            ; j
        ci    r1, >0028
        jgt   __l_1630
        b     @__l_1597
__l_1630:
        c     @>ff72(r9), @>fffe(r9)    ; side $side 
        jeq   __l_1632
        b     @__l_1607
__l_1632:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000e
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 9, >6060

; Subroutine: enterpos_47, level: 2
;   fec0    -320  __rettmp_257: string [29]
;   fec0    -320  __rettmp_258: string [13]
;   fec0    -320  __rettmp_259: int16
;   fec0    -320  __rettmp_260: set of int64
;   fee0    -288  __rettmp_261: boolean
;   fec0    -320  __rettmp_262: string [22]
;   fec0    -320  __rettmp_263: string [22]
;   fec0    -320  __rettmp_264: string [35]
;   fec0    -320  __rettmp_265: int16
;   fec0    -320  __rettmp_266: set of int64
;   fee0    -288  __rettmp_267: boolean
;   fec0    -320  __rettmp_268: string [4]
;   fec5    -315  __rettmp_269: string [13]
;   fec0    -320  __rettmp_270: string [31]
;   fec0    -320  __rettmp_271: string [23]
;   fec0    -320  __rettmp_272: string [36]
;   fec0    -320  __rettmp_273: int16
;   fec0    -320  __rettmp_274: set of int64
;   fee0    -288  __rettmp_275: boolean
;   fec0    -320  __rettmp_276: int16
;   fec0    -320  __rettmp_277: set of int64
;   fee0    -288  __rettmp_278: boolean
;   fec0    -320  __rettmp_279: string [31]
;   fec0    -320  __rettmp_280: int16
;   fec0    -320  __rettmp_281: set of int64
;   fee0    -288  __rettmp_282: boolean
;   fec0    -320  __rettmp_283: string [27]
;   fec0    -320  __rettmp_284: int16
;   fec0    -320  __rettmp_285: set of int64
;   fee0    -288  __rettmp_286: boolean
;   fec0    -320  __rettmp_287: boolean
;   fec0    -320  __rettmp_288: boolean
;   fec0    -320  __rettmp_289: string [27]
;   fec0    -320  __rettmp_290: int16
;   fec0    -320  __rettmp_291: set of int64
;   fee0    -288  __rettmp_292: boolean
;   fec0    -320  __rettmp_293: boolean
;   fec0    -320  __rettmp_294: boolean
;   fec0    -320  __rettmp_295: string [30]
;   fec0    -320  __rettmp_296: int16
;   fec0    -320  __rettmp_297: set of int64
;   fee0    -288  __rettmp_298: boolean
;   fec0    -320  __rettmp_299: string [21]
;   fec0    -320  __rettmp_300: string [21]
;   fec0    -320  __rettmp_301: int16
;   fec0    -320  __rettmp_302: string [19]
;   fec0    -320  __rettmp_303: int16
;   fee6    -282  x: int16
;   fee8    -280  y: int16
;   feea    -278  orgx: int16
;   feec    -276  orgy: int16
;   feee    -274  row: int16
;   fef0    -272  column: int16
;   fef2    -270  sidekey: int16
;   fef4    -268  piecekey: int16
;   fef6    -266  offset: int16
;   fef8    -264  offset1: int16
;   fefa    -262  offset2: int16
;   fefc    -260  ans: int16
;   fefe    -258  ploc: int16
;   ff00    -256  pname: string [255]

enterpos_47:
        ai    r10, >feb4
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0140
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6014
        data  newboard_49
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        li    r1, >0002
        mov   r1, @>feea(r9)            ; orgx
        li    r1, >000b
        mov   r1, @>feec(r9)            ; orgy
        clr   @>fef6(r9)                ; offset
__l_1635:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fef6(r9), r1            ; offset
        ai    r1, >0008
        mov   r1, @>fef6(r9)            ; offset
        ci    r1, >0028
        jlt   __l_1635
        jeq   __l_1635
__l_1653:
        li    r1, >0030
        mov   r1, @>fef6(r9)            ; offset
__l_1636:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fef6(r9), r1            ; offset
        ai    r1, >0008
        mov   r1, @>fef6(r9)            ; offset
        ci    r1, >0058
        jlt   __l_1636
        jeq   __l_1636
__l_1655:
        li    r1, >0068
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0070
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  clearbitboard_7
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000e
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
__l_1637:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_57
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_257
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_257
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_58
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_258
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_258
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_1638:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_259
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fef2(r9)    ; __rettmp_259 sidekey
        mov   @>fef2(r9), r1            ; sidekey
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1659
        sla   r14, 0
__l_1659:
        sra   r1, 3
        li    r2, __set_cnst_59
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1660
        inc   r1
__l_1660:
        ci    r1, >0000
        jeq   __l_1638
__l_1657:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0051
        jne   __l_1661
        b     @__l_1662
__l_1661:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1666
__l_1665:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_60
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_262
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_262
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        jmp   __l_1667
__l_1666:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_61
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_263
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_263
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1667:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_62
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_264
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_264
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1639:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_265
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fef4(r9)    ; __rettmp_265 piecekey
        mov   @>fef4(r9), r1            ; piecekey
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1671
        sla   r14, 0
__l_1671:
        sra   r1, 3
        li    r2, __set_cnst_63
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1672
        inc   r1
__l_1672:
        ci    r1, >0000
        jeq   __l_1639
__l_1669:
        mov   @>fef4(r9), r1            ; piecekey
        ai    r1, >ffbe
; no-opt
        ci    r1, >0010
        jle   __l_1675
        b     @__l_1673
__l_1675:
        sla   r1, 1
        ai    r1, __l_1676
        mov   *r1, r1
        b     *r1
__c_1640:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1678
__l_1677:
        li    r1, >0018
        mov   r1, @>fef6(r9)            ; offset
        jmp   __l_1679
__l_1678:
        li    r1, >0048
        mov   r1, @>fef6(r9)            ; offset
__l_1679:
        li    r1, __str_cnst_64
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1681
        mov   r0, r3
__l_1681:
        movb  r3, *r2+
        jeq   __l_1682
        srl   r3, 8
__l_1683:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1683
__l_1682:
        b     @__l_1673
__c_1641:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1685
__l_1684:
        li    r1, >0028
        mov   r1, @>fef6(r9)            ; offset
        jmp   __l_1686
__l_1685:
        li    r1, >0058
        mov   r1, @>fef6(r9)            ; offset
__l_1686:
        li    r1, __str_cnst_65
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1688
        mov   r0, r3
__l_1688:
        movb  r3, *r2+
        jeq   __l_1689
        srl   r3, 8
__l_1690:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1690
__l_1689:
        b     @__l_1673
__c_1642:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1692
__l_1691:
        li    r1, >0010
        mov   r1, @>fef6(r9)            ; offset
        jmp   __l_1693
__l_1692:
        li    r1, >0040
        mov   r1, @>fef6(r9)            ; offset
__l_1693:
        li    r1, __str_cnst_66
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1695
        mov   r0, r3
__l_1695:
        movb  r3, *r2+
        jeq   __l_1673
        srl   r3, 8
__l_1697:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1697
        jmp   __l_1673
__c_1643:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1699
__l_1698:
        clr   @>fef6(r9)                ; offset
        jmp   __l_1700
__l_1699:
        li    r1, >0030
        mov   r1, @>fef6(r9)            ; offset
__l_1700:
        li    r1, __str_cnst_67
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1702
        mov   r0, r3
__l_1702:
        movb  r3, *r2+
        jeq   __l_1673
        srl   r3, 8
__l_1704:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1704
        jmp   __l_1673
__c_1644:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1706
__l_1705:
        li    r1, >0020
        mov   r1, @>fef6(r9)            ; offset
        jmp   __l_1707
__l_1706:
        li    r1, >0050
        mov   r1, @>fef6(r9)            ; offset
__l_1707:
        li    r1, __str_cnst_68
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1709
        mov   r0, r3
__l_1709:
        movb  r3, *r2+
        jeq   __l_1673
        srl   r3, 8
__l_1711:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1711
        jmp   __l_1673
__c_1645:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1713
__l_1712:
        li    r1, >0008
        mov   r1, @>fef6(r9)            ; offset
        jmp   __l_1714
__l_1713:
        li    r1, >0038
        mov   r1, @>fef6(r9)            ; offset
__l_1714:
        li    r1, __str_cnst_69
        mov   r9, r2
        ai    r2, >ff00                 ; pname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1716
        mov   r0, r3
__l_1716:
        movb  r3, *r2+
        jeq   __l_1673
        srl   r3, 8
__l_1718:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1718
__l_1673:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_70
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_268
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_268
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >ff00                 ; pname
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_71
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec5                 ; __rettmp_269
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec5                 ; __rettmp_269
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_72
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_270
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_270
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
l_1_1634:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0013
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_73
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_271
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_271
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0014
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_74
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_272
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_272
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0013
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
__l_1646:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_273
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fef0(r9)    ; __rettmp_273 column
        mov   @>fef0(r9), r1            ; column
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1721
        sla   r14, 0
__l_1721:
        sra   r1, 3
        li    r2, __set_cnst_75
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1722
        inc   r1
__l_1722:
        ci    r1, >0000
        jeq   __l_1646
__l_1719:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fef0(r9), r1            ; column
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1647:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_276
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>feee(r9)    ; __rettmp_276 row
        mov   @>feee(r9), r1            ; row
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1725
        sla   r14, 0
__l_1725:
        sra   r1, 3
        li    r2, __set_cnst_76
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1726
        inc   r1
__l_1726:
        ci    r1, >0000
        jeq   __l_1647
__l_1723:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>feee(r9), r1            ; row
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_77
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_279
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_279
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_1648:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_280
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fefc(r9)    ; __rettmp_280 ans
        mov   @>fefc(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1729
        sla   r14, 0
__l_1729:
        sra   r1, 3
        li    r2, __set_cnst_78
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1730
        inc   r1
__l_1730:
        ci    r1, >0000
        jeq   __l_1648
__l_1727:
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >0052
        jne   __l_1732
        b     @l_1_1634
__l_1732:
        mov   @>feee(r9), r1            ; row
        li    r2, >0031
        s     r2, r1
        li    r2, >0008
        mpy   r1, r2
        mov   r3, r1
        mov   @>fef0(r9), r2            ; column
        li    r3, >0041
        s     r3, r2
        a     r2, r1
        mov   r1, @>fefe(r9)            ; ploc
        mov   @>fef0(r9), r1            ; column
        li    r2, >0041
        s     r2, r1
        li    r2, >0002
        mpy   r1, r2
        mov   r3, r1
        a     @>feea(r9), r1            ; orgx 
        mov   r1, @>fee6(r9)            ; x
        mov   @>feec(r9), r1            ; orgy
        mov   @>feee(r9), r2            ; row
        li    r3, >0031
        s     r3, r2
        s     r2, r1
        mov   r1, @>fee8(r9)            ; y
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fee8(r9), @>0002(r10)   ; y 
        mov   @>fee6(r9), *r10          ; x 
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >0043
        jne   __l_1736
__l_1735:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1740
__l_1739:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fef4(r9), r1            ; piecekey
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        b     @__l_1753
__l_1740:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fef4(r9), r1            ; piecekey
        ai    r1, >0020
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1753
__l_1736:
        mov   @>feee(r9), r1            ; row
        andi  r1, >0001
        ci    r1, >0000
        jeq   __l_1744
__l_1743:
        mov   @>fef0(r9), r1            ; column
        andi  r1, >0001
        ci    r1, >0000
        jeq   __l_1748
__l_1747:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >3d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1753
__l_1748:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1753
__l_1744:
        mov   @>fef0(r9), r1            ; column
        andi  r1, >0001
        ci    r1, >0000
        jeq   __l_1752
__l_1751:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_1753
__l_1752:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >3d00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1753:
        li    r1, >0180
        mov   @>fefe(r9), r2            ; ploc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>fef8(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fef8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0060
        mov   r1, @>fef8(r9)            ; offset1
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0057
        jne   __l_1756
__l_1755:
        li    r1, >0068
        mov   r1, @>fefa(r9)            ; offset2
        jmp   __l_1757
__l_1756:
        li    r1, >0070
        mov   r1, @>fefa(r9)            ; offset2
__l_1757:
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >0044
        jeq   __l_1759
        b     @__l_1760
__l_1759:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fefa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fefa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        b     @__l_1761
__l_1760:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef8(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fefa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fefa(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
__l_1761:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6014
        data  clearprompts_50
__l_1662:
        mov   @>fef2(r9), r1            ; sidekey
        ci    r1, >0051
        jeq   __l_1763
        b     @__l_1637
__l_1763:
        clr   @>fd6c                    ;  wcastleflag
        clr   @>fd6e                    ;  bcastleflag
        clr   @>fd80                    ;  wlaflag
        clr   @>fd7e                    ;  wraflag
        clr   @>fd84                    ;  blaflag
        clr   @>fd7e                    ;  wraflag
        clr   @>fd88                    ;  wrookrflag
        clr   @>fd86                    ;  wrooklflag
        clr   @>fd8a                    ;  brooklflag
        clr   @>fd8c                    ;  brookrflag
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_79
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_283
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_283
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1649:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_284
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fefc(r9)    ; __rettmp_284 ans
        mov   @>fefc(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1767
        sla   r14, 0
__l_1767:
        sra   r1, 3
        li    r2, __set_cnst_80
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1768
        inc   r1
__l_1768:
        ci    r1, >0000
        jeq   __l_1649
__l_1765:
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >004e
        jne   __l_1770
__l_1769:
        li    r1, >0001
        mov   r1, @>fd6c                ;  wcastleflag
        b     @__l_1778
__l_1770:
        li    r1, >0008
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0180
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_287
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fec0(r9), r1            ; __rettmp_287
        jeq   __l_1774
__l_1773:
        li    r1, >0001
        mov   r1, @>fd86                ;  wrooklflag
__l_1774:
        li    r1, >01b8
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_288
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fec0(r9), r1            ; __rettmp_288
        jeq   __l_1778
__l_1777:
        li    r1, >0001
        mov   r1, @>fd88                ;  wrookrflag
__l_1778:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_81
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_289
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_289
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1650:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_290
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fefc(r9)    ; __rettmp_290 ans
        mov   @>fefc(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1783
        sla   r14, 0
__l_1783:
        sra   r1, 3
        li    r2, __set_cnst_82
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1784
        inc   r1
__l_1784:
        ci    r1, >0000
        jeq   __l_1650
__l_1781:
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >004e
        jne   __l_1786
__l_1785:
        li    r1, >0001
        mov   r1, @>fd6e                ;  bcastleflag
        b     @__l_1794
__l_1786:
        li    r1, >0038
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0340
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_293
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fec0(r9), r1            ; __rettmp_293
        jeq   __l_1790
__l_1789:
        li    r1, >0001
        mov   r1, @>fd8a                ;  brooklflag
__l_1790:
        li    r1, >0378
        mov   r1, @>fef6(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fef6(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_294
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>fec0(r9), r1            ; __rettmp_294
        jeq   __l_1794
__l_1793:
        li    r1, >0001
        mov   r1, @>fd8c                ;  brookrflag
__l_1794:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_83
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_295
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_295
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1651:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_296
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fefc(r9)    ; __rettmp_296 ans
        mov   @>fefc(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1799
        sla   r14, 0
__l_1799:
        sra   r1, 3
        li    r2, __set_cnst_84
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1800
        inc   r1
__l_1800:
        ci    r1, >0000
        jeq   __l_1651
__l_1797:
        mov   @>fefc(r9), r1            ; ans
        ci    r1, >0057
        jne   __l_1802
__l_1801:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_85
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_299
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_299
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        clr   @>fd64                    ;  turn
        jmp   __l_1803
__l_1802:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_86
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_300
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_300
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        li    r1, >0001
        mov   r1, @>fd64                ;  turn
__l_1803:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_301
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>fec0(r9), @>fefc(r9)    ; __rettmp_301 ans
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_87
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_302
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_302
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fec0                 ; __rettmp_303
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_int_72
        mov   @>fec0(r9), @>fd7a        ; __rettmp_303  gamemove
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
; jump tables for case statements
__l_1676:
        data  __c_1640
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __l_1673
        data  __c_1641
        data  __l_1673
        data  __l_1673
        data  __c_1642
        data  __l_1673
        data  __c_1643
        data  __c_1644
        data  __c_1645

__str_cnst_57 text >1d73656c65637420736964653a205b775d686974652f5b625d626c61636b    ; select side: [w]hite/[b]black
__str_cnst_58 text >0d5b715d20746f20657869742020    ; [q] to exit  
__str_cnst_60 text >162a2a2a2077686974652073656c6563746564202a2a2a    ; *** white selected ***
__str_cnst_61 text >162a2a2a20626c61636b2073656c6563746564202a2a2a    ; *** black selected ***
__str_cnst_62 text >2373656c6563742070696563653a2050202f2052202f204e202f2042202f2051202f204b    ; select piece: P / R / N / B / Q / K
__str_cnst_64 text >06626973686f70    ; bishop
__str_cnst_65 text >046b696e67    ; king
__str_cnst_66 text >066b6e69676874    ; knight
__str_cnst_67 text >047061776e    ; pawn
__str_cnst_68 text >05717565656e    ; queen
__str_cnst_69 text >04726f6f6b    ; rook
__str_cnst_70 text >042a2a2a20    ; *** 
__str_cnst_71 text >0d2073656c6563746564202a2a2a    ;  selected ***
__str_cnst_72 text >1f656e74657220626f61726420737175617265205b636f6c756d6e7c726f775d    ; enter board square [column|row]
__str_cnst_73 text >172020202020202020202020202020202020202020202020    ;                        
__str_cnst_74 text >24202020202020202020202020202020202020202020202020202020202020202020202020    ;                                     
__str_cnst_77 text >1f5b635d6f6e6669726d205b725d65646f205b645d656c657465207069656365    ; [c]onfirm [r]edo [d]elete piece
__str_cnst_79 text >1b616c6c6f7720776869746520636173746c696e673f2028792f6e29    ; allow white castling? (y/n)
__str_cnst_81 text >1b616c6c6f7720626c61636b20636173746c696e673f2028792f6e29    ; allow black castling? (y/n)
__str_cnst_83 text >1e7369646520746f2073746172743f205b775d686974652f5b625d6c61636b    ; side to start? [w]hite/[b]lack
__str_cnst_85 text >152a2a2a20776869746520746f206d6f7665202a2a2a    ; *** white to move ***
__str_cnst_86 text >152a2a2a20626c61636b20746f206d6f7665202a2a2a    ; *** black to move ***
__str_cnst_87 text >13656e746572206d6f7665206e756d6265723a20    ; enter move number: 
        even 

; ; Set Constants
__set_cnst_59:
        text >0000000000000000000400820000000000000000000000000000000000000000
__set_cnst_63:
        text >0000000000000000480401070000000000000000000000000000000000000000
__set_cnst_75:
        text >000000000000000001fe00000000000000000000000000000000000000000000
__set_cnst_76:
        text >00000000000001fe000000000000000000000000000000000000000000000000
__set_cnst_78:
        text >0000000000000000001800040000000000000000000000000000000000000000
__set_cnst_80:
        text >0000000000000000400002000000000000000000000000000000000000000000
__set_cnst_82:
        text >0000000000000000400002000000000000000000000000000000000000000000
__set_cnst_84:
        text >0000000000000000000400800000000000000000000000000000000000000000

        bank 9, >79ec

; Subroutine: movecoord_48, level: 2
;   fde0    -544  __rettmp_304: string [11]
;   fdec    -532  __rettmp_305: string [4]
;   fde0    -544  __rettmp_306: string [8]
;   fde0    -544  __rettmp_307: string [12]
;   fde0    -544  __rettmp_308: string [31]
;   fde0    -544  __rettmp_309: string [3]
;   fde0    -544  __rettmp_310: int16
;   fde2    -542  __rettmp_311: int16
;   fde0    -544  __rettmp_312: string [16]
;   0004       4  score: int16
;   0006       6  iloc: int16
;   0008       8  eloc: int16
;   000a      10  flag: boolean
;   fe00    -512  ilocstring: string [255]
;   ff00    -256  elocstring: string [255]

movecoord_48:
        ai    r10, >fdd4
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0220
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, __str_cnst_88
        mov   r9, r2
        ai    r2, >fe00                 ; ilocstring
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1806
        mov   r0, r3
__l_1806:
        movb  r3, *r2+
        jeq   __l_1807
        srl   r3, 8
__l_1808:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1808
__l_1807:
        li    r1, __str_cnst_88
        mov   r9, r2
        ai    r2, >ff00                 ; elocstring
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_1809
        mov   r0, r3
__l_1809:
        movb  r3, *r2+
        jeq   __l_1810
        srl   r3, 8
__l_1811:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1811
__l_1810:
        li    r1, >0041
        li    r2, >0008
        mov   @>0006(r9), r4            ; iloc
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>fe01(r9)        ; ilocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>0006(r9), r4            ; iloc
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>fe02(r9)        ; ilocstring
        li    r1, >0041
        li    r2, >0008
        mov   @>0008(r9), r4            ; eloc
        clr   r3
        div   r2, r3
        a     r4, r1                    ;  
        movb  @>8303, @>ff01(r9)        ; elocstring
        li    r1, >0031
        li    r2, >0008
        mov   @>0008(r9), r4            ; eloc
        clr   r3
        div   r2, r3
        a     r3, r1                    ;  
        movb  @>8303, @>ff02(r9)        ; elocstring
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0004
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_89
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_304
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_304
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >fe00                 ; ilocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_90
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fdec                 ; __rettmp_305
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fdec                 ; __rettmp_305
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   r9, r1
        ai    r1, >ff00                 ; elocstring
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        movb  @>000a(r9), r1            ; flag
        jeq   __l_1812
        b     @__l_1813
__l_1812:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0010
        mov   r1, @>0002(r10)
        li    r1, >001e
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_91
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_306
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_306
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0011
        mov   r1, @>0002(r10)
        li    r1, >000f
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_92
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_307
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_307
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0010
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_93
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_308
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_308
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        mov   @>fd8e, r1                ; movenumhi
        jgt   __l_1816
        b     @__l_1817
__l_1816:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd8e, @>0002(r10)       ; movenumhi 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_94
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_309
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_309
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde2                 ; __rettmp_311
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  wherey_20
        mov   @>fde2(r9), @>0002(r10)   ; __rettmp_311 
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_310
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  wherex_19
        mov   @>fde0(r9), r1            ; __rettmp_310
        li    r2, >0003
        s     r2, r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd90, @>0002(r10)       ; movenumlo 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        jmp   __l_1818
__l_1817:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd90, @>0002(r10)       ; movenumlo 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1818:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_95
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_312
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fde0                 ; __rettmp_312
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; score 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
__l_1813:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

__str_cnst_88 text >022020    ;   
__str_cnst_89 text >0b6c617374206d6f76653a20    ; last move: 
__str_cnst_90 text >0420746f20    ;  to 
__str_cnst_91 text >082020202020202020    ;         
__str_cnst_92 text >0c202020202020202020202020    ;             
__str_cnst_93 text >1f6e756d626572206f6620706f736974696f6e73206576616c75617465643a20    ; number of positions evaluated: 
__str_cnst_94 text >03303030    ; 000
__str_cnst_95 text >10706f736974696f6e2073636f72653a20    ; position score: 
        even 

        bank 10, >6060

; Subroutine: newboard_49, level: 2
;   ffe8     -24  __rettmp_248: string [13]
;   ffe8     -24  __rettmp_249: string [6]
;   ffe8     -24  __rettmp_250: string [18]
;   ffe8     -24  __rettmp_251: string [17]
;   ffe8     -24  __rettmp_252: string [17]
;   ffe8     -24  __rettmp_253: string [18]
;   ffe8     -24  __rettmp_254: string [17]
;   fffc      -4  y: int16
;   fffe      -2  row: int16

newboard_49:
        ai    r10, >ffe2
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0018
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  clrscr_22
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_96
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_248
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_248
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_97
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_249
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_249
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd74, @>0002(r10)       ; gameply 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        li    r1, >0004
        mov   r1, @>fffc(r9)            ; y
        li    r1, >0008
        mov   r1, @>fffe(r9)            ; row
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_98
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_250
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_250
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
__l_1820:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fffc(r9), @>0002(r10)   ; y 
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fffe(r9), @>0002(r10)   ; row 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_99
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_251
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_251
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fffe(r9), r1            ; row
        dec   r1
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_100
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_252
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_252
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   @>fffc(r9), r1            ; y
        inct  r1
        mov   r1, @>fffc(r9)            ; y
        mov   @>fffe(r9), r1            ; row
        dect  r1
        mov   r1, @>fffe(r9)            ; row
        mov   @>fffc(r9), r1            ; y
        ci    r1, >000a
        jgt   __l_1822
        b     @__l_1820
__l_1822:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_98
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_253
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_253
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_101
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_254
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffe8                 ; __rettmp_254
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_96 text >0d50686f656e6978204368657373    ; Phoenix Chess
__str_cnst_97 text >06706c79203a20    ; ply : 
__str_cnst_98 text >122d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d    ; ------------------
__str_cnst_99 text >117c207c3d7c207c3d7c207c3d7c207c3d7c    ; | |=| |=| |=| |=|
__str_cnst_100 text >117c3d7c207c3d7c207c3d7c207c3d7c207c    ; |=| |=| |=| |=| |
__str_cnst_101 text >112020412042204320442045204620472048    ;   A B C D E F G H
        even 

        bank 10, >643c

; Subroutine: clearprompts_50, level: 2
;   ffd6     -42  __rettmp_256: string [36]
;   fffc      -4  y: int16
;   fffe      -2  $y: int16

clearprompts_50:
        ai    r10, >ffd0
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >002a
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >000e
        mov   r1, @>fffc(r9)            ; y
        li    r1, >0014
        mov   r1, @>fffe(r9)            ; $y
        jmp   __l_1825
__l_1824:
        inc   @>fffc(r9)                ; y
__l_1825:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fffc(r9), @>0002(r10)   ; y 
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_102
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; __rettmp_256
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffd6                 ; __rettmp_256
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        c     @>fffc(r9), @>fffe(r9)    ; y $y 
        jne   __l_1824
__l_1828:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000e
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_102 text >24202020202020202020202020202020202020202020202020202020202020202020202020    ;                                     
        even 

        bank 10, >6518

; Subroutine: playermove_51, level: 2
;   ffbe     -66  __rettmp_199: string [10]
;   ffbe     -66  __rettmp_200: string [14]
;   ffbe     -66  __rettmp_201: string [6]
;   ffbe     -66  __rettmp_202: int16
;   ffbe     -66  __rettmp_203: set of int64
;   ffde     -34  __rettmp_204: boolean
;   ffbe     -66  __rettmp_205: int16
;   ffbe     -66  __rettmp_206: set of int64
;   ffde     -34  __rettmp_207: boolean
;   ffbe     -66  __rettmp_208: boolean
;   ffbe     -66  __rettmp_209: string [2]
;   ffbe     -66  __rettmp_210: boolean
;   ffbe     -66  __rettmp_211: string [4]
;   ffbe     -66  __rettmp_212: int16
;   ffbe     -66  __rettmp_213: set of int64
;   ffde     -34  __rettmp_214: boolean
;   ffbe     -66  __rettmp_215: int16
;   ffbe     -66  __rettmp_216: set of int64
;   ffde     -34  __rettmp_217: boolean
;   ffbe     -66  __rettmp_218: boolean
;   ffbe     -66  __rettmp_219: int16
;   ffbe     -66  __rettmp_220: boolean
;   ffbe     -66  __rettmp_221: boolean
;   ffbe     -66  __rettmp_222: boolean
;   ffbe     -66  __rettmp_223: boolean
;   ffbe     -66  __rettmp_224: boolean
;   ffbe     -66  __rettmp_225: boolean
;   ffbe     -66  __rettmp_226: boolean
;   ffbe     -66  __rettmp_227: boolean
;   ffbe     -66  __rettmp_228: boolean
;   ffbe     -66  __rettmp_229: string [2]
;   ffbe     -66  __rettmp_230: boolean
;   ffbe     -66  __rettmp_231: string [2]
;   0004       4  var playmove: reference to record
;   0006       6  lastmove: record
;   000e      14  pturn: int16
;   ffe0     -32  i: int16
;   ffe2     -30  j: int16
;   ffe4     -28  k: int16
;   ffe6     -26  iloc: int16
;   ffe8     -24  eloc: int16
;   ffea     -22  initoffset: int16
;   ffec     -20  offset: int16
;   ffee     -18  offset1: int16
;   fff0     -16  ans: int16
;   fff2     -14  sideoffset: int16
;   fff4     -12  offset2: int16
;   fff6     -10  offset3: int16
;   fff8      -8  offset4: int16
;   fffa      -6  switchstate: int16
;   fffc      -4  validsq: boolean
;   fffd      -3  foundflag: boolean
;   fffe      -2  $i: int16

playermove_51:
        ai    r10, >ffb2
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0042
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>000e(r9), @>fd64        ; pturn  turn
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        clr   @>ffe0(r9)                ; i
        li    r1, >000e
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_1833
__l_1832:
        inc   @>ffe0(r9)                ; i
__l_1833:
        clr   r1
        mov   @>ffe0(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0f6e
        mov   @>ffe0(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        c     @>ffe0(r9), @>fffe(r9)    ; i $i 
        jne   __l_1832
__l_1847:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0006
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_103
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_199
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_199
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_104
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_200
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_200
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        clr   r1
        movb  @>8303, @>fffc(r9)        ; validsq
__l_1835:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_105
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_201
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_201
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_1836:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_202
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffbe(r9), @>fff0(r9)    ; __rettmp_202 ans
        mov   @>fff0(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1851
        sla   r14, 0
__l_1851:
        sra   r1, 3
        li    r2, __set_cnst_106
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1852
        inc   r1
__l_1852:
        ci    r1, >0000
        jeq   __l_1836
__l_1849:
        mov   @>fff0(r9), r1            ; ans
        ci    r1, >0055
        jne   __l_1854
__l_1853:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffa                 ; switchstate
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  utility_52
        mov   @>fffa(r9), r1            ; switchstate
        ci    r1, >0001
        jne   __l_1858
__l_1857:
        c     @>fd7c, @>fd66            ; humanside gameside 
        jeq   __l_1858
        b     @__l_2103
__l_1858:
        mov   @>fd6a, r1                ; piececount
        ci    r1, >ffff
        jne   __l_1866
        b     @__l_2103
__l_1866:
        b     @__l_1847
__l_1854:
        mov   @>fff0(r9), r1            ; ans
        li    r2, >0041
        s     r2, r1
        mov   r1, @>ffe6(r9)            ; iloc
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fff0(r9), r1            ; ans
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1837:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_205
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffbe(r9), @>fff0(r9)    ; __rettmp_205 ans
        mov   @>fff0(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1871
        sla   r14, 0
__l_1871:
        sra   r1, 3
        li    r2, __set_cnst_107
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1872
        inc   r1
__l_1872:
        ci    r1, >0000
        jeq   __l_1837
__l_1869:
        mov   @>fff0(r9), r1            ; ans
        ci    r1, >0052
        jne   __l_1874
        b     @__l_1847
__l_1874:
        mov   @>ffe6(r9), r1            ; iloc
        mov   @>fff0(r9), r2            ; ans
        li    r3, >0031
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffe6(r9)            ; iloc
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fff0(r9), r1            ; ans
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        mov   @>fd64, r1                ; turn
        jne   __l_1878
__l_1877:
        li    r1, >0068
        mov   r1, @>ffec(r9)            ; offset
        mov   r1, @>fff2(r9)            ; sideoffset
        jmp   __l_1879
__l_1878:
        li    r1, >0070
        mov   r1, @>ffec(r9)            ; offset
        mov   r1, @>fff2(r9)            ; sideoffset
__l_1879:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0180
        mov   @>ffe6(r9), r2            ; iloc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_208
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_208
        jne   __l_1882
__l_1881:
        li    r1, >0001
        movb  @>8303, @>fffc(r9)        ; validsq
        jmp   __l_1883
__l_1882:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1883:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_108
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_209
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_209
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        movb  @>fffc(r9), r1            ; validsq
        srl   r1, 8
        ci    r1, >0001
        jeq   __l_1885
        b     @__l_1835
__l_1885:
        mov   @>ffe6(r9), r1            ; iloc
        mov   @>0004(r9), r2            ; playmove
        mov   r1, @>0002(r2)
        clr   @>ffe0(r9)                ; i
        clr   r1
        movb  @>8303, @>fffd(r9)        ; foundflag
        mov   @>fd64, r1                ; turn
        jne   __l_1888
__l_1887:
        clr   @>ffea(r9)                ; initoffset
        jmp   __l_1889
__l_1888:
        li    r1, >0030
        mov   r1, @>ffea(r9)            ; initoffset
__l_1889:
        mov   @>ffea(r9), r1            ; initoffset
        a     @>ffe0(r9), r1            ; i 
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_210
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_210
        jne   __l_1892
__l_1891:
        li    r1, >0001
        movb  @>8303, @>fffd(r9)        ; foundflag
        mov   @>ffe0(r9), r1            ; i
        mov   @>0004(r9), r2            ; playmove
        mov   r1, *r2
        jmp   __l_1893
__l_1892:
        mov   @>ffe0(r9), r1            ; i
        ai    r1, >0008
        mov   r1, @>ffe0(r9)            ; i
__l_1893:
        movb  @>fffd(r9), r1            ; foundflag
        srl   r1, 8
        ci    r1, >0001
        jne   __l_1889
__l_1895:
        clr   r1
        movb  @>8303, @>fffc(r9)        ; validsq
__l_1839:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >001e
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_109
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_211
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_211
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_1840:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_212
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffbe(r9), @>fff0(r9)    ; __rettmp_212 ans
        mov   @>fff0(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1899
        sla   r14, 0
__l_1899:
        sra   r1, 3
        li    r2, __set_cnst_110
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1900
        inc   r1
__l_1900:
        ci    r1, >0000
        jeq   __l_1840
__l_1897:
        mov   @>fff0(r9), r1            ; ans
        ci    r1, >0052
        jne   __l_1902
        b     @__l_1847
__l_1902:
        mov   @>fff0(r9), r1            ; ans
        li    r2, >0041
        s     r2, r1
        mov   r1, @>ffe8(r9)            ; eloc
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fff0(r9), r1            ; ans
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_1841:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_215
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ffbe(r9), @>fff0(r9)    ; __rettmp_215 ans
        mov   @>fff0(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_1907
        sla   r14, 0
__l_1907:
        sra   r1, 3
        li    r2, __set_cnst_111
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_1908
        inc   r1
__l_1908:
        ci    r1, >0000
        jeq   __l_1841
__l_1905:
        mov   @>fff0(r9), r1            ; ans
        ci    r1, >0052
        jne   __l_1910
        b     @__l_1847
__l_1910:
        mov   @>ffe8(r9), r1            ; eloc
        mov   @>fff0(r9), r2            ; ans
        li    r3, >0031
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffe8(r9)            ; eloc
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fff0(r9), r1            ; ans
        swpb  r1
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        li    r1, >0180
        mov   @>ffe8(r9), r2            ; eloc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_218
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_218
        jne   __l_1913
        b     @__l_1914
__l_1913:
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, r1
        ci    r1, >0028
        jeq   __l_1920
        b     @__l_1918
__l_1920:
        mov   @>ffe6(r9), r1            ; iloc
        s     @>ffe8(r9), r1            ; eloc 
        abs   r1
        ci    r1, >0002
        jeq   __l_1917
        b     @__l_1918
__l_1917:
        mov   @>fd64, r1                ; turn
        jne   __l_1926
__l_1927:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_1923
__l_1926:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1930
        b     @__l_1924
__l_1930:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_1923
        b     @__l_1924
__l_1923:
        li    r1, >0060
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jeq   __l_1933
        b     @__l_1934
__l_1933:
        li    r1, >0f4e
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0f56
        mov   r1, @>fff4(r9)            ; offset2
        mov   @>fd7e, r1                ; wraflag
        jne   __l_1938
__l_1940:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_1938
__l_1937:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_220
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_220
        jne   __l_1938
__l_1943:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
__l_1938:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_1948
__l_1950:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_1948
__l_1947:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_221
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_221
        jne   __l_1948
__l_1953:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_1948:
        b     @__l_1924
__l_1934:
        li    r1, >0f5e
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0f66
        mov   r1, @>fff4(r9)            ; offset2
        mov   @>fd82, r1                ; braflag
        jne   __l_1958
__l_1960:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_1958
__l_1957:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_222
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_222
        jne   __l_1958
__l_1963:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_1958:
        mov   @>fd84, r1                ; blaflag
        jne   __l_1924
__l_1970:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_1924
__l_1967:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_223
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_223
        jne   __l_1924
__l_1973:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_1924:
        mov   @>fd64, r1                ; turn
        jne   __l_1980
__l_1981:
        mov   @>fd6c, r1                ; wcastleflag
        jeq   __l_1977
__l_1980:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jeq   __l_1984
        b     @__l_1978
__l_1984:
        mov   @>fd6e, r1                ; bcastleflag
        jeq   __l_1977
        b     @__l_1978
__l_1977:
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   r9, r1
        ai    r1, >0006                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_1987:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_1987
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd64, r1                ; turn
        jeq   __l_1988
        b     @__l_1989
__l_1988:
        li    r1, >0f36
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0f2e
        mov   r1, @>fff4(r9)            ; offset2
        mov   @>fd7e, r1                ; wraflag
        jne   __l_1993
__l_1995:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_1993
__l_1992:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_224
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_224
        jne   __l_1993
__l_1998:
        li    r1, >0001
        mov   r1, @>fd7e                ;  wraflag
__l_1993:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_2003
__l_2005:
        mov   @>fd86, r1                ; wrooklflag
        jne   __l_2003
__l_2002:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_225
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_225
        jne   __l_2003
__l_2008:
        li    r1, >0001
        mov   r1, @>fd80                ;  wlaflag
__l_2003:
        b     @__l_1978
__l_1989:
        li    r1, >0f46
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0f3e
        mov   r1, @>fff4(r9)            ; offset2
        mov   @>fd82, r1                ; braflag
        jne   __l_2013
__l_2015:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_2013
__l_2012:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_226
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_226
        jne   __l_2013
__l_2018:
        li    r1, >0001
        mov   r1, @>fd82                ;  braflag
__l_2013:
        mov   @>fd84, r1                ; blaflag
        jne   __l_1978
__l_2025:
        mov   @>fd8a, r1                ; brooklflag
        jne   __l_1978
__l_2022:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdba                 ; bit6
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_227
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_227
        jne   __l_1978
__l_2028:
        li    r1, >0001
        mov   r1, @>fd84                ;  blaflag
__l_1978:
        mov   @>fd64, r1                ; turn
        jne   __l_2033
__l_2035:
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_2033
__l_2032:
        mov   @>ffe6(r9), r1            ; iloc
        s     @>ffe8(r9), r1            ; eloc 
        ci    r1, >0000
        jlt   __l_2041
        jeq   __l_2041
__l_2043:
        mov   @>fd80, r1                ; wlaflag
        jne   __l_2041
__l_2042:
        mov   @>fd86, r1                ; wrooklflag
        jeq   __l_2038
__l_2041:
        mov   @>ffe6(r9), r1            ; iloc
        s     @>ffe8(r9), r1            ; eloc 
        ci    r1, >0000
        jgt   __l_2053
        jeq   __l_2053
__l_2048:
        mov   @>fd7e, r1                ; wraflag
        jne   __l_2053
__l_2047:
        mov   @>fd88, r1                ; wrookrflag
        jne   __l_2053
__l_2038:
        li    r1, >0001
        movb  @>8303, @>fffc(r9)        ; validsq
        jmp   __l_2053
__l_2033:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jne   __l_2053
__l_2055:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_2053
__l_2052:
        mov   @>ffe6(r9), r1            ; iloc
        s     @>ffe8(r9), r1            ; eloc 
        ci    r1, >0000
        jlt   __l_2061
        jeq   __l_2061
__l_2063:
        mov   @>fd84, r1                ; blaflag
        jne   __l_2061
__l_2062:
        mov   @>fd8a, r1                ; brooklflag
        jeq   __l_2058
__l_2061:
        mov   @>ffe6(r9), r1            ; iloc
        s     @>ffe8(r9), r1            ; eloc 
        ci    r1, >0000
        jgt   __l_2053
        jeq   __l_2053
__l_2068:
        mov   @>fd82, r1                ; braflag
        jne   __l_2053
__l_2067:
        mov   @>fd8c, r1                ; brookrflag
        jne   __l_2053
__l_2058:
        li    r1, >0001
        movb  @>8303, @>fffc(r9)        ; validsq
__l_2053:
        b     @__l_1914
__l_1918:
        ai    r10, >ffee
        mov   @>7ffe, @>0010(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>000e(r10)
        mov   r9, r1
        ai    r1, >0006                 ; lastmove
        mov   r10, r2
        ai    r2, >0006
        li    r3, >0008
__l_2072:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2072
        mov   @>fff2(r9), @>0004(r10)   ; sideoffset 
        mov   @>ffe6(r9), @>0002(r10)   ; iloc 
        mov   @>0004(r9), r1            ; playmove
        mov   *r1, *r10                 ;  
        bl    @__far_call_1
        data  >6010
        data  trim_43
        li    r1, >0180
        mov   @>ffe8(r9), r2            ; eloc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_228
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_228
        jne   __l_1914
__l_2073:
        li    r1, >0001
        movb  @>8303, @>fffc(r9)        ; validsq
__l_1914:
        movb  @>fffc(r9), r1            ; validsq
        jeq   __l_2077
        b     @__l_2078
__l_2077:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_108
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_229
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_229
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_2078:
        movb  @>fffc(r9), r1            ; validsq
        srl   r1, 8
        ci    r1, >0001
        jeq   __l_2081
        b     @__l_1839
__l_2081:
        mov   @>ffe8(r9), r1            ; eloc
        mov   @>0004(r9), r2            ; playmove
        mov   r1, @>0004(r2)
        li    r1, >0180
        mov   @>ffe6(r9), r2            ; iloc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0180
        mov   @>ffe8(r9), r2            ; eloc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        li    r1, >0060
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jne   __l_2084
__l_2083:
        clr   r1
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>ffec(r9)            ; offset
        li    r1, >0068
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0070
        mov   r1, @>fff4(r9)            ; offset2
        jmp   __l_2085
__l_2084:
        li    r1, >0030
        mov   @>0004(r9), r2            ; playmove
        a     *r2, r1                   ;  
        mov   r1, @>ffec(r9)            ; offset
        li    r1, >0070
        mov   r1, @>ffee(r9)            ; offset1
        li    r1, >0068
        mov   r1, @>fff4(r9)            ; offset2
__l_2085:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitor
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitnot
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>fff4(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>ffe0(r9)                ; i
        mov   @>fd64, r1                ; turn
        jne   __l_2088
__l_2087:
        li    r1, >0030
        mov   r1, @>ffec(r9)            ; offset
        jmp   __l_2089
__l_2088:
        clr   @>ffec(r9)                ; offset
__l_2089:
        mov   @>ffec(r9), r1            ; offset
        a     @>ffe0(r9), r1            ; i 
        mov   r1, @>ffee(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffee(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ffe0(r9), r1            ; i
        ai    r1, >0008
        mov   r1, @>ffe0(r9)            ; i
        ci    r1, >0028
        jlt   __l_2089
        jeq   __l_2089
__l_2091:
        ai    r10, >fff2
        mov   @>7ffe, @>000c(r10)
        mov   r9, r1
        ai    r1, >0006                 ; lastmove
        mov   r10, r2
        ai    r2, >0004
        li    r3, >0008
__l_2093:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2093
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, *r10
        bl    @__far_call_1
        data  >6010
        data  combinetrim_44
        mov   @>fd64, r1                ; turn
        jne   __l_2095
__l_2094:
        li    r1, >0028
        mov   r1, @>ffec(r9)            ; offset
        jmp   __l_2096
__l_2095:
        li    r1, >0058
        mov   r1, @>ffec(r9)            ; offset
__l_2096:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>fd64, r1                ; turn
        jne   __l_2099
__l_2098:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        jmp   __l_2100
__l_2099:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
__l_2100:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_230
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ffbe(r9), r1            ; __rettmp_230
        jeq   __l_2102
        b     @__l_2103
__l_2102:
        clr   @>ffe0(r9)                ; i
        li    r1, >000e
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_1844
__l_1843:
        inc   @>ffe0(r9)                ; i
__l_1844:
        li    r1, >0f6e
        mov   @>ffe0(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   r1
        mov   @>ffe0(r9), r2            ; i
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ffec(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ffec(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        c     @>ffe0(r9), @>fffe(r9)    ; i $i 
        jne   __l_1843
__l_2106:
        clr   r1
        movb  @>8303, @>fffc(r9)        ; validsq
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_108
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_231
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffbe                 ; __rettmp_231
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0800
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        b     @__l_1895
__l_2103:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >000c
        b     @__far_ret

__str_cnst_103 text >0a656e746572206d6f7665    ; enter move
__str_cnst_104 text >0e2020202020202020202020202020    ;               
__str_cnst_105 text >0666726f6d3a20    ; from: 
__str_cnst_108 text >022020    ;   
__str_cnst_109 text >04746f3a20    ; to: 
        even 

; ; Set Constants
__set_cnst_106:
        text >000000000000000001fe00300000000000000000000000000000000000000000
__set_cnst_107:
        text >00000000000001fe000000040000000000000000000000000000000000000000
__set_cnst_110:
        text >000000000000000001fe00040000000000000000000000000000000000000000
__set_cnst_111:
        text >00000000000001fe000000040000000000000000000000000000000000000000

        bank 11, >6060

; Subroutine: utility_52, level: 2
;   ed2e   -4818  __rettmp_159: string [13]
;   ed2e   -4818  __rettmp_160: string [19]
;   ed2e   -4818  __rettmp_161: string [10]
;   ed2e   -4818  __rettmp_162: string [11]
;   ed2e   -4818  __rettmp_163: string [14]
;   ed2e   -4818  __rettmp_164: string [13]
;   ed2e   -4818  __rettmp_165: string [16]
;   ed2e   -4818  __rettmp_166: string [14]
;   ed2e   -4818  __rettmp_167: string [8]
;   ed2e   -4818  __rettmp_168: string [12]
;   ed2e   -4818  __rettmp_169: string [14]
;   ed2e   -4818  __rettmp_170: int16
;   ed2e   -4818  __rettmp_171: set of int64
;   ed4e   -4786  __rettmp_172: boolean
;   ed2e   -4818  __rettmp_173: string [11]
;   ed2e   -4818  __rettmp_174: int16
;   ed2e   -4818  __rettmp_175: string [255]
;   ed2e   -4818  __rettmp_176: int16
;   ed2e   -4818  __rettmp_177: string [10]
;   ed2e   -4818  __rettmp_178: string [12]
;   ed2e   -4818  __rettmp_179: string [18]
;   ed2e   -4818  __rettmp_180: string [11]
;   ed2e   -4818  __rettmp_181: string [11]
;   ed2e   -4818  __rettmp_182: int16
;   ed2e   -4818  __rettmp_183: string [255]
;   ed2e   -4818  __rettmp_184: int16
;   ed2e   -4818  __rettmp_185: string [9]
;   ed2e   -4818  __rettmp_186: string [12]
;   ed2e   -4818  __rettmp_187: string [18]
;   ed2e   -4818  __rettmp_188: string [11]
;   ed2e   -4818  __rettmp_189: string [5]
;   ed2e   -4818  __rettmp_190: int16
;   ed2e   -4818  __rettmp_191: int16
;   ed2e   -4818  __rettmp_192: set of int64
;   ed4e   -4786  __rettmp_193: boolean
;   ed2e   -4818  __rettmp_194: string [6]
;   ed2e   -4818  __rettmp_195: string [15]
;   ed2e   -4818  __rettmp_196: int16
;   ed2e   -4818  __rettmp_197: set of int64
;   ed4e   -4786  __rettmp_198: boolean
;   0004       4  var switch: reference to int16
;   ee2e   -4562  y: int16
;   ee30   -4560  i: int16
;   ee32   -4558  ans: int16
;   ee34   -4556  offset: int16
;   ee36   -4554  storebase: int16
;   ee38   -4552  storeptr: int16
;   ee3a   -4550  tmpptr: int16
;   ee3c   -4548  tmpbase: int16
;   ee3e   -4546  iocheck: int16
;   ee40   -4544  tempgpointer: int16
;   ee42   -4542  utilflag: boolean
;   ee44   -4540  gbuffer: array [subrange (0..67) of int64] of int16
;   eecc   -4404  mbuffer: array [subrange (0..2048) of int64] of int16
;   fece    -306  gname: string [255]
;   ffce     -50  tempstore: record
;   ffd6     -42  gamefile: file of int16
;   fffe      -2  $i: int16

utility_52:
        ai    r10, >ed24
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >12d2
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>fd68, @>ee40(r9)        ; gamepointer tempgpointer
        clr   r1
        movb  @>8303, @>ee42(r9)        ; utilflag
        clr   r1
        mov   @>0004(r9), r2            ; switch
        mov   r1, *r2
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        li    r1, >0fa0
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee38                 ; storeptr
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fa2
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee36                 ; storebase
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ee38(r9), r1            ; storeptr
        li    r2, >0088
        s     r2, r1
        mov   r1, @>ee3a(r9)            ; tmpptr
        mov   @>ee36(r9), @>ee3c(r9)    ; storebase tmpbase
__l_2110:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0003
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_112
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_159
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_159
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0004
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_113
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_160
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_160
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0005
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_114
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_161
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_161
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0006
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_115
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_162
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_162
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0007
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_116
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_163
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_163
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0008
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_117
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_164
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_164
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0009
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_118
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_165
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_165
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_119
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_166
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_166
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_120
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_167
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_167
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000c
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_121
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_168
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_168
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000d
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_122
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_169
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_169
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_2111:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_170
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ed2e(r9), @>ee32(r9)    ; __rettmp_170 ans
        mov   @>ee32(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2142
        sla   r14, 0
__l_2142:
        sra   r1, 3
        li    r2, __set_cnst_123
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2143
        inc   r1
__l_2143:
        ci    r1, >0000
        jeq   __l_2111
__l_2140:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
        mov   @>ee32(r9), r1            ; ans
; no-opt
        ai    r1, >ffd0
        jne   __l_2145
        b     @__c_2137
__l_2145:
        dec   r1
        jeq   __c_2113
        dec   r1
        jne   __l_2147
        b     @__c_2121
__l_2147:
        dec   r1
        jne   __l_2148
        b     @__c_2129
__l_2148:
        dec   r1
        jne   __l_2149
        b     @__c_2130
__l_2149:
        dec   r1
        jne   __l_2150
        b     @__c_2132
__l_2150:
        dec   r1
        jne   __l_2151
        b     @__c_2131
__l_2151:
        dec   r1
        jne   __l_2152
        b     @__c_2133
__l_2152:
        dec   r1
        jne   __l_2153
        b     @__c_2134
__l_2153:
        dec   r1
        jne   __l_2154
        b     @__c_2136
__l_2154:
        ai    r1, >ffe9
        jeq   __c_2112
        b     @__l_2144
__c_2112:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6010
        data  printgame_45
        b     @__l_2144
__c_2113:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0009
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_124
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_173
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_173
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_174
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ed2e(r9), @>ee32(r9)    ; __rettmp_174 ans
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_175
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_string_73
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_175
        mov   r9, r2
        ai    r2, >fece                 ; gname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2156
        mov   r0, r3
__l_2156:
        movb  r3, *r2+
        jeq   __l_2157
        srl   r3, 8
__l_2158:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2158
__l_2157:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fefc
        mov   @>7ffe, @>0102(r10)
        mov   r9, r1
        ai    r1, >fece                 ; gname
        mov   r10, r2
        inct  r2
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2159
        mov   r0, r3
__l_2159:
        movb  r3, *r2+
        jeq   __l_2160
        srl   r3, 8
__l_2161:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2161
__l_2160:
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __assign_63
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0002
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __reset_bin_65
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_176
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  ioresult_75
        mov   @>ed2e(r9), @>ee3e(r9)    ; __rettmp_176 iocheck
        mov   @>ee3e(r9), r1            ; iocheck
        jeq   __l_2162
        b     @__l_2163
__l_2162:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_125
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_177
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_177
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >1000
        mov   r1, @>fd62                ;  datasize
        clr   @>ee34(r9)                ; offset
        clr   @>ee30(r9)                ; i
        li    r1, >07ff
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_2115
__l_2114:
        inc   @>ee30(r9)                ; i
__l_2115:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >eecc                 ; mbuffer
        mov   @>ee30(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        c     @>ee30(r9), @>fffe(r9)    ; i $i 
        jne   __l_2114
__l_2166:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >eecc                 ; mbuffer
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee38                 ; storeptr
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee36                 ; storebase
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd74                 ; gameply
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd66                 ; gameside
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd68                 ; gamepointer
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        mov   @>fd68, @>ee40(r9)        ; gamepointer tempgpointer
        mov   @>ee38(r9), r1            ; storeptr
        li    r2, >0088
        s     r2, r1
        mov   r1, @>ee3a(r9)            ; tmpptr
        mov   @>ee36(r9), @>ee3c(r9)    ; storebase tmpbase
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        li    r1, >0fa0
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee38                 ; storeptr
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fa2
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee36                 ; storebase
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0018
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0088
        mov   r1, @>fd62                ;  datasize
        clr   @>ee34(r9)                ; offset
__l_2117:
        clr   @>ee30(r9)                ; i
        li    r1, >0043
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_2119
__l_2118:
        inc   @>ee30(r9)                ; i
__l_2119:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee44                 ; gbuffer
        mov   @>ee30(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_bin_typed_68
        c     @>ee30(r9), @>fffe(r9)    ; i $i 
        jne   __l_2118
__l_2168:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee44                 ; gbuffer
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ee34(r9), r1            ; offset
        ai    r1, >0088
        mov   r1, @>ee34(r9)            ; offset
        ci    r1, >0fef
        jlt   __l_2171
        jeq   __l_2171
__l_2170:
        clr   @>ee34(r9)                ; offset
        mov   @>fd5e, r1                ; startpage
        inc   r1
        mov   r1, @>fd5e                ;  startpage
__l_2171:
        c     @>ee34(r9), @>ee38(r9)    ; offset storeptr 
        jne   __l_2117
__l_2175:
        c     @>fd5e, @>ee36(r9)        ; startpage storebase 
        jne   __l_2117
__l_2174:
        mov   @>eebc(r9), @>fd6c        ; gbuffer  wcastleflag
        mov   @>eebe(r9), @>fd6e        ; gbuffer  bcastleflag
        mov   @>eec0(r9), @>fd86        ; gbuffer  wrooklflag
        mov   @>eec2(r9), @>fd88        ; gbuffer  wrookrflag
        mov   @>eec4(r9), @>fd8a        ; gbuffer  brooklflag
        mov   @>eec6(r9), @>fd8c        ; gbuffer  brookrflag
        mov   @>eec8(r9), @>fd72        ; gbuffer  cwarning
        mov   @>eeca(r9), @>fd7a        ; gbuffer  gamemove
        mov   @>ee38(r9), r1            ; storeptr
        jlt   __l_2179
        jeq   __l_2179
__l_2178:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>ee38(r9), r1            ; storeptr
        li    r2, >0088
        s     r2, r1
        mov   r1, @>0002(r10)
        mov   @>ee36(r9), *r10          ; storebase 
        bl    @__far_call_1
        data  >6016
        data  updateboard_53
        jmp   __l_2180
__l_2179:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0f67
        mov   r1, @>0002(r10)
        mov   @>ee36(r9), r1            ; storebase
        dec   r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6016
        data  updateboard_53
__l_2180:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __close_70
        b     @__l_2164
__l_2163:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_126
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_178
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_178
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>ee3e(r9), @>0002(r10)   ; iocheck 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
__l_2164:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_127
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_179
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_179
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_128
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_180
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_180
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        b     @__l_2144
__c_2121:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0009
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_124
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_181
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_181
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_182
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ed2e(r9), @>ee32(r9)    ; __rettmp_182 ans
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_183
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_string_73
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_183
        mov   r9, r2
        ai    r2, >fece                 ; gname
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2182
        mov   r0, r3
__l_2182:
        movb  r3, *r2+
        jeq   __l_2183
        srl   r3, 8
__l_2184:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2184
__l_2183:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        ai    r10, >fefc
        mov   @>7ffe, @>0102(r10)
        mov   r9, r1
        ai    r1, >fece                 ; gname
        mov   r10, r2
        inct  r2
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2185
        mov   r0, r3
__l_2185:
        movb  r3, *r2+
        jeq   __l_2186
        srl   r3, 8
__l_2187:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2187
__l_2186:
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __assign_63
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0002
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __rewrite_bin_64
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_184
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  ioresult_75
        mov   @>ed2e(r9), @>ee3e(r9)    ; __rettmp_184 iocheck
        mov   @>ee3e(r9), r1            ; iocheck
        jeq   __l_2188
        b     @__l_2189
__l_2188:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_129
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_185
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_185
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >1000
        mov   r1, @>fd62                ;  datasize
        clr   @>ee34(r9)                ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >eecc                 ; mbuffer
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>ee30(r9)                ; i
        li    r1, >07ff
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_2123
__l_2122:
        inc   @>ee30(r9)                ; i
__l_2123:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >eecc                 ; mbuffer
        mov   @>ee30(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        c     @>ee30(r9), @>fffe(r9)    ; i $i 
        jne   __l_2122
__l_2192:
        li    r1, >0018
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0088
        mov   r1, @>fd62                ;  datasize
        clr   @>ee34(r9)                ; offset
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee38                 ; storeptr
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee36                 ; storebase
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd74                 ; gameply
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd66                 ; gameside
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd68                 ; gamepointer
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
__l_2125:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee44                 ; gbuffer
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        clr   @>ee30(r9)                ; i
        li    r1, >0043
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_2127
__l_2126:
        inc   @>ee30(r9)                ; i
__l_2127:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ee44                 ; gbuffer
        mov   @>ee30(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_bin_typed_66
        c     @>ee30(r9), @>fffe(r9)    ; i $i 
        jne   __l_2126
__l_2194:
        mov   @>ee34(r9), r1            ; offset
        ai    r1, >0088
        mov   r1, @>ee34(r9)            ; offset
        ci    r1, >0fef
        jlt   __l_2197
        jeq   __l_2197
__l_2196:
        mov   @>fd5e, r1                ; startpage
        inc   r1
        mov   r1, @>fd5e                ;  startpage
        clr   @>ee34(r9)                ; offset
__l_2197:
        c     @>ee34(r9), @>ee38(r9)    ; offset storeptr 
        jne   __l_2125
__l_2201:
        c     @>fd5e, @>ee36(r9)        ; startpage storebase 
        jne   __l_2125
__l_2200:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffd6                 ; gamefile
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __close_70
        b     @__l_2190
__l_2189:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_126
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_186
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_186
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>ee3e(r9), @>0002(r10)   ; iocheck 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
__l_2190:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_127
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_187
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_187
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000b
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_128
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_188
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_188
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        b     @__l_2144
__c_2129:
        mov   @>ee3a(r9), r1            ; tmpptr
        li    r2, >0088
        s     r2, r1
        mov   r1, @>ee3a(r9)            ; tmpptr
        mov   r1, r1                    ; tmpptr
        jgt   __l_2205
        jeq   __l_2205
__l_2204:
        mov   @>ee3c(r9), r1            ; tmpbase
        dec   r1
        mov   r1, @>ee3c(r9)            ; tmpbase
        clr   @>ee3a(r9)                ; tmpptr
__l_2205:
        mov   @>ee3c(r9), r1            ; tmpbase
        ci    r1, >0018
        jgt   __l_2209
        jeq   __l_2209
__l_2208:
        li    r1, >0018
        mov   r1, @>ee3c(r9)            ; tmpbase
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        b     @__l_2144
__l_2209:
        mov   @>ee40(r9), r1            ; tempgpointer
        li    r2, >0010
        s     r2, r1
        mov   r1, @>ee40(r9)            ; tempgpointer
        mov   r1, r1                    ; tempgpointer
        jgt   __l_2213
        jeq   __l_2213
__l_2212:
        clr   @>ee40(r9)                ; tempgpointer
__l_2213:
        li    r1, >0010
        mov   r1, @>fd62                ;  datasize
        mov   @>ee3a(r9), r1            ; tmpptr
        ai    r1, >0078
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee44                 ; gbuffer
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>ee3c(r9), @>0002(r10)   ; tmpbase 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ee44(r9), @>fd6c        ; gbuffer  wcastleflag
        mov   @>ee46(r9), @>fd6e        ; gbuffer  bcastleflag
        mov   @>ee48(r9), @>fd86        ; gbuffer  wrooklflag
        mov   @>ee4a(r9), @>fd88        ; gbuffer  wrookrflag
        mov   @>ee4c(r9), @>fd8a        ; gbuffer  brooklflag
        mov   @>ee4e(r9), @>fd8c        ; gbuffer  brookrflag
        mov   @>ee50(r9), @>fd72        ; gbuffer  cwarning
        mov   @>ee52(r9), @>fd7a        ; gbuffer  gamemove
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>ee3a(r9), @>0002(r10)   ; tmpptr 
        mov   @>ee3c(r9), *r10          ; tmpbase 
        bl    @__far_call_1
        data  >6016
        data  updateboard_53
        b     @__l_2144
__c_2130:
        c     @>ee3c(r9), @>ee36(r9)    ; tmpbase storebase 
        jne   __l_2216
__l_2219:
        c     @>ee3c(r9), @>ee36(r9)    ; tmpbase storebase 
        jne   __l_2217
__l_2221:
        mov   @>ee3a(r9), r1            ; tmpptr
        mov   @>ee38(r9), r2            ; storeptr
        li    r3, >0088
        s     r3, r2
        c     r1, r2
        jgt   __l_2217
        jeq   __l_2217
__l_2216:
        mov   @>ee40(r9), r1            ; tempgpointer
        ai    r1, >0010
        mov   r1, @>ee40(r9)            ; tempgpointer
        c     r1, @>fd68                ; gamepointer 
        jlt   __l_2225
        jeq   __l_2225
__l_2224:
        mov   @>fd68, @>ee40(r9)        ; gamepointer tempgpointer
__l_2225:
        mov   @>ee3a(r9), r1            ; tmpptr
        ai    r1, >0088
        mov   r1, @>ee3a(r9)            ; tmpptr
        ci    r1, >0fef
        jlt   __l_2229
        jeq   __l_2229
__l_2228:
        mov   @>ee3c(r9), r1            ; tmpbase
        inc   r1
        mov   r1, @>ee3c(r9)            ; tmpbase
        clr   @>ee3a(r9)                ; tmpptr
        b     @__l_2213
__l_2229:
        b     @__l_2213
__l_2217:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        b     @__l_2144
__c_2131:
        mov   @>fd68, @>ee40(r9)        ; gamepointer tempgpointer
        mov   @>ee38(r9), r1            ; storeptr
        li    r2, >0088
        s     r2, r1
        mov   r1, @>ee3a(r9)            ; tmpptr
        mov   @>ee36(r9), @>ee3c(r9)    ; storebase tmpbase
        b     @__l_2213
__c_2132:
        clr   @>ee40(r9)                ; tempgpointer
        clr   @>ee3a(r9)                ; tmpptr
        li    r1, >0018
        mov   r1, @>ee3c(r9)            ; tmpbase
        b     @__l_2213
__c_2133:
        mov   @>fd7c, r1                ; humanside
        jne   __l_2233
__l_2232:
        li    r1, >0001
        mov   r1, @>fd7c                ;  humanside
        jmp   __l_2234
__l_2233:
        clr   @>fd7c                    ;  humanside
__l_2234:
        li    r1, >0001
        mov   @>0004(r9), r2            ; switch
        mov   r1, *r2
        b     @__c_2136
__c_2134:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
__l_2135:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_130
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_189
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_189
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_190
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ed2e(r9), @>ee32(r9)    ; __rettmp_190 ans
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >ff62                 ; input
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_191
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_int_72
        mov   @>ed2e(r9), @>fd74        ; __rettmp_191  gameply
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff62                 ; input
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_lf_74
        mov   @>fd74, r1                ; gameply
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2238
        sla   r14, 0
__l_2238:
        sra   r1, 3
        li    r2, __set_cnst_131
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2239
        inc   r1
__l_2239:
        ci    r1, >0000
        jne   __l_2236
        b     @__l_2135
__l_2236:
        mov   @>fd74, @>fd70            ; gameply  ply
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_132
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_194
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_194
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd74, @>0002(r10)       ; gameply 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
        b     @__l_2144
__c_2136:
        mov   @>ee3c(r9), @>ee36(r9)    ; tmpbase storebase
        mov   @>ee3a(r9), r1            ; tmpptr
        ai    r1, >0088
        mov   r1, @>ee38(r9)            ; storeptr
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0002
        mov   r1, @>fd62                ;  datasize
        li    r1, >0fa0
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee38                 ; storeptr
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0fa2
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ee36                 ; storebase
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0001
        movb  @>8303, @>ee42(r9)        ; utilflag
        mov   @>fd66, @>fd64            ; gameside  turn
        mov   @>ee40(r9), @>fd68        ; tempgpointer  gamepointer
        li    r1, >0063
        mov   r1, @>ffce(r9)            ; tempstore
        li    r1, >0016
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        li    r1, >0380
        a     @>fd68, r1                ; gamepointer 
        mov   r1, @>ee34(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ffce                 ; tempstore
        mov   r1, @>0008(r10)
        mov   @>ee34(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
        b     @__l_2144
__c_2137:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >000a
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_133
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_195
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_195
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_2138:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ed2e                 ; __rettmp_196
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  getkeyint_9
        mov   @>ed2e(r9), @>ee32(r9)    ; __rettmp_196 ans
        mov   @>ee32(r9), r1            ; ans
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2242
        sla   r14, 0
__l_2242:
        sra   r1, 3
        li    r2, __set_cnst_134
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2243
        inc   r1
__l_2243:
        ci    r1, >0000
        jeq   __l_2138
__l_2240:
        mov   @>ee32(r9), r1            ; ans
        ci    r1, >0059
        jne   __l_2245
__l_2244:
        seto  @>fd6a                    ;  piececount
        li    r1, >0001
        movb  @>8303, @>ee42(r9)        ; utilflag
__l_2245:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6016
        data  clearfields_54
__l_2144:
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        movb  @>ee42(r9), r1            ; utilflag
        jne   __l_2248
        b     @__l_2110
__l_2248:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

__str_cnst_112 text >0d5b315d206c6f61642067616d65    ; [1] load game
__str_cnst_113 text >135b325d20736176652067616d65202020202020    ; [2] save game      
__str_cnst_114 text >0a5b335d206261636b7570    ; [3] backup
__str_cnst_115 text >0b5b345d20666f7277617264    ; [4] forward
__str_cnst_116 text >0e5b355d206669727374206d6f7665    ; [5] first move
__str_cnst_117 text >0d5b365d206c617374206d6f7665    ; [6] last move
__str_cnst_118 text >105b375d20737769746368207369646573    ; [7] switch sides
__str_cnst_119 text >0e5b385d206368616e676520706c79    ; [8] change ply
__str_cnst_120 text >085b395d20706c6179    ; [9] play
__str_cnst_121 text >0c5b305d20656e642067616d65    ; [0] end game
__str_cnst_122 text >0e5b505d207072696e742067616d65    ; [P] print game
__str_cnst_124 text >0b66696c65206e616d653a20    ; file name: 
__str_cnst_125 text >0a6c6f6164696e672e2e2e    ; loading...
__str_cnst_126 text >0c66696c65206572726f722023    ; file error #
__str_cnst_127 text >12202020202020202020202020202020202020    ;                   
__str_cnst_128 text >0b2020202020202020202020    ;            
__str_cnst_129 text >09736176696e672e2e2e    ; saving...
__str_cnst_130 text >05706c793a20    ; ply: 
__str_cnst_132 text >06706c79203a20    ; ply : 
__str_cnst_133 text >0f656e642067616d653f205b792f6e5d    ; end game? [y/n]
        even 

; ; Set Constants
__set_cnst_123:
        text >00000000000003ff000000010000000000000000000000000000000000000000
__set_cnst_131:
        text >003c000000000000000000000000000000000000000000000000000000000000
__set_cnst_134:
        text >0000000000000000400002000000000000000000000000000000000000000000

        bank 11, >7a60

; Subroutine: updateboard_53, level: 2
;   ff7a    -134  __rettmp_153: string [11]
;   ff7a    -134  __rettmp_154: string [11]
;   ff7a    -134  __rettmp_155: string [6]
;   ff7a    -134  __rettmp_156: string [6]
;   ff7a    -134  __rettmp_157: string [6]
;   0004       4  gbase: int16
;   0006       6  goffset: int16
;   ff86    -122  offset: int16
;   ff88    -120  buffer: array [subrange (0..59) of int64] of int16

updateboard_53:
        ai    r10, >ff74
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0086
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), @>fd5e        ; gbase  startpage
        li    r1, >0078
        mov   r1, @>fd62                ;  datasize
        mov   @>0006(r9), @>ff86(r9)    ; goffset offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff88                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff86(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        clr   @>ff86(r9)                ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff88                 ; buffer
        mov   r1, @>0008(r10)
        mov   @>ff86(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0001
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6010
        data  boarddisplay_46
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0002
        mov   r1, @>0002(r10)
        clr   *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   @>fd66, r1                ; gameside
        jne   __l_2252
__l_2251:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_135
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_153
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_153
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        jmp   __l_2253
__l_2252:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_136
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_154
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_154
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_2253:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >000a
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_137
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_155
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_155
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>fd7a, @>0002(r10)       ; gamemove 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_int_60
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0001
        mov   r1, @>0002(r10)
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   @>fd72, r1                ; cwarning
        ci    r1, >0001
        jne   __l_2256
__l_2255:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >0700
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_138
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_156
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_156
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        jmp   __l_2257
__l_2256:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_139
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_157
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ff7a                 ; __rettmp_157
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_2257:
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

__str_cnst_135 text >0b7475726e3a207768697465    ; turn: white
__str_cnst_136 text >0b7475726e3a20626c61636b    ; turn: black
__str_cnst_137 text >066d6f76653a20    ; move: 
__str_cnst_138 text >06636865636b21    ; check!
__str_cnst_139 text >06202020202020    ;       
        even 

        bank 11, >7d80

; Subroutine: clearfields_54, level: 2
;   ffea     -22  __rettmp_158: string [16]
;   fffc      -4  y: int16
;   fffe      -2  $y: int16

clearfields_54:
        ai    r10, >ffe4
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0016
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0003
        mov   r1, @>fffc(r9)            ; y
        li    r1, >000d
        mov   r1, @>fffe(r9)            ; $y
        jmp   __l_2260
__l_2259:
        inc   @>fffc(r9)                ; y
__l_2260:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fffc(r9), @>0002(r10)   ; y 
        li    r1, >0014
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_140
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ffea                 ; __rettmp_158
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >ffea                 ; __rettmp_158
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        c     @>fffc(r9), @>fffe(r9)    ; y $y 
        jne   __l_2259
__l_2263:
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

__str_cnst_140 text >1020202020202020202020202020202020    ;                 
        even 

        bank 12, >6060

; Subroutine: dsrlink_55, level: 2
;   feee    -274  __rettmp_350: int16
;   feee    -274  __rettmp_352: string [255]
;   feee    -274  __rettmp_353: boolean
;   0004       4  var result: reference to boolean
;   0006       6  var pab: reference to record
;   0008       8  pabvdpaddr: int16
;   ffee     -18  cruaddr: int16
;   fff0     -16  len: int16
;   fff2     -14  dsrlist: pointer to record (tstandardheadernode)
;   fff4     -12  completed: boolean
;   fff5     -11  device: string [7]
;   fffe      -2  $cruaddr: int16

dsrlink_55:
        ai    r10, >fee4
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0112
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0006(r9), r1            ; pab
        ai    r1, >0009                 ; .name
        mov   r1, @>0004(r10)
        li    r1, >2e00
        movb  r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >feee                 ; __rettmp_350
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  pos_77
        mov   @>feee(r9), r1            ; __rettmp_350
        dec   r1
        mov   r1, @>fff0(r9)            ; len
        ci    r1, >ffff
        jne   __l_2273
__l_2272:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0006(r9), r1            ; pab
        ai    r1, >0009                 ; .name
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff0                 ; len
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  length_76
__l_2273:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        mov   @>fff0(r9), @>0006(r10)   ; len 
        li    r1, >0001
        mov   r1, @>0004(r10)
        mov   @>0006(r9), r1            ; pab
        ai    r1, >0009                 ; .name
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >feee                 ; __rettmp_352
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  copy_78
        mov   r9, r1
        ai    r1, >feee                 ; __rettmp_352
        mov   r9, r2
        ai    r2, >fff5                 ; device
        li    r0, >0700
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2276
        mov   r0, r3
__l_2276:
        movb  r3, *r2+
        jeq   __l_2277
        srl   r3, 8
__l_2278:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2278
__l_2277:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0024
        mov   r1, @>0004(r10)
        mov   @>0008(r9), @>0002(r10)   ; pabvdpaddr 
        mov   @>0006(r9), *r10          ; pab 
        bl    @__far_call_1
        data  >6004
        data  vmbw
        mov   @>0008(r9), r1            ; pabvdpaddr
        ai    r1, >000a
        a     @>fff0(r9), r1            ; len 
        mov   r1, @>8356                ;  memw 
        mov   @>fff0(r9), @>8354        ; len  memw 
        li    r1, >0010
        mov   r1, @>ffee(r9)            ; cruaddr
        li    r1, >001f
        mov   r1, @>fffe(r9)            ; $cruaddr
        jmp   __l_2266
__l_2265:
        inc   @>ffee(r9)                ; cruaddr
__l_2266:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>ffee(r9), r1            ; cruaddr
        sla   r1, 8
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        c     @>ffee(r9), @>fffe(r9)    ; cruaddr $cruaddr 
        jne   __l_2265
__l_2280:
        li    r1, >1000
        mov   r1, @>ffee(r9)            ; cruaddr
        clr   r1
        movb  @>8303, @>fff4(r9)        ; completed
__l_2268:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >0100
        movb  r1, @>0002(r10)
        mov   @>ffee(r9), *r10          ; cruaddr 
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        movb  @>4000, r1                ; header
        srl   r1, 8
        ci    r1, >00aa
        jne   __l_2283
__l_2282:
        mov   @>4008, @>fff2(r9)        ; header .dsrlist dsrlist
__l_2269:
        mov   @>fff2(r9), r1            ; dsrlist
        jeq   __l_2283
__l_2287:
        movb  @>fff4(r9), r1            ; completed
        jne   __l_2283
__l_2286:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   r9, r1
        ai    r1, >fff5                 ; device
        mov   r1, @>0004(r10)
        mov   @>fff2(r9), r1            ; dsrlist
        ai    r1, >0004                 ; .name
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >feee                 ; __rettmp_353
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __short_str_equal_81
        movb  @>feee(r9), r1            ; __rettmp_353
        jeq   __l_2291
__l_2290:
        mov   @>fff2(r9), r1            ; dsrlist
        mov   @>0002(r1), @>83f2        ;   memw 
        mov   @>ffee(r9), @>83f8        ; cruaddr  memw 
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; completed
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  calldsr
__l_2291:
        mov   @>fff2(r9), r1            ; dsrlist
        mov   *r1, @>fff2(r9)           ;  dsrlist
        jmp   __l_2269
__l_2283:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>ffee(r9), *r10          ; cruaddr 
        bl    @__far_call_1
        data  >6004
        data  setcrubit
        mov   r9, r1
        ai    r1, >ffee                 ; cruaddr
        li    r2, >0100
        a     r2, *r1
        mov   @>ffee(r9), r1            ; cruaddr
        ci    r1, >2000
        jeq   __l_2294
__l_2295:
        movb  @>fff4(r9), r1            ; completed
        jne   __l_2294
        b     @__l_2268
__l_2294:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0024
        mov   r1, @>0004(r10)
        mov   @>0008(r9), @>0002(r10)   ; pabvdpaddr 
        mov   @>0006(r9), *r10          ; pab 
        bl    @__far_call_1
        data  >6004
        data  vmbr
        movb  @>fff4(r9), r1            ; completed
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 12, >62e4

; Subroutine: calldsr, level: 2
;   0000       0  var res: reference to boolean

calldsr:
        lwpi  >83e0
        bl    *r9
        jmp   calldsr_1
        lwpi  >8300
        li    r0, >0100
        jmp   calldsr_2
calldsr_1:
        lwpi  >8300
        clr   r0
calldsr_2:
        mov   *r10, r12
        movb  r0, *r12
        ai    r10, >0002
        b     @__far_ret

        bank 12, >6308

; Subroutine: evaluate_56, level: 2
;   ff28    -216  __rettmp_354: set of int64
;   ff48    -184  __rettmp_355: boolean
;   ff28    -216  __rettmp_356: set of int64
;   ff48    -184  __rettmp_357: boolean
;   ff28    -216  __rettmp_358: set of int64
;   ff48    -184  __rettmp_359: boolean
;   ff28    -216  __rettmp_360: int16
;   ff28    -216  __rettmp_361: boolean
;   ff28    -216  __rettmp_362: boolean
;   ff28    -216  __rettmp_363: boolean
;   ff28    -216  __rettmp_364: boolean
;   ff28    -216  __rettmp_365: boolean
;   ff28    -216  __rettmp_366: boolean
;   ff28    -216  __rettmp_367: boolean
;   ff28    -216  __rettmp_368: boolean
;   ff28    -216  __rettmp_369: boolean
;   ff28    -216  __rettmp_370: boolean
;   ff28    -216  __rettmp_371: boolean
;   ff28    -216  __rettmp_372: int16
;   ff30    -208  __rettmp_373: set of int64
;   ff50    -176  __rettmp_374: boolean
;   ff28    -216  __rettmp_375: int16
;   0004       4  var result: reference to int16
;   0006       6  cmoveflag: int16
;   0008       8  attackflag: int16
;   000a      10  attackid: int16
;   000c      12  capid: int16
;   000e      14  lastmove: record
;   0016      22  tempmove: record
;   ff52    -174  spage1: int16
;   ff54    -172  dsize: int16
;   ff56    -170  initoffset: int16
;   ff58    -168  offset: int16
;   ff5a    -166  offset1: int16
;   ff5c    -164  offset2: int16
;   ff5e    -162  i: int16
;   ff60    -160  j: int16
;   ff62    -158  k: int16
;   ff64    -156  l: int16
;   ff66    -154  spage2: int16
;   ff68    -152  side: int16
;   ff6a    -150  wscore: int16
;   ff6c    -148  bscore: int16
;   ff6e    -146  evalscore: int16
;   ff70    -144  pawncount: int16
;   ff72    -142  bonus: int16
;   ff74    -140  endgame: int16
;   ff76    -138  ploc: int16
;   ff78    -136  locarray: array [subrange (0..64) of int64] of int16
;   fffa      -6  $l: int16
;   fffc      -4  $i: int16
;   fffe      -2  $side: int16

evaluate_56:
        ai    r10, >ff1a
        mov   r10, r12
        mov   r5, *r12+
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >00d8
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0015
        mov   r1, @>ff52(r9)            ; spage1
        li    r1, >0002
        mov   r1, @>ff54(r9)            ; dsize
        clr   @>ff6a(r9)                ; wscore
        clr   @>ff6c(r9)                ; bscore
        clr   @>ff74(r9)                ; endgame
        li    r1, >0014
        mov   r1, @>fd5e                ;  startpage
        li    r1, >0008
        mov   r1, @>fd62                ;  datasize
        mov   @>0008(r9), r1            ; attackflag
        ci    r1, >0001
        jeq   __l_2326
        b     @__l_2324
__l_2326:
        c     @>fd64, @>fd66            ; turn gameside 
        jeq   __l_2323
        b     @__l_2324
__l_2323:
        clr   @>ff72(r9)                ; bonus
        mov   @>000a(r9), r1            ; attackid
; no-opt
        jeq   __c_2299
        ai    r1, >fff8
        jeq   __c_2300
        ai    r1, >fff8
        jeq   __c_2301
        ai    r1, >fff8
        jeq   __c_2301
        ai    r1, >fff8
        jeq   __c_2302
        jmp   __l_2329
__c_2299:
        mov   @>000c(r9), r1            ; capid
        jne   __l_2336
__l_2335:
        li    r1, >000a
        mov   r1, @>ff72(r9)            ; bonus
        jmp   __l_2329
__l_2336:
        li    r1, >0032
        mov   r1, @>ff72(r9)            ; bonus
        jmp   __l_2329
__c_2300:
        mov   @>000c(r9), r1            ; capid
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2343
        sla   r14, 0
__l_2343:
        sra   r1, 3
        li    r2, __set_cnst_141
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2344
        inc   r1
__l_2344:
        ci    r1, >0000
        jeq   __l_2329
__l_2339:
        li    r1, >0032
        mov   r1, @>ff72(r9)            ; bonus
        jmp   __l_2329
__c_2301:
        mov   @>000c(r9), r1            ; capid
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2349
        sla   r14, 0
__l_2349:
        sra   r1, 3
        li    r2, __set_cnst_142
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2350
        inc   r1
__l_2350:
        ci    r1, >0000
        jeq   __l_2346
__l_2345:
        li    r1, >0032
        mov   r1, @>ff72(r9)            ; bonus
        jmp   __l_2329
__l_2346:
        mov   @>000c(r9), r1            ; capid
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2355
        sla   r14, 0
__l_2355:
        sra   r1, 3
        li    r2, __set_cnst_143
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2356
        inc   r1
__l_2356:
        ci    r1, >0000
        jeq   __l_2329
__l_2351:
        li    r1, >0019
        mov   r1, @>ff72(r9)            ; bonus
        jmp   __l_2329
__c_2302:
        mov   @>000c(r9), r1            ; capid
        ci    r1, >0020
        jne   __l_2329
__l_2357:
        li    r1, >0032
        mov   r1, @>ff72(r9)            ; bonus
__l_2329:
        mov   @>fd64, r1                ; turn
        jne   __l_2362
__l_2361:
        mov   @>ff6a(r9), r1            ; wscore
        a     @>ff72(r9), r1            ; bonus 
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2324
__l_2362:
        mov   @>ff6c(r9), r1            ; bscore
        a     @>ff72(r9), r1            ; bonus 
        mov   r1, @>ff6c(r9)            ; bscore
__l_2324:
        mov   @>0016(r9), r1            ; tempmove
        ci    r1, >0028
        jne   __l_2366
__l_2368:
        mov   @>0006(r9), r1            ; cmoveflag
        jne   __l_2366
__l_2365:
        mov   @>fd64, r1                ; turn
        jne   __l_2372
__l_2374:
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_2372
__l_2371:
        mov   @>ff6a(r9), r1            ; wscore
        li    r2, >0190
        s     r2, r1
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2366
__l_2372:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jne   __l_2366
__l_2380:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_2366
__l_2377:
        mov   @>ff6c(r9), r1            ; bscore
        li    r2, >0190
        s     r2, r1
        mov   r1, @>ff6c(r9)            ; bscore
__l_2366:
        mov   @>0016(r9), r1            ; tempmove
        ci    r1, >0008
        jne   __l_2384
__l_2386:
        mov   @>fd7a, r1                ; gamemove
        ci    r1, >000d
        jgt   __l_2384
        jeq   __l_2384
__l_2383:
        mov   @>fd64, r1                ; turn
        jne   __l_2390
__l_2392:
        mov   @>fd6c, r1                ; wcastleflag
        jne   __l_2390
__l_2389:
        mov   @>ff6a(r9), r1            ; wscore
        li    r2, >01f4
        s     r2, r1
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2384
__l_2390:
        mov   @>fd64, r1                ; turn
        ci    r1, >0001
        jne   __l_2384
__l_2398:
        mov   @>fd6e, r1                ; bcastleflag
        jne   __l_2384
__l_2395:
        mov   @>ff6c(r9), r1            ; bscore
        li    r2, >01f4
        s     r2, r1
        mov   r1, @>ff6c(r9)            ; bscore
__l_2384:
        mov   @>fd64, r1                ; turn
        jne   __l_2402
__l_2401:
        li    r1, >0fde
        mov   r1, @>ff5a(r9)            ; offset1
        jmp   __l_2403
__l_2402:
        li    r1, >0fd6
        mov   r1, @>ff5a(r9)            ; offset1
__l_2403:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff78                 ; locarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        mov   @>ff78(r9), r1            ; locarray
        ci    r1, >0005
        jgt   __l_2406
__l_2405:
        li    r1, >0001
        mov   r1, @>ff74(r9)            ; endgame
__l_2406:
        mov   @>ff78(r9), r1            ; locarray
        ci    r1, >0003
        jgt   __l_2410
__l_2409:
        li    r1, >0002
        mov   r1, @>ff74(r9)            ; endgame
__l_2410:
        c     @>fd76, @>fd78            ; wmobility bmobility 
        jlt   __l_2414
        jeq   __l_2414
__l_2413:
        mov   @>ff6a(r9), r1            ; wscore
        ai    r1, >0064
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2418
__l_2414:
        c     @>fd78, @>fd76            ; bmobility wmobility 
        jlt   __l_2418
        jeq   __l_2418
__l_2417:
        mov   @>ff6c(r9), r1            ; bscore
        ai    r1, >0064
        mov   r1, @>ff6c(r9)            ; bscore
__l_2418:
        clr   @>ff68(r9)                ; side
        li    r1, >0001
        mov   r1, @>fffe(r9)            ; $side
        jmp   __l_2320
__l_2319:
        inc   @>ff68(r9)                ; side
__l_2320:
        mov   @>0016(r9), r1            ; tempmove
        jeq   __l_2424
        b     @__l_2422
__l_2424:
        mov   @>0018(r9), r1            ; tempmove
        s     @>001a(r9), r1            ; tempmove 
        abs   r1
        ci    r1, >0010
        jeq   __l_2421
        b     @__l_2422
__l_2421:
        mov   @>ff68(r9), r1            ; side
        jne   __l_2428
__l_2427:
        li    r1, >0580
        mov   @>0018(r9), r2            ; tempmove
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        li    r1, >0f9e
        mov   r1, @>ff5c(r9)            ; offset2
        jmp   __l_2429
__l_2428:
        li    r1, >05c0
        mov   @>0018(r9), r2            ; tempmove
        li    r3, >0030
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        li    r1, >0f6e
        mov   r1, @>ff5c(r9)            ; offset2
__l_2429:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_361
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_361
        jne   __l_2422
__l_2431:
        mov   @>ff68(r9), r1            ; side
        jne   __l_2436
__l_2435:
        mov   @>ff6a(r9), r1            ; wscore
        li    r2, >0064
        s     r2, r1
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2422
__l_2436:
        mov   @>ff6c(r9), r1            ; bscore
        li    r2, >0064
        s     r2, r1
        mov   r1, @>ff6c(r9)            ; bscore
__l_2422:
        li    r1, >0016
        mov   r1, @>ff52(r9)            ; spage1
        mov   @>ff68(r9), r1            ; side
        jne   __l_2440
__l_2439:
        li    r1, >0f6e
        mov   r1, @>ff56(r9)            ; initoffset
        jmp   __l_2441
__l_2440:
        li    r1, >0f9e
        mov   r1, @>ff56(r9)            ; initoffset
__l_2441:
        clr   @>ff6e(r9)                ; evalscore
        clr   @>ff60(r9)                ; j
__l_2303:
        mov   @>ff56(r9), r1            ; initoffset
        a     @>ff60(r9), r1            ; j 
        mov   r1, @>ff58(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff58(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_362
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_362
        jeq   __l_2443
        b     @__l_2444
__l_2443:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff78                 ; locarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        li    r1, >0001
        mov   r1, @>ff5e(r9)            ; i
        mov   @>ff78(r9), @>fffc(r9)    ; locarray $i
        c     @>ff5e(r9), @>fffc(r9)    ; i $i 
        jlt   __l_2317
        jeq   __l_2317
        b     @__l_2444
__l_2316:
        inc   @>ff5e(r9)                ; i
__l_2317:
        mov   r9, r1
        ai    r1, >ff78                 ; locarray
        mov   @>ff5e(r9), r2            ; i
        sla   r2, 1
        a     r2, r1
        mov   *r1, @>ff76(r9)           ;  ploc
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff60(r9), r1            ; j
; no-opt
        jeq   __c_2304
        ai    r1, >fff8
        jne   __l_2451
        b     @__c_2311
__l_2451:
        ai    r1, >fff8
        jne   __l_2452
        b     @__c_2312
__l_2452:
        ai    r1, >fff8
        jne   __l_2453
        b     @__c_2313
__l_2453:
        ai    r1, >fff8
        jne   __l_2454
        b     @__c_2314
__l_2454:
        ai    r1, >fff8
        jne   __l_2455
        b     @__c_2315
__l_2455:
        b     @__l_2449
__c_2304:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >0064
        mov   r1, @>ff6e(r9)            ; evalscore
        mov   @>ff68(r9), r1            ; side
        jeq   __l_2456
        b     @__l_2457
__l_2456:
        clr   r1
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        mov   @>ff74(r9), r1            ; endgame
        jlt   __l_2461
        jeq   __l_2461
__l_2463:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0018
        jlt   __l_2461
__l_2460:
        mov   @>ff6e(r9), r1            ; evalscore
        li    r2, >0008
        mov   @>ff76(r9), r4            ; ploc
        clr   r3
        div   r2, r3
        mov   r3, r2
        li    r3, >0032
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2461:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0038
        jlt   __l_2467
__l_2466:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >03e8
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2467:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >000f
        jgt   __l_2470
        b     @__l_2471
__l_2470:
        clr   @>ff64(r9)                ; l
        li    r1, >0001
        mov   r1, @>fffa(r9)            ; $l
        jmp   __l_2306
__l_2305:
        inc   @>ff64(r9)                ; l
__l_2306:
        li    r1, >00c0
        li    r2, >0038
        mov   @>ff64(r9), r3            ; l
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_363
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_363
        jeq   __l_2474
        b     @__l_2475
__l_2474:
        mov   @>ff64(r9), r1            ; l
        jne   __l_2479
__l_2478:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0009
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        jmp   __l_2480
__l_2479:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0007
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
__l_2480:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0008(r10)
        mov   @>ff56(r9), @>0006(r10)   ; initoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_364
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_364
        jne   __l_2475
__l_2482:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >000f
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2475:
        c     @>ff64(r9), @>fffa(r9)    ; l $l 
        jeq   __l_2471
        b     @__l_2305
__l_2471:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0038
        jgt   __l_2489
        jeq   __l_2489
__l_2488:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        ai    r2, >0008
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_365
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_365
        jne   __l_2489
__l_2492:
        mov   @>ff6e(r9), r1            ; evalscore
        li    r2, >0019
        s     r2, r1
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2489:
        b     @__l_2525
__l_2457:
        li    r1, >0080
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        mov   @>ff74(r9), r1            ; endgame
        jlt   __l_2497
        jeq   __l_2497
__l_2499:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0020
        jgt   __l_2497
__l_2496:
        mov   @>ff6e(r9), r1            ; evalscore
        li    r2, >0008
        li    r4, >003f
        s     @>ff76(r9), r4            ; ploc 
        clr   r3
        div   r2, r3
        mov   r3, r2
        li    r3, >0032
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2497:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0007
        jgt   __l_2503
__l_2502:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >03e8
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2503:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0037
        jgt   __l_2509
        jne   __l_2506
__l_2509:
        b     @__l_2507
__l_2506:
        clr   @>ff64(r9)                ; l
        li    r1, >0001
        mov   r1, @>fffa(r9)            ; $l
        jmp   __l_2309
__l_2308:
        inc   @>ff64(r9)                ; l
__l_2309:
        li    r1, >00c0
        li    r2, >0038
        mov   @>ff64(r9), r3            ; l
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_366
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_366
        jeq   __l_2510
        b     @__l_2511
__l_2510:
        mov   @>ff64(r9), r1            ; l
        jne   __l_2515
__l_2514:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        ai    r2, >0009
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        jmp   __l_2516
__l_2515:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        ai    r2, >0007
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
__l_2516:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, @>0008(r10)
        mov   @>ff56(r9), @>0006(r10)   ; initoffset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fdb2                 ; bit5
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_367
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_367
        jne   __l_2511
__l_2518:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >000f
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2511:
        c     @>ff64(r9), @>fffa(r9)    ; l $l 
        jeq   __l_2507
        b     @__l_2308
__l_2507:
        mov   @>ff76(r9), r1            ; ploc
        ci    r1, >0007
        jlt   __l_2525
        jeq   __l_2525
__l_2524:
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0008
        s     r3, r2
        li    r3, >0008
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5c(r9)            ; offset2
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0008(r10)
        mov   @>ff5c(r9), @>0006(r10)   ; offset2 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0004(r10)
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fdaa                 ; bit4
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_368
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_368
        jne   __l_2525
__l_2528:
        mov   @>ff6e(r9), r1            ; evalscore
        li    r2, >0019
        s     r2, r1
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2525:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff64                 ; l
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>ff54(r9), @>0004(r10)   ; dsize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff6e(r9), r1            ; evalscore
        a     @>ff64(r9), r1            ; l 
        mov   r1, @>ff6e(r9)            ; evalscore
        b     @__l_2449
__c_2311:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >020d
        mov   r1, @>ff6e(r9)            ; evalscore
        b     @__l_2449
__c_2312:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >0190
        mov   r1, @>ff6e(r9)            ; evalscore
        li    r1, >0100
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff64                 ; l
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>ff54(r9), @>0004(r10)   ; dsize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff6e(r9), r1            ; evalscore
        a     @>ff64(r9), r1            ; l 
        mov   r1, @>ff6e(r9)            ; evalscore
        b     @__l_2449
__c_2313:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >0190
        mov   r1, @>ff6e(r9)            ; evalscore
        li    r1, >0180
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff64                 ; l
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>ff54(r9), @>0004(r10)   ; dsize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff6e(r9), r1            ; evalscore
        a     @>ff64(r9), r1            ; l 
        mov   r1, @>ff6e(r9)            ; evalscore
        jmp   __l_2449
__c_2314:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >03cd
        mov   r1, @>ff6e(r9)            ; evalscore
        jmp   __l_2449
__c_2315:
        mov   @>ff74(r9), r1            ; endgame
        jlt   __l_2533
        jeq   __l_2533
__l_2532:
        li    r1, >0280
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
        jmp   __l_2534
__l_2533:
        li    r1, >0200
        mov   @>ff76(r9), r2            ; ploc
        li    r3, >0002
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff5a(r9)            ; offset1
__l_2534:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        mov   r9, r1
        ai    r1, >ff64                 ; l
        mov   r1, @>0008(r10)
        mov   @>ff5a(r9), @>0006(r10)   ; offset1 
        mov   @>ff54(r9), @>0004(r10)   ; dsize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        mov   @>ff6e(r9), r1            ; evalscore
        a     @>ff64(r9), r1            ; l 
        mov   r1, @>ff6e(r9)            ; evalscore
        mov   @>0006(r9), r1            ; cmoveflag
        ci    r1, >0001
        jne   __l_2449
__l_2539:
        c     @>ff68(r9), @>fd66        ; side gameside 
        jne   __l_2449
__l_2536:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >012c
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2449:
        c     @>ff5e(r9), @>fffc(r9)    ; i $i 
        jeq   __l_2444
        b     @__l_2316
__l_2444:
        mov   @>ff60(r9), r1            ; j
        ai    r1, >0008
        mov   r1, @>ff60(r9)            ; j
        ci    r1, >0028
        jgt   __l_2544
        b     @__l_2303
__l_2544:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_369
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_369
        jeq   __l_2547
__l_2546:
        li    r1, >b1e0
        mov   r1, @>ff6e(r9)            ; evalscore
        b     @__l_2559
__l_2547:
        mov   @>ff68(r9), r1            ; side
        jne   __l_2551
__l_2550:
        li    r1, >0fc6
        mov   r1, @>ff58(r9)            ; offset
        jmp   __l_2552
__l_2551:
        li    r1, >0f96
        mov   r1, @>ff58(r9)            ; offset
__l_2552:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff58(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_370
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_370
        jeq   __l_2555
__l_2554:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >0032
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2555:
        mov   @>ff74(r9), r1            ; endgame
        jgt   __l_2558
        b     @__l_2559
__l_2558:
        mov   @>ff68(r9), r1            ; side
        jne   __l_2563
__l_2562:
        li    r1, >0fc6
        mov   r1, @>ff58(r9)            ; offset
        jmp   __l_2564
__l_2563:
        li    r1, >0f96
        mov   r1, @>ff58(r9)            ; offset
__l_2564:
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, @>0008(r10)
        mov   @>ff58(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>fd5e, @>0002(r10)       ; startpage 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        li    r1, >0300
        mov   r1, @>ff58(r9)            ; offset
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0008(r10)
        mov   @>ff58(r9), @>0006(r10)   ; offset 
        mov   @>fd62, @>0004(r10)       ; datasize 
        mov   @>ff52(r9), @>0002(r10)   ; spage1 
        li    r1, >0002
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  dataops
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0004(r10)
        li    r1, >fd9a                 ; bit2
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitand
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >fda2                 ; bit3
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff28                 ; __rettmp_371
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  isclear_8
        movb  @>ff28(r9), r1            ; __rettmp_371
        jne   __l_2567
__l_2566:
        mov   @>ff6e(r9), r1            ; evalscore
        ai    r1, >0064
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2567:
        mov   @>ff74(r9), r1            ; endgame
        ci    r1, >0002
        jne   __l_2559
__l_2570:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >ff78                 ; locarray
        mov   r1, @>0002(r10)
        li    r1, >fd92                 ; bit1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6006
        data  bitpos
        mov   @>ff76(r9), r1            ; ploc
        s     @>ff7a(r9), r1            ; locarray 
        abs   r1
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2578
        sla   r14, 0
__l_2578:
        sra   r1, 3
        li    r2, __set_cnst_144
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2579
        inc   r1
__l_2579:
        ci    r1, >0000
        jne   __l_2559
__l_2574:
        mov   @>ff6e(r9), r1            ; evalscore
        li    r2, >0008
        li    r3, >0002
        mov   @>ff76(r9), r5            ; ploc
        s     @>ff7a(r9), r5            ; locarray 
        abs   r5
        clr   r4
        div   r3, r4
        s     r4, r2                    ;  
        li    r3, >000a
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, @>ff6e(r9)            ; evalscore
__l_2559:
        mov   @>ff68(r9), r1            ; side
        jne   __l_2581
__l_2580:
        mov   @>ff6a(r9), r1            ; wscore
        a     @>ff6e(r9), r1            ; evalscore 
        mov   r1, @>ff6a(r9)            ; wscore
        jmp   __l_2582
__l_2581:
        mov   @>ff6c(r9), r1            ; bscore
        a     @>ff6e(r9), r1            ; evalscore 
        mov   r1, @>ff6c(r9)            ; bscore
__l_2582:
        c     @>ff68(r9), @>fffe(r9)    ; side $side 
        jeq   __l_2584
        b     @__l_2319
__l_2584:
        mov   @>ff6a(r9), r1            ; wscore
        s     @>ff6c(r9), r1            ; bscore 
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        mov   *r10+, r5
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >001a
        b     @__far_ret

; ; Set Constants
__set_cnst_141:
        text >0100000000010000000000000000000000000000000000000000000000000000
__set_cnst_142:
        text >0100000000010000000000000000000000000000000000000000000000000000
__set_cnst_143:
        text >0000010100000000000000000000000000000000000000000000000000000000
__set_cnst_144:
        text >8004000300000000000000000000000000000000000000000000000000000000

        bank 12, >72fa

; Subroutine: getkey_57, level: 2
;   0004       4  var result: reference to char
;   8374   33652  keyboardmode: uint8 (absolute)
;   8375   33653  keypressed: uint8 (absolute)
;   837c   33660  gplstatus: uint8 (absolute)

getkey_57:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi0
        li    r1, >0004
        movb  @>8303, @>8374            ; low R1 keyboardmode
        bl    @scankey
        movb  @>837c, r1                ; gplstatus
        srl   r1, 8
        andi  r1, >0020
        ci    r1, >0000
        jeq   __l_2588
__l_2587:
        movb  @>8375, r1                ; keypressed
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        jmp   __l_2589
__l_2588:
        li    r1, >00ff
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
__l_2589:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  limi2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

; Subroutine: scankey, level: 3

scankey:
        lwpi  >83e0
        bl    @>000e
        lwpi  >8300
        b     *r11

        bank 12, >7380

; Subroutine: move, level: 2
;   0000       0  var src: reference to void
;   0002       2  var dest: reference to void
;   0004       4  length: int16

move:
        mov   *r10, r12
        mov   @>0002(r10), r13
        mov   @>0004(r10), r14
        jeq   move_2
move_1:
        movb  *r12+, *r13+
        dec   r14
        jne   move_1
move_2:
        ai    r10, >0006
        b     @__far_ret

        bank 12, >739a

; Subroutine: moveword, level: 2
;   0000       0  var src: reference to void
;   0002       2  var dest: reference to void
;   0004       4  length: int16

moveword:
        mov   *r10, r12
        mov   @>0002(r10), r13
        mov   @>0004(r10), r14
        jeq   moveword_2
moveword_1:
        mov   *r12+, *r13+
        dec   r14
        jne   moveword_1
moveword_2:
        ai    r10, >0006
        b     @__far_ret

        bank 12, >73b4

; Subroutine: compareword, level: 2
;   0000       0  var result: reference to boolean
;   0002       2  var src: reference to void
;   0004       4  var dest: reference to void
;   0006       6  length: int16

compareword:
        mov   *r10, r15
        mov   @>0002(r10), r12
        mov   @>0004(r10), r13
        mov   @>0006(r10), r14
        jeq   comparebyte_2
comparebyte_1:
        c     *r12+, *r13+
        jne   comparebyte_3
        dec   r14
        jne   comparebyte_1
comparebyte_2:
        li    r12, >0100
        movb  r12, *r15
        jmp   comparebyte_4
comparebyte_3:
        clr   r12
        movb  r12, *r15
comparebyte_4:
        ai    r10, >0008
        b     @__far_ret

        bank 12, >73e0

; Subroutine: fillchar, level: 2
;   0000       0  var dest: reference to void
;   0002       2  count: int16
;   0004       4  value: char

fillchar:
        mov   @>0002(r10), r12
        jeq   fillchar_2
        mov   *r10, r13
        movb  @>0004(r10), r14
fillchar_1:
        movb  r14, *r13+
        dec   r12
        jne   fillchar_1
fillchar_2:
        ai    r10, >0006
        b     @__far_ret

        bank 12, >73fa

; Subroutine: fillchar_58, level: 2
;   0004       4  var dest: reference to void
;   0006       6  count: int16
;   0008       8  value: uint8

fillchar_58:
        ai    r10, >fffc
        mov   r10, r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        movb  @>0008(r9), @>0004(r10)   ; value 
        mov   @>0006(r9), @>0002(r10)   ; count 
        mov   @>0004(r9), *r10          ; dest 
        bl    @__far_call_1
        data  >6018
        data  fillchar
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 12, >7438

; Subroutine: __write_lf_59, level: 2
;   0004       4  var f: reference to file

__write_lf_59:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jne   __l_2594
__l_2593:
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >6004
        data  outputline_25
        jmp   __l_2595
__l_2594:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >6018
        data  __end_line_71
__l_2595:
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 12, >7484

; Subroutine: __write_int_60, level: 2
;   0004       4  var f: reference to file
;   0006       6  n: int16
;   0008       8  length: int16
;   000a      10  precision: int16
;   ff00    -256  buf: string [255]

__write_int_60:
        ai    r10, >fefa
        mov   r10, r12
        mov   r1, *r12+
        ai    r12, >0100
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        mov   r9, r1
        ai    r1, >ff00                 ; buf
        mov   r1, @>0006(r10)
        seto  @>0004(r10)
        mov   @>0008(r9), @>0002(r10)   ; length 
        mov   @>0006(r9), *r10          ; n 
        bl    @__far_call_1
        data  >601a
        data  __str_int_80
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        mov   @>0008(r9), @>0004(r10)   ; length 
        mov   r9, r1
        ai    r1, >ff00                 ; buf
        mov   r1, @>0002(r10)
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

        bank 12, >74fc

; Subroutine: __write_char_61, level: 2
;   0004       4  var f: reference to file
;   0006       6  ch: char
;   0008       8  length: int16
;   000a      10  precision: int16
;   fffe      -2  s: string [1]

__write_char_61:
        ai    r10, >fff8
        mov   r10, r12
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>0006(r9), r1            ; ch
        srl   r1, 8
        ci    r1, >001f
        jlt   __l_2600
        jeq   __l_2600
__l_2599:
        li    r1, >0001
        movb  @>8303, @>fffe(r9)        ; s
        movb  @>0006(r9), @>ffff(r9)    ; ch s
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        mov   @>0008(r9), @>0004(r10)   ; length 
        mov   r9, r1
        dect  r1                        ; s
        mov   r1, @>0002(r10)
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
__l_2600:
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

        bank 12, >7564

; Subroutine: __write_string_62, level: 2
;   fff6     -10  __rettmp_110: int16
;   0004       4  var f: reference to file
;   0006       6  p: pointer to char (char)
;   0008       8  length: int16
;   000a      10  precision: int16
;   fff8      -8  i: int16
;   fffa      -6  len: int16
;   fffc      -4  outlen: int16
;   fffe      -2  $i: int16

__write_string_62:
        ai    r10, >ffee
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >000a
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0006(r9), r1            ; p
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>fffa(r9)            ; len
        mov   @>0008(r9), r2            ; length
; no.opt
        c     r1, r2
        jgt   __l_2610
        mov   r2, r1
__l_2610:
        mov   r1, @>fffc(r9)            ; outlen
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jne   __l_2612
__l_2611:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fffc(r9), @>0002(r10)   ; outlen 
        mov   @>0006(r9), *r10          ; p 
        bl    @__far_call_1
        data  >6004
        data  outputstring_24
        b     @__l_2629
__l_2612:
        mov   @>fffa(r9), r1            ; len
        inc   r1
        mov   r1, @>fff8(r9)            ; i
        mov   @>fffc(r9), @>fffe(r9)    ; outlen $i
        c     @>fff8(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2604
        jeq   __l_2604
        jmp   __l_2621
__l_2603:
        inc   @>fff8(r9)                ; i
__l_2604:
        mov   @>0004(r9), r1            ; f
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; f
        ai    r2, >0008                 ; .pab
        movb  *r2, r2
        srl   r2, 8
        c     r1, r2
        jgt   __l_2618
        jeq   __l_2618
__l_2617:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        mov   @>0004(r9), r1            ; f
        mov   @>0006(r1), r1
        mov   @>0004(r9), r2            ; f
        a     @>0002(r2), r1            ;  
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  pokev_14
        mov   @>0004(r9), r1            ; f
        inct  r1                        ; .bufpos
        inc   *r1
__l_2618:
        c     @>fff8(r9), @>fffe(r9)    ; i $i 
        jne   __l_2603
__l_2621:
        li    r1, >0001
        mov   r1, @>fff8(r9)            ; i
        mov   @>fffa(r9), @>fffe(r9)    ; len $i
        c     @>fff8(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2607
        jeq   __l_2607
        jmp   __l_2629
__l_2606:
        inc   @>fff8(r9)                ; i
__l_2607:
        mov   @>0004(r9), r1            ; f
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; f
        ai    r2, >0008                 ; .pab
        movb  *r2, r2
        srl   r2, 8
        c     r1, r2
        jgt   __l_2626
        jeq   __l_2626
__l_2625:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0006(r9), r1            ; p
        a     @>fff8(r9), r1            ; i 
        movb  *r1, @>0002(r10)          ;  
        mov   @>0004(r9), r1            ; f
        mov   @>0006(r1), r1
        mov   @>0004(r9), r2            ; f
        a     @>0002(r2), r1            ;  
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  pokev_14
        mov   @>0004(r9), r1            ; f
        inct  r1                        ; .bufpos
        inc   *r1
__l_2626:
        c     @>fff8(r9), @>fffe(r9)    ; i $i 
        jne   __l_2606
__l_2629:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

        bank 12, >76bc

; Subroutine: __assign_63, level: 2
;   0004       4  var f: reference to void
;   0006       6  filename: string [255]

__assign_63:
        ai    r10, >fff6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   r9, r1
        ai    r1, >0006                 ; filename
        mov   @>0004(r9), r2            ; f
        ai    r2, >000d                 ; .pab
        li    r0, >1900
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2632
        mov   r0, r3
__l_2632:
        movb  r3, *r2+
        jeq   __l_2633
        srl   r3, 8
__l_2634:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2634
__l_2633:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0102
        b     @__far_ret

        bank 12, >770a

; Subroutine: __rewrite_bin_64, level: 2
;   0004       4  var f: reference to void
;   0006       6  blocksize: int16

__rewrite_bin_64:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   r1
        movb  r1, @>0008(r10)
        mov   @>0006(r9), r1            ; blocksize
        swpb  r1
        movb  r1, @>0006(r10)
        li    r1, >0b00
        movb  r1, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >601a
        data  openfile_90
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >775e

; Subroutine: __reset_bin_65, level: 2
;   0004       4  var f: reference to void
;   0006       6  blocksize: int16

__reset_bin_65:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff4
        mov   @>7ffe, @>000a(r10)
        clr   r1
        movb  r1, @>0008(r10)
        mov   @>0006(r9), r1            ; blocksize
        swpb  r1
        movb  r1, @>0006(r10)
        li    r1, >0900
        movb  r1, @>0004(r10)
        clr   r1
        movb  r1, @>0002(r10)
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >601a
        data  openfile_90
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >77b2

; Subroutine: __write_bin_typed_66, level: 2
;   0004       4  var f: reference to void
;   0006       6  var data: reference to void

__write_bin_typed_66:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0001
        mov   r1, @>0004(r10)
        mov   @>0006(r9), @>0002(r10)   ; data 
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >6018
        data  __write_bin_ign_67
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >77f6

; Subroutine: __write_bin_ign_67, level: 2
;   fffa      -6  __rettmp_118: boolean
;   0004       4  var f: reference to void
;   0006       6  var data: reference to void
;   0008       8  blocks: int16
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

__write_bin_ign_67:
        ai    r10, >ffee
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0003
        mov   @>0004(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        clr   @>fffc(r9)                ; i
        mov   @>0008(r9), r1            ; blocks
        dec   r1
        mov   r1, @>fffe(r9)            ; $i
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2639
        jeq   __l_2639
        jmp   __l_2644
__l_2638:
        inc   @>fffc(r9)                ; i
__l_2639:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0004(r9), r1            ; f
        ai    r1, >0008                 ; .pab
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>0004(r10)
        mov   @>0004(r9), r1            ; f
        mov   @>0006(r1), @>0002(r10)   ;  
        mov   @>0006(r9), r1            ; data
        mov   @>fffc(r9), r2            ; i
        mov   @>0004(r9), r3            ; f
        ai    r3, >0008                 ; .pab
        movb  *r3, r3
        srl   r3, 8
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  vmbw
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_118
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_2638
__l_2644:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 12, >78c2

; Subroutine: __read_bin_typed_68, level: 2
;   0004       4  var f: reference to void
;   0006       6  var data: reference to void

__read_bin_typed_68:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >0001
        mov   r1, @>0004(r10)
        mov   @>0006(r9), @>0002(r10)   ; data 
        mov   @>0004(r9), *r10          ; f 
        bl    @__far_call_1
        data  >6018
        data  __read_bin_ign_69
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >7906

; Subroutine: __read_bin_ign_69, level: 2
;   fffa      -6  __rettmp_119: boolean
;   0004       4  var f: reference to void
;   0006       6  var data: reference to void
;   0008       8  blocks: int16
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

__read_bin_ign_69:
        ai    r10, >ffee
        mov   r10, r12
        mov   r4, *r12+
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0002
        mov   @>0004(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        clr   @>fffc(r9)                ; i
        mov   @>0008(r9), r1            ; blocks
        dec   r1
        mov   r1, @>fffe(r9)            ; $i
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2648
        jeq   __l_2648
        jmp   __l_2653
__l_2647:
        inc   @>fffc(r9)                ; i
__l_2648:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r1
        ai    r1, >fffa                 ; __rettmp_119
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0004(r9), r1            ; f
        ai    r1, >0008                 ; .pab
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>0004(r10)
        mov   @>0004(r9), r1            ; f
        mov   @>0006(r1), @>0002(r10)   ;  
        mov   @>0006(r9), r1            ; data
        mov   @>fffc(r9), r2            ; i
        mov   @>0004(r9), r3            ; f
        ai    r3, >0008                 ; .pab
        movb  *r3, r3
        srl   r3, 8
        mpy   r2, r3
        a     r4, r1                    ;  
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  vmbr
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_2647
__l_2653:
        mov   *r10+, r4
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 12, >79d2

; Subroutine: __close_70, level: 2
;   fffe      -2  __rettmp_129: boolean
;   0004       4  var f: reference to void

__close_70:
        ai    r10, >fff4
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>ffb2                    ;  inoutres
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jlt   __l_2657
        jeq   __l_2657
__l_2656:
        li    r1, >0001
        mov   @>0004(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r1
        dect  r1                        ; __rettmp_129
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        clr   r1
        li    r2, >ffb4                 ; openfiles
        mov   @>0004(r9), r3            ; f
        mov   *r3, r3
        dec   r3
        li    r12, >0006
        mpy   r3, r12
        a     r13, r2                   ;  
        movb  @>8303, *r2               ; low R1
        seto  r1
        mov   @>0004(r9), r2            ; f
        mov   r1, *r2
        jmp   __l_2661
__l_2657:
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jgt   __l_2661
        jeq   __l_2661
__l_2660:
        li    r1, >0001
        mov   r1, @>ffb2                ;  inoutres
__l_2661:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 12, >7a6c

; Subroutine: __end_line_71, level: 2
;   fffe      -2  __rettmp_133: boolean
;   0004       4  var f: reference to file

__end_line_71:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jlt   __l_2666
        jeq   __l_2666
__l_2665:
        li    r1, >0003
        mov   @>0004(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        mov   @>0004(r9), r1            ; f
        mov   @>0002(r1), r1
        mov   @>0004(r9), r2            ; f
        ai    r2, >0009                 ; .pab
        movb  @>8303, *r2               ; low R1
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r1
        dect  r1                        ; __rettmp_133
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        clr   r1
        mov   @>0004(r9), r2            ; f
        mov   r1, @>0002(r2)
__l_2666:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 12, >7ae6

; Subroutine: __read_int_72, level: 2
;   fed2    -302  __rettmp_121: int16
;   fed2    -302  __rettmp_122: int16
;   feda    -294  __rettmp_123: set of char
;   fefa    -262  __rettmp_124: boolean
;   0004       4  var result: reference to int16
;   0006       6  var f: reference to file
;   fefb    -261  s: string [255]
;   fffc      -4  i: int16
;   fffe      -2  neg: boolean

__read_int_72:
        ai    r10, >fec8
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >012e
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0006(r9), @>0002(r10)   ; f 
        mov   r9, r1
        ai    r1, >fefb                 ; s
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __read_string_73
        clr   r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r1
        ai    r1, >fefb                 ; s
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fed2                 ; __rettmp_121
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  length_76
        mov   @>fed2(r9), r1            ; __rettmp_121
        clr   r2
        c     r1, r2
        clr   r1
        jeq   __l_2672
        inc   r1
__l_2672:
        ci    r1, >0001
        jne   __l_2674
        li    r1, >002d
        movb  @>fefc(r9), r2            ; s
        srl   r2, 8
        c     r2, r1
        clr   r1
        jne   __l_2674
        inc   r1
__l_2674:
        movb  @>8303, @>fffe(r9)        ; neg
        movb  @>fffe(r9), r1            ; neg
        srl   r1, 8
        inc   r1
        mov   r1, @>fffc(r9)            ; i
__l_2669:
        mov   @>fffc(r9), r1            ; i
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   r9, r2
        ai    r2, >fefb                 ; s
        mov   r2, @>0002(r10)
        mov   r9, r2
        ai    r2, >fed2                 ; __rettmp_122
        mov   r2, *r10
        bl    @__far_call_1
        data  >6018
        data  length_76
        c     r1, @>fed2(r9)            ; __rettmp_122 
        jgt   __l_2670
__l_2676:
        mov   r9, r1
        ai    r1, >fefb                 ; s
        a     @>fffc(r9), r1            ; i 
        movb  *r1, r1
        srl   r1, 8
        li    r14, >0001
        mov   r1, r0
        andi  r0, >000f
        jeq   __l_2679
        sla   r14, 0
__l_2679:
        sra   r1, 3
        li    r2, __set_cnst_145
        a     r1, r2
        mov   *r2, r2
        clr   r1
        coc   r14, r2
        jne   __l_2680
        inc   r1
__l_2680:
        ci    r1, >0000
        jeq   __l_2670
__l_2675:
        mov   @>0004(r9), r1            ; result
        mov   *r1, r1
        li    r2, >000a
        mpy   r1, r2
        mov   r3, r1
        mov   r9, r2
        ai    r2, >fefb                 ; s
        a     @>fffc(r9), r2            ; i 
        movb  *r2, r2
        srl   r2, 8
        a     r2, r1
        li    r2, >0030
        s     r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        inc   @>fffc(r9)                ; i
        jmp   __l_2669
__l_2670:
        movb  @>fffe(r9), r1            ; neg
        jeq   __l_2682
__l_2681:
        mov   @>0004(r9), r1            ; result
        mov   *r1, r1
        neg   r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_2682:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

; ; Set Constants
__set_cnst_145:
        text >00000000000003ff000000000000000000000000000000000000000000000000

        bank 12, >7c5c

; Subroutine: __read_string_73, level: 2
;   ff00    -256  __rettmp_127: string [255]
;   ff00    -256  __rettmp_128: boolean
;   0004       4  var result: reference to string [255]
;   0006       6  var f: reference to file

__read_string_73:
        ai    r10, >fef6
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0100
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0006(r9), r1            ; f
        mov   *r1, r1
        jne   __l_2687
__l_2686:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >ff00                 ; __rettmp_127
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __read_line_console_86
        mov   r9, r1
        ai    r1, >ff00                 ; __rettmp_127
        mov   @>0004(r9), r2            ; result
        li    r0, >ff00
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2690
        mov   r0, r3
__l_2690:
        movb  r3, *r2+
        jeq   __l_2695
        srl   r3, 8
__l_2692:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2692
        jmp   __l_2695
__l_2687:
        mov   @>0006(r9), r1            ; f
        mov   *r1, r1
        jlt   __l_2694
        jeq   __l_2694
__l_2693:
        li    r1, >0002
        mov   @>0006(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0006(r9), @>0002(r10)   ; f 
        mov   r9, r1
        ai    r1, >ff00                 ; __rettmp_128
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0006(r9), r1            ; f
        ai    r1, >0009                 ; .pab
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>0004(r10)
        mov   @>0006(r9), r1            ; f
        mov   @>0006(r1), @>0002(r10)   ;  
        mov   @>0004(r9), r1            ; result
        inc   r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  vmbr
        mov   @>0006(r9), r1            ; f
        ai    r1, >0009                 ; .pab
        movb  *r1, r1
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        jmp   __l_2695
__l_2694:
        li    r1, >0004
        mov   r1, @>ffb2                ;  inoutres
__l_2695:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >7d5a

; Subroutine: __read_lf_74, level: 2
;   0004       4  var f: reference to file

__read_lf_74:
        ai    r10, >fffc
        mov   r10, r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 12, >7d74

; Subroutine: ioresult_75, level: 2
;   0004       4  var result: reference to int16

ioresult_75:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>ffb2, r1                ; inoutres
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        clr   @>ffb2                    ;  inoutres
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 12, >7da4

; Subroutine: length_76, level: 2
;   0004       4  var result: reference to int16
;   0006       6  s: pointer to char (char)

length_76:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0006(r9), r1            ; s
        movb  *r1, r1
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 12, >7dd6

; Subroutine: pos_77, level: 2
;   0004       4  var result: reference to int16
;   0006       6  ch: char
;   0008       8  s: pointer to char (char)
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

pos_77:
        ai    r10, >fff4
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0001
        mov   r1, @>fffc(r9)            ; i
        mov   @>0008(r9), r1            ; s
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>fffe(r9)            ; $i
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2701
        jeq   __l_2701
        jmp   __l_2710
__l_2700:
        inc   @>fffc(r9)                ; i
__l_2701:
        mov   @>0008(r9), r1            ; s
        a     @>fffc(r9), r1            ; i 
        movb  *r1, r1
        srl   r1, 8
        movb  @>0006(r9), r2            ; ch
        srl   r2, 8
        c     r1, r2
        jne   __l_2707
__l_2706:
        mov   @>fffc(r9), r1            ; i
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_2703
__l_2707:
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_2700
__l_2710:
        clr   r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_2703:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 12, >7e54

; Subroutine: copy_78, level: 2
;   0004       4  var result: reference to string [255]
;   0006       6  s: pointer to char (char)
;   0008       8  start: int16
;   000a      10  len: int16

copy_78:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0008(r9), r1            ; start
        mov   @>0006(r9), r2            ; s
        movb  *r2, r2
        srl   r2, 8
        c     r1, r2
        jgt   __l_2714
__l_2713:
        mov   @>0008(r9), r1            ; start
        a     @>000a(r9), r1            ; len 
        mov   @>0006(r9), r2            ; s
        movb  *r2, r2
        srl   r2, 8
        inc   r2
        c     r1, r2
        jlt   __l_2718
        jeq   __l_2718
__l_2717:
        mov   @>0006(r9), r1            ; s
        movb  *r1, r1
        srl   r1, 8
        s     @>0008(r9), r1            ; start 
        inc   r1
        mov   r1, @>000a(r9)            ; len
__l_2718:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>000a(r9), @>0004(r10)   ; len 
        mov   @>0004(r9), r1            ; result
        inc   r1
        mov   r1, @>0002(r10)
        mov   @>0006(r9), r1            ; s
        a     @>0008(r9), r1            ; start 
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  move
        mov   @>000a(r9), r1            ; len
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        jmp   __l_2715
__l_2714:
        clr   r1
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
__l_2715:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

        bank 12, >7ef6

; Subroutine: upcase_79, level: 2
;   0004       4  var result: reference to char
;   0006       6  ch: char

upcase_79:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        movb  @>0006(r9), r1            ; ch
        srl   r1, 8
        ci    r1, >0061
        jlt   __l_2723
__l_2725:
        movb  @>0006(r9), r1            ; ch
        srl   r1, 8
        ci    r1, >007a
        jgt   __l_2723
__l_2722:
        movb  @>0006(r9), r1            ; ch
        srl   r1, 8
        li    r2, >0020
        s     r2, r1
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        jmp   __l_2724
__l_2723:
        movb  @>0006(r9), r1            ; ch
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
__l_2724:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 13, >6060

; Subroutine: __str_int_80, level: 2
;   fff2     -14  __rettmp_143: int16
;   fff4     -12  __rettmp_144: pointer to void
;   0004       4  n: int16
;   0006       6  length: int16
;   0008       8  precision: int16
;   000a      10  s: pointer to char (char)
;   fff6     -10  res: string [6]
;   fffe      -2  p: pointer to char (char)

__str_int_80:
        ai    r10, >ffe8
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >000e
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), r1            ; n
        ci    r1, >8000
        jne   __l_2730
__l_2729:
        li    r1, __str_cnst_146
        mov   r9, r2
        ai    r2, >fff6                 ; res
        li    r0, >0600
        movb  *r1+, r3
        cb    r3, r0
        jl    __l_2733
        mov   r0, r3
__l_2733:
        movb  r3, *r2+
        jeq   __l_2734
        srl   r3, 8
__l_2735:
        movb  *r1+, *r2+
        dec   r3
        jne   __l_2735
__l_2734:
        mov   r9, r1
        ai    r1, >fff6                 ; res
        mov   r1, @>fffe(r9)            ; p
        jmp   __l_2731
__l_2730:
        ai    r10, >fff8
        mov   r9, r1
        ai    r1, >fffc                 ; res
        mov   r1, @>0006(r10)
        mov   @>0004(r9), r1            ; n
        srl   r1, 15
        swpb  r1
        movb  r1, @>0004(r10)
        mov   @>0004(r9), r1            ; n
        abs   r1
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; __rettmp_144
        mov   r1, *r10
        bl    @outint
        mov   @>fff4(r9), @>fffe(r9)    ; __rettmp_144 p
        mov   r9, r1
        ai    r1, >fffc                 ; res
        s     @>fffe(r9), r1            ; p 
        mov   @>fffe(r9), r2            ; p
        movb  @>8303, *r2               ; low R1
__l_2731:
        mov   @>0006(r9), r1            ; length
        mov   @>fffe(r9), r2            ; p
        movb  *r2, r2
        srl   r2, 8
        c     r1, r2
        jlt   __l_2737
        jeq   __l_2737
__l_2736:
        mov   @>0006(r9), r1            ; length
        mov   @>000a(r9), r2            ; s
        movb  @>8303, *r2               ; low R1
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >2000
        movb  r1, @>0004(r10)
        mov   @>0006(r9), r1            ; length
        mov   @>fffe(r9), r2            ; p
        movb  *r2, r2
        srl   r2, 8
        s     r2, r1
        mov   r1, @>0002(r10)
        mov   @>000a(r9), r1            ; s
        inc   r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  fillchar
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>fffe(r9), r1            ; p
        movb  *r1, r1
        srl   r1, 8
        mov   r1, @>0004(r10)
        mov   @>000a(r9), r1            ; s
        mov   @>000a(r9), r2            ; s
        movb  *r2, r2
        srl   r2, 8
        mov   @>fffe(r9), r3            ; p
        movb  *r3, r3
        srl   r3, 8
        s     r3, r2
        inc   r2
        a     r2, r1
        mov   r1, @>0002(r10)
        mov   @>fffe(r9), r1            ; p
        inc   r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  move
        jmp   __l_2738
__l_2737:
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>fffe(r9), r1            ; p
        movb  *r1, r1
        srl   r1, 8
        inc   r1
        mov   r1, @>0004(r10)
        mov   @>000a(r9), @>0002(r10)   ; s 
        mov   @>fffe(r9), *r10          ; p 
        bl    @__far_call_1
        data  >6018
        data  move
__l_2738:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0008
        b     @__far_ret

__str_cnst_146 text >062d3332373638    ; -32768
        even 

; Subroutine: outint, level: 3
;   0000       0  var result: reference to pointer to void
;   0002       2  n: int16
;   0004       4  neg: boolean
;   0006       6  p: pointer to void

outint:
        mov   @>0006(r10), r0
        mov   @>0002(r10), r14
        li    r12, >000a
outint1:
        clr   r13
        div   r12, r13
        ai    r14, >0030
        swpb  r14
        movb  r14, *r0
        dec   r0
        mov   r13, r14
        jne   outint1
        movb  @>0004(r10), r13
        jeq   outint2
        li    r13, >2d00
        movb  r13, *r0
        dec   r0
outint2:
        mov   *r10, r12
        mov   r0, *r12
        ai    r10, >0008
        b     *r11

        bank 13, >620c

; Subroutine: __short_str_equal_81, level: 2
;   fffe      -2  __rettmp_137: int16
;   0004       4  var result: reference to boolean
;   0006       6  s: pointer to char (char)
;   0008       8  t: pointer to char (char)

__short_str_equal_81:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        mov   @>0008(r9), @>0004(r10)   ; t 
        mov   @>0006(r9), @>0002(r10)   ; s 
        mov   r9, r1
        dect  r1                        ; __rettmp_137
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  strcompare_91
        mov   @>fffe(r9), r1            ; __rettmp_137
        clr   r2
        c     r1, r2
        clr   r1
        jne   __l_2741
        inc   r1
__l_2741:
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 13, >626c

; Subroutine: keypressed, level: 2
;   0000       0  var result: reference to boolean

keypressed:
        clr   r14
        clr   r13
        li    r15, >0100
keypressed_1:
        li    r12, >0024
        ldcr  r13, 3
        li    r12, >0006
        stcr  r14, 8
        ci    r14, >ff00
        jne   keypressed_2
        ai    r13, >0100
        ci    r13, >0600
        jne   keypressed_1
        clr   r15
keypressed_2:
        mov   *r10, r12
        movb  r15, *r12
        ai    r10, >0002
        b     @__far_ret

        bank 13, >629e

; Subroutine: __new_82, level: 2
;   fff2     -14  __rettmp_104: string [10]
;   0004       4  var p: reference to pointer to void
;   0006       6  count: int16
;   0008       8  size: int16
;   fffe      -2  n: int16

__new_82:
        ai    r10, >ffe8
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >000e
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0006(r9), r1            ; count
        mov   @>0008(r9), r2            ; size
        mpy   r1, r2
        mov   r3, r1
        inc   r1
        andi  r1, >fffe
        mov   r1, @>fffe(r9)            ; n
        mov   @>ffea, r1                ; heapptr
        a     @>fffe(r9), r1            ; n 
        c     r1, @>ffec                ; heapmax 
        jlt   __l_2744
        jeq   __l_2744
__l_2743:
        clr   r1
        mov   @>0004(r9), r2            ; p
        mov   r1, *r2
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_147
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff2                 ; __rettmp_104
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fff2                 ; __rettmp_104
        mov   r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        jmp   __l_2745
__l_2744:
        mov   @>ffea, r1                ; heapptr
        mov   @>0004(r9), r2            ; p
        mov   r1, *r2
        a     @>fffe(r9), @>ffea        ; n  heapptr
__l_2745:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

__str_cnst_147 text >0a4f5554204f46204d454d    ; OUT OF MEM
        even 

        bank 13, >6370

; Subroutine: mark_83, level: 2
;   0004       4  var p: reference to pointer to void

mark_83:
        ai    r10, >fff8
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>ffea, r1                ; heapptr
        mov   @>0004(r9), r2            ; p
        mov   r1, *r2
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 13, >639c

; Subroutine: release_84, level: 2
;   0004       4  p: pointer to void

release_84:
        ai    r10, >fffc
        mov   r10, r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), @>ffea        ; p  heapptr
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 13, >63bc

; Subroutine: initheap_85, level: 2
;   0004       4  first: int16
;   0006       6  size: int16

initheap_85:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        mov   @>0004(r9), @>ffea        ; first  heapptr
        mov   @>0004(r9), r1            ; first
        a     @>0006(r9), r1            ; size 
        mov   r1, @>ffec                ;  heapmax
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 13, >63ee

; Subroutine: __read_line_console_86, level: 2
;   fff4     -12  __rettmp_105: int16
;   fff4     -12  __rettmp_106: int16
;   fff4     -12  __rettmp_108: int16
;   fff4     -12  __rettmp_109: int16
;   0004       4  var result: reference to string [255]
;   fff6     -10  row: int16
;   fff8      -8  col: int16
;   fffa      -6  pos: int16
;   fffc      -4  count: int16
;   fffe      -2  ch: char

__read_line_console_86:
        ai    r10, >ffec
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >000c
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; __rettmp_105
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  wherex_19
        mov   @>fff4(r9), @>fff8(r9)    ; __rettmp_105 col
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        ai    r1, >fff4                 ; __rettmp_106
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  wherey_20
        mov   @>fff4(r9), @>fff6(r9)    ; __rettmp_106 row
        clr   r1
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        li    r1, >0001
        mov   r1, @>fffa(r9)            ; pos
        clr   @>fffc(r9)                ; count
__l_2750:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; ch
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  getkey_57
        movb  @>fffe(r9), r1            ; ch
        srl   r1, 8
; no-opt
        ai    r1, >fff3
        jne   __l_2756
        b     @__c_2753
__l_2756:
        ai    r1, >ffed
        ci    r1, >005f
        jh    __l_2757
        b     @__c_2752
__l_2757:
        ai    r1, >ff98
        jeq   __c_2751
        b     @__l_2755
__c_2751:
        mov   @>fffa(r9), r1            ; pos
        ci    r1, >0001
        jgt   __l_2759
        b     @__l_2755
__l_2759:
        dec   @>fffa(r9)                ; pos
        mov   @>0004(r9), r1            ; result
        li    r2, >0100
        sb    r2, *r1
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fff6(r9), @>0002(r10)   ; row 
        mov   @>fff8(r9), *r10          ; col 
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; result 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        mov   @>fff8(r9), r1            ; col
        a     @>fffa(r9), r1            ; pos 
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r2
        ai    r2, >fff4                 ; __rettmp_108
        mov   r2, *r10
        bl    @__far_call_1
        data  >6004
        data  screenwidth_21
        c     r1, @>fff4(r9)            ; __rettmp_108 
        jgt   __l_2764
        jeq   __l_2764
__l_2763:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_2764:
        clr   @>fffc(r9)                ; count
        jmp   __l_2755
__c_2752:
        movb  @>fffe(r9), r1            ; ch
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        a     @>fffa(r9), r2            ; pos 
        movb  @>8303, *r2               ; low R1
        mov   @>fff8(r9), r1            ; col
        a     @>fffa(r9), r1            ; pos 
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        mov   r9, r2
        ai    r2, >fff4                 ; __rettmp_109
        mov   r2, *r10
        bl    @__far_call_1
        data  >6004
        data  screenwidth_21
        c     r1, @>fff4(r9)            ; __rettmp_109 
        jgt   __l_2768
        jeq   __l_2768
__l_2767:
        inc   @>fffa(r9)                ; pos
        mov   @>0004(r9), r1            ; result
        li    r2, >0100
        ab    r2, *r1
__l_2768:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fff6(r9), @>0002(r10)   ; row 
        mov   @>fff8(r9), *r10          ; col 
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; result 
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_string_62
        clr   @>fffc(r9)                ; count
        jmp   __l_2755
__c_2753:
        li    r1, >0100
        mov   r1, @>fffc(r9)            ; count
__l_2755:
        inc   @>fffc(r9)                ; count
        mov   @>fffc(r9), r1            ; count
        andi  r1, >00ff
        ci    r1, >0001
        jne   __l_2772
__l_2771:
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>fff6(r9), @>0002(r10)   ; row 
        mov   @>fff8(r9), r1            ; col
        a     @>fffa(r9), r1            ; pos 
        dec   r1
        mov   r1, *r10
        bl    @__far_call_1
        data  >6004
        data  gotoxy_18
        mov   @>fffc(r9), r1            ; count
        sra   r1, 8
        andi  r1, >0001
        ci    r1, >0000
        jeq   __l_2776
__l_2775:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >2000
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
        jmp   __l_2772
__l_2776:
        ai    r10, >fff6
        mov   @>7ffe, @>0008(r10)
        seto  @>0006(r10)
        seto  @>0004(r10)
        li    r1, >1f00
        movb  r1, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_char_61
__l_2772:
        movb  @>fffe(r9), r1            ; ch
        srl   r1, 8
        ci    r1, >000d
        jeq   __l_2780
        b     @__l_2750
__l_2780:
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        li    r1, >ff8a                 ; output
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  __write_lf_59
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        inct  r10
        b     @__far_ret

        bank 13, >66e2

; Subroutine: reservevdpbufs_87, level: 2
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

reservevdpbufs_87:
        ai    r10, >fff2
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0001
        mov   r1, @>fffc(r9)            ; i
        li    r1, >0003
        mov   r1, @>fffe(r9)            ; $i
        jmp   __l_2783
__l_2782:
        inc   @>fffc(r9)                ; i
__l_2783:
        li    r1, >8370                 ; vdpfree
        li    r2, >00f5
        s     r2, *r1
        clr   r1
        li    r2, >ffb4                 ; openfiles
        mov   @>fffc(r9), r3            ; i
        dec   r3
        li    r12, >0006
        mpy   r3, r12
        a     r13, r2                   ;  
        movb  @>8303, *r2               ; low R1
        mov   @>8370, r1                ; vdpfree
        inc   r1
        li    r2, >ffb4                 ; openfiles
        mov   @>fffc(r9), r3            ; i
        dec   r3
        li    r12, >0006
        mpy   r3, r12
        a     r13, r2                   ;  
        mov   r1, @>0004(r2)
        li    r1, >8370                 ; vdpfree
        li    r2, >0024
        s     r2, *r1
        mov   @>8370, r1                ; vdpfree
        inc   r1
        li    r2, >ffb4                 ; openfiles
        mov   @>fffc(r9), r3            ; i
        dec   r3
        li    r12, >0006
        mpy   r3, r12
        a     r13, r2                   ;  
        mov   r1, @>0002(r2)
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_2782
__l_2786:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret

        bank 13, >678c

; Subroutine: getfiledescriptor_88, level: 2
;   fffc      -4  __rettmp_113: string [0]
;   fffd      -3  __rettmp_114: boolean
;   0004       4  var result: reference to boolean
;   0006       6  var f: reference to record
;   0008       8  istextfile: boolean
;   fffe      -2  i: int16

getfiledescriptor_88:
        ai    r10, >fff2
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0004
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        seto  r1
        mov   @>0006(r9), r2            ; f
        mov   r1, *r2
        clr   r1
        mov   @>0006(r9), r2            ; f
        mov   r1, @>0002(r2)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        clr   r1
        movb  r1, @>0004(r10)
        li    r1, >0008
        mov   r1, @>0002(r10)
        mov   @>0006(r9), r1            ; f
        ai    r1, >0004                 ; .pab
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  fillchar_58
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        ai    r10, >fffc
        li    r1, __str_cnst_148
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_113
        mov   r1, *r10
        bl    @__copy_str_const
        mov   r9, r1
        ai    r1, >fffc                 ; __rettmp_113
        mov   r1, @>0004(r10)
        mov   @>0006(r9), r1            ; f
        ai    r1, >000d                 ; .pab
        mov   r1, @>0002(r10)
        mov   r9, r1
        ai    r1, >fffd                 ; __rettmp_114
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  __short_str_equal_81
        movb  @>fffd(r9), r1            ; __rettmp_114
        jeq   __l_2791
__l_2790:
        movb  @>0008(r9), r1            ; istextfile
        jeq   __l_2795
__l_2794:
        clr   r1
        mov   @>0006(r9), r2            ; f
        mov   r1, *r2
        jmp   __l_2802
__l_2795:
        li    r1, >0003
        mov   r1, @>ffb2                ;  inoutres
        jmp   __l_2802
__l_2791:
        li    r1, >0001
        mov   r1, @>fffe(r9)            ; i
__l_2788:
        li    r1, >ffb4                 ; openfiles
        mov   @>fffe(r9), r2            ; i
        dec   r2
        li    r12, >0006
        mpy   r2, r12
        a     r13, r1                   ;  
        movb  *r1, r1
        jne   __l_2799
__l_2798:
        li    r1, >0001
        li    r2, >ffb4                 ; openfiles
        mov   @>fffe(r9), r3            ; i
        dec   r3
        li    r12, >0006
        mpy   r3, r12
        a     r13, r2                   ;  
        movb  @>8303, *r2               ; low R1
        mov   @>fffe(r9), r1            ; i
        mov   @>0006(r9), r2            ; f
        mov   r1, *r2
        li    r1, >ffb4                 ; openfiles
        mov   @>0006(r9), r2            ; f
        mov   *r2, r2
        dec   r2
        li    r12, >0006
        mpy   r2, r12
        a     r13, r1                   ;  
        mov   @>0004(r1), r1
        mov   @>0006(r9), r2            ; f
        mov   r1, @>0006(r2)
__l_2799:
        inc   @>fffe(r9)                ; i
        mov   @>fffe(r9), r1            ; i
        ci    r1, >0003
        jlt   __l_2803
        jne   __l_2802
__l_2803:
        mov   @>0006(r9), r1            ; f
        mov   *r1, r1
        ci    r1, >ffff
        jeq   __l_2788
__l_2802:
        li    r1, >0001
        mov   @>0006(r9), r2            ; f
        mov   *r2, r2
        seto  r3
        c     r2, r3
        clr   r2
        jne   __l_2806
        inc   r2
__l_2806:
        mpy   r1, r2
        mov   r3, @>ffb2                ;   inoutres
        mov   r3, r1                    ; inoutres
        clr   r2
        c     r1, r2
        clr   r1
        jne   __l_2807
        inc   r1
__l_2807:
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

__str_cnst_148 text >00    ; 
        even 

        bank 13, >690a

; Subroutine: execdsr_89, level: 2
;   fffe      -2  __rettmp_115: boolean
;   0004       4  var result: reference to boolean
;   0006       6  var f: reference to record

execdsr_89:
        ai    r10, >fff6
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        li    r1, >ffb4                 ; openfiles
        mov   @>0006(r9), r2            ; f
        mov   *r2, r2
        dec   r2
        li    r12, >0006
        mpy   r2, r12
        a     r13, r1                   ;  
        mov   @>0002(r1), @>0004(r10)   ;  
        mov   @>0006(r9), r1            ; f
        ai    r1, >0004                 ; .pab
        mov   r1, @>0002(r10)
        mov   r9, r1
        dect  r1                        ; __rettmp_115
        mov   r1, *r10
        bl    @__far_call_1
        data  >6018
        data  dsrlink_55
        movb  @>fffe(r9), r1            ; __rettmp_115
        srl   r1, 8
        mov   @>0004(r9), r2            ; result
        movb  @>8303, *r2               ; low R1
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0004
        b     @__far_ret

        bank 13, >697c

; Subroutine: openfile_90, level: 2
;   fffe      -2  __rettmp_116: boolean
;   fffe      -2  __rettmp_117: boolean
;   0004       4  var f: reference to record
;   0006       6  opcode: uint8
;   0008       8  ftype: uint8
;   000a      10  reclen: uint8
;   000c      12  istextfile: boolean

openfile_90:
        ai    r10, >fff4
        mov   r10, r12
        mov   r3, *r12+
        mov   r2, *r12+
        mov   r1, *r12+
        inct  r12
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        ai    r10, >fff8
        mov   @>7ffe, @>0006(r10)
        movb  @>000c(r9), @>0004(r10)   ; istextfile 
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r1
        dect  r1                        ; __rettmp_116
        mov   r1, *r10
        bl    @__far_call_1
        data  >601a
        data  getfiledescriptor_88
        movb  @>fffe(r9), r1            ; __rettmp_116
        jeq   __l_2811
__l_2813:
        mov   @>0004(r9), r1            ; f
        mov   *r1, r1
        jeq   __l_2811
__l_2810:
        movb  @>0006(r9), r1            ; opcode
        srl   r1, 8
        mov   @>0004(r9), r2            ; f
        ai    r2, >0004                 ; .pab
        movb  @>8303, *r2               ; low R1
        movb  @>0008(r9), r1            ; ftype
        srl   r1, 8
        mov   @>0004(r9), r2            ; f
        ai    r2, >0005                 ; .pab
        movb  @>8303, *r2               ; low R1
        movb  @>000a(r9), r1            ; reclen
        srl   r1, 8
        mov   @>0004(r9), r2            ; f
        ai    r2, >0008                 ; .pab
        movb  @>8303, *r2               ; low R1
        li    r1, >0002
        ai    r10, >fffa
        mov   @>7ffe, @>0004(r10)
        mov   @>0004(r9), @>0002(r10)   ; f 
        mov   r9, r2
        dect  r2                        ; __rettmp_117
        mov   r2, *r10
        bl    @__far_call_1
        data  >601a
        data  execdsr_89
        movb  @>fffe(r9), r2            ; __rettmp_117
        srl   r2, 8
        li    r12, >0001
        xor   r12, r2
        mpy   r1, r2
        mov   r3, @>ffb2                ;   inoutres
__l_2811:
        mov   *r10+, r3
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >000a
        b     @__far_ret

        bank 13, >6a42

; Subroutine: strcompare_91, level: 2
;   fffa      -6  __rettmp_136: int16
;   0004       4  var result: reference to int16
;   0006       6  s: pointer to char (char)
;   0008       8  t: pointer to char (char)
;   fffc      -4  i: int16
;   fffe      -2  $i: int16

strcompare_91:
        ai    r10, >fff2
        mov   r10, r12
        mov   r2, *r12+
        mov   r1, *r12+
        ai    r12, >0006
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        li    r1, >0001
        mov   r1, @>fffc(r9)            ; i
        mov   @>0006(r9), r1            ; s
        movb  *r1, r1
        srl   r1, 8
        mov   @>0008(r9), r2            ; t
        movb  *r2, r2
        srl   r2, 8
; no.opt
        c     r1, r2
        jlt   __l_2820
        mov   r2, r1
__l_2820:
        mov   r1, @>fffe(r9)            ; $i
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jlt   __l_2817
        jeq   __l_2817
        jmp   __l_2827
__l_2816:
        inc   @>fffc(r9)                ; i
__l_2817:
        mov   @>0006(r9), r1            ; s
        a     @>fffc(r9), r1            ; i 
        movb  *r1, r1
        srl   r1, 8
        mov   @>0008(r9), r2            ; t
        a     @>fffc(r9), r2            ; i 
        movb  *r2, r2
        srl   r2, 8
        c     r1, r2
        jeq   __l_2824
__l_2823:
        mov   @>0006(r9), r1            ; s
        a     @>fffc(r9), r1            ; i 
        movb  *r1, r1
        srl   r1, 8
        mov   @>0008(r9), r2            ; t
        a     @>fffc(r9), r2            ; i 
        movb  *r2, r2
        srl   r2, 8
        s     r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
        jmp   __l_2819
__l_2824:
        c     @>fffc(r9), @>fffe(r9)    ; i $i 
        jne   __l_2816
__l_2827:
        mov   @>0006(r9), r1            ; s
        movb  *r1, r1
        srl   r1, 8
        mov   @>0008(r9), r2            ; t
        movb  *r2, r2
        srl   r2, 8
        s     r2, r1
        mov   @>0004(r9), r2            ; result
        mov   r1, *r2
__l_2819:
        mov   *r10+, r2
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        ai    r10, >0006
        b     @__far_ret

        bank 13, >6afa

; Subroutine: $system_init_92, level: 2

$system_init_92:
        ai    r10, >fffa
        mov   r10, r12
        mov   r1, *r12+
        mov   r9, *r12
        mov   r12, r9
        mov   r11, @>0002(r12)
        clr   @>ff8a                    ;  output
        clr   @>ff62                    ;  input
        ai    r10, >fffc
        mov   @>7ffe, @>0002(r10)
        clr   r1
        movb  r1, *r10
        bl    @__far_call_1
        data  >6004
        data  setvideomode_15
        dect  r10
        mov   @>7ffe, *r10
        bl    @__far_call_1
        data  >601a
        data  reservevdpbufs_87
        mov   *r10, r1
        mov   r9, r10
        mov   *r10+, r9
        mov   *r10+, r11
        b     @__far_ret
